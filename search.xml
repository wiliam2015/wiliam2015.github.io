<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Java线程状态]]></title>
      <url>http://wiliam.me/2020/05/05/javaThreadState.html</url>
      <content type="html"><![CDATA[<p><img src="http://imgcdn.yalongkeji.com/blog/20200505174502.png" alt="image-20200505174459849"></p>
<blockquote>
<p>Java线程状态</p>
</blockquote>
<a id="more"></a>
<h1 id="Java线程状态"><a href="#Java线程状态" class="headerlink" title="Java线程状态"></a>Java线程状态</h1><p>java线程一共有6种状态</p>
<ul>
<li><strong>New（新建）</strong></li>
<li><strong>Runnable（可运行）</strong></li>
<li><strong>Blocked（被阻塞）</strong></li>
<li><strong>Waiting（等待）</strong></li>
<li><strong>Timed waiting（计时等待）</strong></li>
<li><strong>Terminated（终止）</strong></li>
</ul>
<p>转换关系图如下</p>
<p><img src="http://imgcdn.yalongkeji.com/blog/20200505155259.png" alt="image-20200505155257484"></p>
<p>说明如下：</p>
<ol>
<li><strong>New</strong>：线程创建后但还没开始时的状态就是新建，即<code>new Thread()</code>后线程的状态就是新建，但还没调用start方法。</li>
<li><strong>Runnable</strong>：线程一旦调用<code>start()</code>方法，无论是否运行，状态都为Runable，但Runnable是从JVM视图看是处于执行状态，但实际上操作系统可能在等待一些资源，如此时处理器在干其他的，此时Runnable可以分成两个子状态<code>Ready</code>和<code>Running</code>，所以通过上图当线程被调度器选中执行实际才处于Running状态。所以显示Runable状态指示表示线程可以运行，不表示线程当下一定在运行，线程是否运行由虚拟机所在操作系统调度决定。</li>
<li><strong>Timed waiting</strong>:和wait一样，不过会在传入的时间之后或收到其他线程的通知都会恢复到可运行的状态。</li>
<li><strong>Waiting</strong>：当调用下面没有超时时间的方法是线程会转移到Waiting状态<ul>
<li><code>Object.wait()</code></li>
<li><code>Thread.join()</code></li>
<li><code>LockSupport.park()</code></li>
</ul>
</li>
<li><strong>Blocked</strong>：线程试图获取一个内部对象的<code>Monitor</code>（进入<code>synchronized</code>方法或<code>synchronized</code>块）但是其他线程已经抢先获取，那此线程被阻塞，直到其他线程释放<code>Monitor</code>并且线程调度器允许当前线程获取到<code>Monitor</code>，此线程就恢复到可运行状态。</li>
<li><strong>Terminated</strong>：线程执行完毕正常结束或执行过程中因未捕获异常意外终止都会是线程进入被终止状态。</li>
</ol>
<h2 id="验证DEMO"><a href="#验证DEMO" class="headerlink" title="验证DEMO"></a>验证DEMO</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadState</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">static</span> Object o = <span class="keyword">new</span> Object();</span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">                <span class="keyword">synchronized</span> (o)&#123;</span><br><span class="line">                    Thread.sleep(<span class="number">8000</span>);</span><br><span class="line">                    o.wait();</span><br><span class="line">                &#125;</span><br><span class="line">                Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SyncThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">synchronized</span> (o)&#123;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Thread t = <span class="keyword">new</span> MyThread();</span><br><span class="line">        Thread syncThread = <span class="keyword">new</span> SyncThread();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"调用new方法后 my thread state:"</span>+t.getState());</span><br><span class="line"></span><br><span class="line">        t.start();</span><br><span class="line">        System.out.println(<span class="string">"调用start方法后 my thread state:"</span>+t.getState());</span><br><span class="line"></span><br><span class="line">        Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        syncThread.start();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"调用sleep方法后 my thread state:"</span>+t.getState());</span><br><span class="line"></span><br><span class="line">        Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">        System.out.println(<span class="string">"进入同步代码块 sync thread state:"</span>+syncThread.getState());</span><br><span class="line"></span><br><span class="line">        Thread.sleep(<span class="number">8000</span>);</span><br><span class="line">        System.out.println(<span class="string">"调用wait方法后 my thread state:"</span>+t.getState());</span><br><span class="line"></span><br><span class="line">        Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        <span class="keyword">synchronized</span> (o)&#123;</span><br><span class="line">            o.notify();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        t.join();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"调用notify方法后 my thread state:"</span>+t.getState());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出结果</p>
<figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">调用new方法后 my thread <span class="keyword">state</span>:NEW</span><br><span class="line">调用start方法后 my thread <span class="keyword">state</span>:RUNNABLE</span><br><span class="line">调用sleep方法后 my thread <span class="keyword">state</span>:TIMED_WAITING</span><br><span class="line">进入同步代码块 sync thread <span class="keyword">state</span>:BLOCKED</span><br><span class="line">调用wait方法后 my thread <span class="keyword">state</span>:WAITING</span><br><span class="line">调用notify方法后 my thread <span class="keyword">state</span>:TERMINATED</span><br></pre></td></tr></table></figure>
<p>参考资料：<a href="https://www.uml-diagrams.org/java-thread-uml-state-machine-diagram-example.html" target="_blank" rel="noopener">https://www.uml-diagrams.org/java-thread-uml-state-machine-diagram-example.html</a></p>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
            <category> java </category>
            
            <category> Thread </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
            <tag> Thread </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Spring源码编译]]></title>
      <url>http://wiliam.me/2020/05/04/springSourceBuild.html</url>
      <content type="html"><![CDATA[<p><img src="http://imgcdn.yalongkeji.com/blog/20200504153807.png" alt="image-20200504153803863"></p>
<blockquote>
<p>Spring源码编译</p>
</blockquote>
<a id="more"></a>
<h1 id="Spring源码编译及导入IDEA"><a href="#Spring源码编译及导入IDEA" class="headerlink" title="Spring源码编译及导入IDEA"></a>Spring源码编译及导入IDEA</h1><blockquote>
<p>前几天同事分享了下Spring源码编译，自己之前也下载了spring源码一直没编译过，正好借此机会自己编译下，本文记录了编译过程，和大家分享。</p>
</blockquote>
<h2 id="1-编译之前准备"><a href="#1-编译之前准备" class="headerlink" title="1.编译之前准备"></a>1.编译之前准备</h2><p>网上也找了一些文章，有的用命令行直接编译的，有的是直接导入idea编译的。这里我采用的是第一个。</p>
<p>相关依赖说明如下：</p>
<figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Java:<span class="number">1.8</span><span class="number">.0</span>_77</span><br><span class="line">Gradle:<span class="number">5.6</span><span class="number">.4</span>(Spring会自动下载，不用预先配置)</span><br><span class="line">Spring分支:<span class="number">5.2</span>.x</span><br></pre></td></tr></table></figure>
<h3 id="1-1源码下载"><a href="#1-1源码下载" class="headerlink" title="1.1源码下载"></a>1.1源码下载</h3><p>Spring源码下载：<a href="https://github.com/spring-projects/spring-framework" target="_blank" rel="noopener">https://github.com/spring-projects/spring-framework</a></p>
<blockquote>
<p>这里有一点需要说明的是5.2.x版本编译不需要在下载Gradle了，编译的时候Spring会直接下载Gradle</p>
</blockquote>
<p>源码git clone下来之后，将分支由master切换为5.2.x</p>
<h3 id="1-2修改仓库地址"><a href="#1-2修改仓库地址" class="headerlink" title="1.2修改仓库地址"></a>1.2修改仓库地址</h3><p>由于spring使用的是maven中央仓库，但中央仓库在国内网络不太稳定，这里配置仓库地址使用阿里云的，修改Spring目录下的<code>build.gradle</code>文件，找到如下位置</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">repositories &#123;</span><br><span class="line">		mavenCentral()</span><br><span class="line">		maven &#123; url "https://repo.spring.io/libs-spring-framework-build" &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>增加如下仓库镜像，最后修改结果如下：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">repositories &#123;</span><br><span class="line">	maven &#123; name "Alibaba" ; url "https://maven.aliyun.com/repository/public" &#125;</span><br><span class="line">	maven &#123; name "Bstek" ; url "https://nexus.bsdn.org/content/groups/public" &#125;</span><br><span class="line">	mavenCentral()</span><br><span class="line">	maven &#123; url "https://repo.spring.io/libs-spring-framework-build" &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1-3修改Gradle仓库地址信息"><a href="#1-3修改Gradle仓库地址信息" class="headerlink" title="1.3修改Gradle仓库地址信息"></a>1.3修改Gradle仓库地址信息</h3><ul>
<li>避免下载的依赖包都放在C盘，占用C盘空间，所以需要修改Gradle仓库位置，将仓库位置和maven本地仓库配置一样即可</li>
<li>新增环境变量<code>GRADLE_USER_HOME</code>值为<code>D:\maven_repository</code></li>
</ul>
<h2 id="2开始编译"><a href="#2开始编译" class="headerlink" title="2开始编译"></a>2开始编译</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> spring源码目录</span><br><span class="line">gradlew.bat build</span><br></pre></td></tr></table></figure>
<p>等待编译完成吧,成功截图如下</p>
<p><img src="http://imgcdn.yalongkeji.com/blog/20200504144159.png" alt="成功截图"></p>
<p>不编译成功的原因基本上就是网络的原因，所以一定要配置好国内的镜像哦</p>
<h2 id="3导入IDEA"><a href="#3导入IDEA" class="headerlink" title="3导入IDEA"></a>3导入IDEA</h2><p>我使用的是IDEA社区版，导入方法如下</p>
<ol>
<li><p>进入到Spring工作目录</p>
</li>
<li><p>使用命令<code>gradlew.bat :spring-oxm:compileTestJava</code>提前预编译好<code>spring-oxm</code></p>
</li>
<li><p>打开idea依次选择(File -&gt; New -&gt; Project from Existing Sources)选择spring源码根目录下的<code>build.gradle</code></p>
<p><img src="http://imgcdn.yalongkeji.com/blog/20200504152706.png" alt="image-20200504152639801"></p>
<p><img src="http://imgcdn.yalongkeji.com/blog/20200504154714.png" alt="image-20200504152943927"></p>
</li>
<li><p>最后等待编译成功吧</p>
<p><img src="http://imgcdn.yalongkeji.com/blog/20200504153616.png" alt="image-20200504153613707"></p>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> Spring </category>
            
            <category> SpringFrameWork </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Spring </tag>
            
            <tag> SpringFrameWork </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[理查德福曼学习法]]></title>
      <url>http://wiliam.me/2019/08/08/startMethod.html</url>
      <content type="html"><![CDATA[<p><img src="http://imgcdn.yalongkeji.com/blog/20190809085942.png"></p>
<blockquote>
<p>被世界公认的效率最高学习法</p>
</blockquote>
<a id="more"></a>
<h1 id="理查德福曼学习法"><a href="#理查德福曼学习法" class="headerlink" title="理查德福曼学习法"></a>理查德福曼学习法</h1><ol>
<li>选择一个你要学习的内容</li>
<li>想象如果你要将这些内容教授给一名新人该如何讲解</li>
<li>如果过程出了问题重新回顾这个内容</li>
<li>简化让你的讲解越来越简单易懂</li>
</ol>
<p>福曼学习法，好好学习，天天向上。</p>
<p>相关阅读：<a href="https://blog.csdn.net/liwei16611/article/details/89816693" target="_blank" rel="noopener">https://blog.csdn.net/liwei16611/article/details/89816693</a></p>
]]></content>
      
        <categories>
            
            <category> 学习法 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 学习法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[node管理多个版本与源]]></title>
      <url>http://wiliam.me/2019/07/23/node-version.html</url>
      <content type="html"><![CDATA[<p> <img src="http://imgcdn.yalongkeji.com/blog/20190723163039.jpg"></p>
<blockquote>
<p>快速切换node版本与node源方法</p>
</blockquote>
<a id="more"></a>
<h1 id="node管理多个版本"><a href="#node管理多个版本" class="headerlink" title="node管理多个版本"></a>node管理多个版本</h1><p>使用：nvm(node版本管理)</p>
<p>nvm就是nodejs version manage 叫做nodejs 版本管理，而nodejs有很多版本，场景如下:</p>
<p>　　  1、而你手上开发的有多个项目又分别是不同的nodejs版本，咱们就可以用nvm轻松切换！</p>
<p>　　  2、假设你正在开发的项目开始使用的nodejs版本是8.0，而现在因为某些原因，你需要升级 或者 降级 nodejs 版本，也可以使用 nvm 轻松切换
　　  </p>
<p>windows安装方法：<a href="https://cloud.tencent.com/developer/news/64123" target="_blank" rel="noopener">https://cloud.tencent.com/developer/news/64123</a></p>
<p>linux安装方法：<a href="https://yq.aliyun.com/articles/688562" target="_blank" rel="noopener">https://yq.aliyun.com/articles/688562</a></p>
<h1 id="node管理多个源"><a href="#node管理多个源" class="headerlink" title="node管理多个源"></a>node管理多个源</h1><p>使用：nrm —— 快速切换 NPM 源 （附带测速功能）</p>
<h2 id="安装nrm"><a href="#安装nrm" class="headerlink" title="安装nrm"></a>安装nrm</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g nrm</span><br></pre></td></tr></table></figure>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="列出可选的源"><a href="#列出可选的源" class="headerlink" title="列出可选的源"></a>列出可选的源</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">nrm ls                                                                                                                                    </span><br><span class="line"></span><br><span class="line">* npm ---- https://registry.npmjs.org/</span><br><span class="line">  cnpm --- http://r.cnpmjs.org/</span><br><span class="line">  taobao - http://registry.npm.taobao.org/</span><br><span class="line">  eu ----- http://registry.npmjs.eu/</span><br><span class="line">  au ----- http://registry.npmjs.org.au/</span><br><span class="line">  sl ----- http://npm.strongloop.com/</span><br><span class="line">  nj ----- https://registry.nodejitsu.com/</span><br></pre></td></tr></table></figure>
<p>带 <code>*</code> 的是当前使用的源，上面的输出表明当前源是官方源。</p>
<h2 id="切换"><a href="#切换" class="headerlink" title="切换"></a>切换</h2><p>切换到taobao</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nrm use taobao                                                                                                                             </span><br><span class="line"></span><br><span class="line">   Registry has been <span class="built_in">set</span> to: http://registry.npm.taobao.org/</span><br></pre></td></tr></table></figure>
<h2 id="增加源"><a href="#增加源" class="headerlink" title="增加源"></a>增加源</h2><p>你可以增加定制的源，特别适用于添加企业内部的私有源。</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nrm <span class="built_in">add</span>  <span class="symbol">&lt;registry&gt;</span> <span class="symbol">&lt;url&gt;</span> [home]</span><br></pre></td></tr></table></figure>
<h2 id="删除源"><a href="#删除源" class="headerlink" title="删除源"></a>删除源</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nrm del <span class="tag">&lt;<span class="name">registry</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="测试速度"><a href="#测试速度" class="headerlink" title="测试速度"></a>测试速度</h3><p>你还可以通过 <code>nrm test</code> 测试相应源的响应时间。</p>
<p>例如，测试官方源的响应时间：</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nrm test <span class="built_in">npm</span>                                                                                                                               </span><br><span class="line"></span><br><span class="line">  <span class="built_in">npm</span> ---- <span class="number">1328</span>ms</span><br></pre></td></tr></table></figure>
<p>测试所有源的响应时间：</p>
<figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> nrm test                                                                                                                                   </span><br><span class="line"></span><br><span class="line">  npm ---- <span class="number">891</span>ms</span><br><span class="line">  cnpm --- <span class="number">1213</span>ms</span><br><span class="line">* taobao - <span class="number">460</span>ms</span><br><span class="line">  eu ----- <span class="number">3859</span>ms</span><br><span class="line">  au ----- <span class="number">1073</span>ms</span><br><span class="line">  sl ----- <span class="number">4150</span>ms</span><br><span class="line">  nj ----- <span class="number">8008</span>ms</span><br></pre></td></tr></table></figure>
<p>注意，为了取得较准确的结果，可以考虑多次测试取平均值。</p>
<h2 id="许可"><a href="#许可" class="headerlink" title="许可"></a>许可</h2><p>nrm 为开源软件，使用 MIT 许可。</p>
<h2 id="项目主页"><a href="#项目主页" class="headerlink" title="项目主页"></a>项目主页</h2><p><a href="https://github.com/Pana/nrm" target="_blank" rel="noopener">github.com/Pana/nrm</a></p>
]]></content>
      
        <categories>
            
            <category> node </category>
            
        </categories>
        
        
        <tags>
            
            <tag> node </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[java死锁条件]]></title>
      <url>http://wiliam.me/2019/07/02/java-deadlock.html</url>
      <content type="html"><![CDATA[<p><img src="http://imgcdn.yalongkeji.com/blog/20190723164843.png" style="width:300px;height:300px"></p>
<blockquote>
<p>并发编程时有可能会遇到死锁的情况，但会在什么情况下发生死锁呢。Coffman已经帮我们总结好了。</p>
</blockquote>
<a id="more"></a>
<h1 id="java线程死锁条件"><a href="#java线程死锁条件" class="headerlink" title="java线程死锁条件"></a>java线程死锁条件</h1><p>满足下面4个条件就会死锁，具体如下：</p>
<ol>
<li>互斥，共享资源 X 和 Y 只能被一个线程占用；</li>
<li>占有且等待，线程 T1 已经取得共享资源 X，在等待共享资源 Y 的时候，不释放共享资源 X；</li>
<li>不可抢占，其他线程不能强行抢占线程 T1 占有的资源；</li>
<li>循环等待，线程 T1 等待线程 T2 占有的资源，线程 T2 等待线程 T1 占有的资源，就是循环等<br>待。</li>
</ol>
<p>所以解决方法就是破坏上面一个条件就可以了，死锁就解决了。</p>
<p>其中，互斥这个条件我们没有办法破坏，因为我们用锁为的就是互斥。不过其他三个条件都是有<br>办法破坏掉的，到底如何做呢？</p>
<ol>
<li>对于“占用且等待”这个条件，我们可以一次性申请所有的资源，这样就不存在等待了。</li>
<li>对于“不可抢占”这个条件，占用部分资源的线程进一步申请其他资源时，如果申请不到，可<br>以主动释放它占有的资源，这样不可抢占这个条件就破坏掉了。</li>
<li>对于“循环等待”这个条件，可以靠按序申请资源来预防。所谓按序申请，是指资源是有线性<br>顺序的，申请的时候可以先申请资源序号小的，再申请资源序号大的，这样线性化后自然就不<br>存在循环了。</li>
</ol>
<h1 id="DEMO示例"><a href="#DEMO示例" class="headerlink" title="DEMO示例"></a>DEMO示例</h1><p><a href="https://github.com/wiliam2015/javaconcurrent/blob/master/src/main/java/me/wiliam/deadlock/DeadLockDemo.java" target="_blank" rel="noopener">示例代码</a></p>
]]></content>
      
        <categories>
            
            <category> java </category>
            
            <category> deadlock </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
            <tag> deadlock </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[WIN10安装linux子系统]]></title>
      <url>http://wiliam.me/2019/06/20/win10linux.html</url>
      <content type="html"><![CDATA[<p><img src="http://imgcdn.yalongkeji.com/blog/20190723165506.jpg"></p>
<blockquote>
<p>win10有许多新特性，其中之一就是可以安装linux子系统，这对于想要学习linux的同学不得不说是个福音，不用再装虚拟机等一系列东西了，网上搜了一些教程跟着教程安装了下，不得不说确实很好用</p>
</blockquote>
<a id="more"></a>
<h1 id="WIN10安装linux子系统"><a href="#WIN10安装linux子系统" class="headerlink" title="WIN10安装linux子系统"></a>WIN10安装linux子系统</h1><h2 id="安装方法"><a href="#安装方法" class="headerlink" title="安装方法"></a>安装方法</h2><p>这里就不自己写了，下面是网上相关的好文章教程链接，大家自己可以参考下</p>
<p><a href="https://www.jianshu.com/p/bc38ed12da1d" target="_blank" rel="noopener">https://www.jianshu.com/p/bc38ed12da1d</a></p>
<p><a href="https://jingyan.baidu.com/article/c85b7a64a56c7f003aac954f.html" target="_blank" rel="noopener">https://jingyan.baidu.com/article/c85b7a64a56c7f003aac954f.html</a></p>
<h2 id="本地位置"><a href="#本地位置" class="headerlink" title="本地位置"></a>本地位置</h2><p>安装完成后再本地的存储位置</p>
<figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:<span class="symbol">\U</span>sers<span class="symbol">\用</span>户名<span class="symbol">\A</span>ppData<span class="symbol">\L</span>ocal<span class="symbol">\P</span>ackages<span class="symbol">\C</span>anonicalGroupLimited.UbuntuonWindows_79rhkp1fndgsc<span class="symbol">\L</span>ocalState<span class="symbol">\r</span>ootfs</span><br></pre></td></tr></table></figure>
<h2 id="进入方法"><a href="#进入方法" class="headerlink" title="进入方法"></a>进入方法</h2><p>进入命令行后输入<code>bash</code>或者输入<code>ubuntu</code>进入linux子系统，这时你可以尽情遨游在linux世界了</p>
]]></content>
      
        <categories>
            
            <category> win10 </category>
            
            <category> linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> win10 </tag>
            
            <tag> linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[自动构建发布]]></title>
      <url>http://wiliam.me/2018/10/19/20181019162000.html</url>
      <content type="html"><![CDATA[<blockquote>
<p>本文章使用Daocloud自动构建发布。</p>
</blockquote>
<a id="more"></a>
<h1 id="自动构建发布"><a href="#自动构建发布" class="headerlink" title="自动构建发布"></a>自动构建发布</h1><p>由于换工作换了电脑，博客一直没有更新，因为要写博客需要把hexo的一堆东西下载到自己的电脑上，工作电脑有一份，家里电脑有一份，太费劲了，而且每次都需要自己更新，所以就想到了能否自动构建发布了，我只提交文章到git上就可以了，之前看我同学的博客有用daocloud发布的，自己借鉴和研究了下，之前工作忙也没仔细研究，现在总算有点时间，所以抽时间研究了下，部署成功了，以后写博客就方便了，后续有时间会把自己此次成功自动构建发布总结下，写个文章发出来，共大家学习参考。</p>
<blockquote>
<p>想了解更多技术文章信息，请继续关注<a href="http://wiliam.me">wiliam.s Blog</a>，谢谢，欢迎来访！</p>
</blockquote>
<hr>
<p>参考资料<br><a href="https://www.jianshu.com/p/f3fcecfc0be5" target="_blank" rel="noopener">随时随地让Hexo持续部署</a></p>
]]></content>
      
        <categories>
            
            <category> 自动构建 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> docker </tag>
            
            <tag> 自动构建 </tag>
            
            <tag> daocloud </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[git教程分享]]></title>
      <url>http://wiliam.me/2017/12/21/20171221092910.html</url>
      <content type="html"><![CDATA[<h1 id="git教程分享"><a href="#git教程分享" class="headerlink" title="git教程分享"></a>git教程分享</h1><p>官方教程地址：<a href="https://git-scm.com/book/zh/v2" target="_blank" rel="noopener">简体中文版走你</a></p>
<blockquote>
<p>想了解更多技术文章信息，请继续关注<a href="http://wiliam.me">wiliam.s Blog</a>，谢谢，欢迎来访！</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> git </category>
            
        </categories>
        
        
        <tags>
            
            <tag> git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Git的.gitignore文件规则梳理]]></title>
      <url>http://wiliam.me/2017/12/20/20171220172910.html</url>
      <content type="html"><![CDATA[<blockquote>
<p>.gitignore文件是git使用的管理规则文件，定义哪些可以上传到git服务器，哪些不可上传到服务器，在此在网上搜索了一些规则，自己整理下，做备忘使用，也分享出来方便大家查看。</p>
</blockquote>
<a id="more"></a>
<h1 id="gitignore文件作用"><a href="#gitignore文件作用" class="headerlink" title=".gitignore文件作用"></a>.gitignore文件作用</h1><p>告诉git哪些文件不需要添加到版本管理中。例如IDE的一些配置信息，像eclipse的<code>.settings</code>文件夹和其中的文件,IDEA的<code>.idea</code>目录和其文件等。</p>
<h1 id="配置语法"><a href="#配置语法" class="headerlink" title="配置语法"></a>配置语法</h1><p>以斜杠<code>/</code>开头表示目录<br>以星号<code>*</code>通配多个字符<br>以问号<code>?</code>通配单个字符<br>以方括号<code>[]</code>包含单个字符的匹配列表<br>以叹号<code>!</code>表示不忽略(跟踪)匹配到的文件或目录<br>git 对于 <code>.ignore</code> 配置文件是按行从上到下进行规则匹配的，意味着如果前面的规则匹配的范围更大，则后面的规则将不会生效</p>
<h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><ol>
<li>规则：<code>fd1/*</code>：忽略目录 fd1 下的全部内容；注意，不管是根目录下的 /fd1/ 目录，还是某个子目录 /child/fd1/ 目录，都会被忽略；</li>
<li>规则：<code>/fd1/*</code>：忽略根目录下的 /fd1/ 目录的全部内容；</li>
<li>规则：规则见下方，含义是忽略全部内容，但是不忽略 .gitignore 文件、根目录下的 /fw/bin/ 和 /fw/sf/ 目录；<figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">!.gitignore</span><br><span class="line">!<span class="regexp">/fw/bin</span><span class="regexp">/</span></span><br><span class="line"><span class="regexp">!/fw</span><span class="regexp">/sf/</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h1><p>如果你不慎在创建<code>.gitignore</code>文件之前就push了项目，那么即使你在<code>.gitignore</code>文件中写入新的过滤规则，这些规则也不会起作用，Git仍然会对所有文件进行版本管理。<br>简单来说，出现这种问题的原因就是Git已经开始管理这些文件了，所以你无法再通过过滤规则过滤它们。因此一定要养成在项目开始就创建<code>.gitignore</code>文件的习惯，否则一旦push，处理起来会非常麻烦</p>
<blockquote>
<p>想了解更多技术文章信息，请继续关注<a href="http://wiliam.me">wiliam.s Blog</a>，谢谢，欢迎来访！</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> git </category>
            
        </categories>
        
        
        <tags>
            
            <tag> git </tag>
            
            <tag> gitignore </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[GC Roots]]></title>
      <url>http://wiliam.me/2017/09/30/20170930084712.html</url>
      <content type="html"><![CDATA[<blockquote>
<p>JVM判断对象是否可以回收采用的不是引用计数法，而是可达性分析算法，而通过什么能够判断对象是否可达呢，就是一系列称为GC Roots的对象。</p>
</blockquote>
<a id="more"></a>
<h1 id="可达性算法介绍"><a href="#可达性算法介绍" class="headerlink" title="可达性算法介绍"></a>可达性算法介绍</h1><p>算法基本思路就是通过一系列称为“GC Roots”的对象作为起始点，从这些节点开始向下搜索，搜索所走过的路径称为引用链，当一个对象到GC Roots没有任何引用链相连时，则证明此对象是不可用的。就是可以回收的。</p>
<h2 id="GC-Roots所包含的对象"><a href="#GC-Roots所包含的对象" class="headerlink" title="GC Roots所包含的对象"></a>GC Roots所包含的对象</h2><p>java中，可作为GC Roots的对象包括下面几种</p>
<ul>
<li>虚拟机栈（栈帧中的本地变量表）中引用的对象。</li>
<li>方法区中类静态属性引用的对象</li>
<li>方法区中常量引用的对象</li>
<li>本地方法中JNI（即一般说的Native方法）引用的对象。</li>
</ul>
<blockquote>
<p>想了解更多技术文章信息，请继续关注<a href="http://wiliam.me">wiliam.s Blog</a>，谢谢，欢迎来访！</p>
</blockquote>
<hr>
<p>参考资料<br>《深入理解Java虚拟机:JVM高级特性与最佳实践》·<font color="gray" size="2">周志明著</font>·<font color="gray" size="2">第二版</font></p>
]]></content>
      
        <categories>
            
            <category> houduan </category>
            
            <category> JVM </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JVM </tag>
            
            <tag> JAVA </tag>
            
            <tag> GC </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[常用函数时间复杂度收敛状况]]></title>
      <url>http://wiliam.me/2017/09/26/20170926081618.html</url>
      <content type="html"><![CDATA[<blockquote>
<p>总结了下常用函数的时间复杂度，作为收藏，以备不时之需。数据的每个操作都是有代价的，以时间复杂度和对应查询集或者结果集大小为衡量。</p>
</blockquote>
<h1 id="常用时间复杂度收敛状况"><a href="#常用时间复杂度收敛状况" class="headerlink" title="常用时间复杂度收敛状况"></a>常用时间复杂度收敛状况</h1><p><img src="http://imgcdn.yalongkeji.com/suanfa.png" alt="mark"></p>
]]></content>
      
        <categories>
            
            <category> houduan </category>
            
            <category> 算法 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[gitbook使用介绍]]></title>
      <url>http://wiliam.me/2017/09/01/20170901181618.html</url>
      <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>网上冲浪时无意间看到markdown可以写书了，使用的是gitbook-一个先进可定制的文档格式工具。写出的电子书非常好看，所以萌发了自己写一写的念头，俗话说工欲善其事必先利其器，了解gitbook如何使用就很重要了，所以整理了网上各家使用方法，自己又整合了一下。</p>
<h1 id="截图欣赏"><a href="#截图欣赏" class="headerlink" title="截图欣赏"></a>截图欣赏</h1><p><img src="http://imgcdn.yalongkeji.com/blog/20170901/182505740.png" alt="mark"></p>
<p><img src="http://imgcdn.yalongkeji.com/blog/20170901/182559088.jpg" alt="mark"></p>
<p><img src="http://imgcdn.yalongkeji.com/blog/20170901/182615069.jpg" alt="mark"></p>
<h1 id="书籍地址"><a href="#书籍地址" class="headerlink" title="书籍地址"></a>书籍地址</h1><p><a href="http://gitbook.wiliam.me/" target="_blank" rel="noopener">走你去看书</a></p>
]]></content>
      
        <categories>
            
            <category> tool </category>
            
            <category> gitbook </category>
            
        </categories>
        
        
        <tags>
            
            <tag> gitbook </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【转】Jquery插件开发教程]]></title>
      <url>http://wiliam.me/2017/07/03/20170703101403.html</url>
      <content type="html"><![CDATA[<blockquote>
<p>要说jQuery 最成功的地方，我认为是它的可扩展性吸引了众多开发者为其开发插件，从而建立起了一个生态系统。这好比大公司们争相做平台一样，得平台者得天下。苹果，微软，谷歌等巨头，都有各自的平台及生态圈</p>
</blockquote>
<blockquote>
<p>学会使用jQuery并不难，因为它简单易学，并且相信你接触jQuery后肯定也使用或熟悉了不少其插件。如果要将能力上升一个台阶，编写一个属于自己的插件是个不错的选择。</p>
</blockquote>
<blockquote>
<p>本教程可能不是最精品的，但一定是最细致的。</p>
</blockquote>
<a id="more"></a>
<h1 id="jQuery插件开发模式"><a href="#jQuery插件开发模式" class="headerlink" title="jQuery插件开发模式"></a>jQuery插件开发模式</h1><p>软件开发过程中是需要一定的设计模式来指导开发的，有了模式，我们就能更好地组织我们的代码，并且从这些前人总结出来的模式中学到很多好的实践。</p>
<p>根据《jQuery高级编程》的描述，jQuery插件开发方式主要有三种：</p>
<ol>
<li>通过$.extend()来扩展jQuery</li>
<li>通过$.fn 向jQuery添加新的方法</li>
<li>通过$.widget()应用jQuery UI的部件工厂方式创建</li>
</ol>
<p>通常我们使用第二种方法来进行简单插件开发，说简单是相对于第三种方式。第三种方式是用来开发更高级jQuery部件的，该模式开发出来的部件带有很多jQuery内建的特性，比如插件的状态信息自动保存，各种关于插件的常用方法等，非常贴心，这里不细说。</p>
<p>而第一种方式又太简单，仅仅是在jQuery命名空间或者理解成jQuery身上添加了一个静态方法而以。所以我们调用通过$.extend()添加的函数时直接通过$符号调用（$.myfunction()）而不需要选中DOM元素($(‘#example’).myfunction())。请看下面的例子。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$.extend(&#123;</span><br><span class="line">    sayHello: <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Hello,'</span> + (name ? name : <span class="string">'Dude'</span>) + <span class="string">'!'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">$.sayHello(); <span class="comment">//调用</span></span><br><span class="line">$.sayHello(<span class="string">'Wayou'</span>); <span class="comment">//带参调用</span></span><br></pre></td></tr></table></figure>
<p>运行结果：<br><img src="http://images.cnitblog.com/blog/431064/201402/281858071314921.png" alt="运行结果"></p>
<p>上面代码中，通过$.extend()向jQuery添加了一个sayHello函数，然后通过$直接调用。到此你可以认为我们已经完成了一个简单的jQuery插件了。</p>
<p>但如你所见，这种方式用来定义一些辅助方法是比较方便的。比如一个自定义的console，输出特定格式的信息，定义一次后可以通过jQuery在程序中任何需要的地方调用它。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$.extend(&#123;</span><br><span class="line">    log: <span class="function"><span class="keyword">function</span>(<span class="params">message</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>(),</span><br><span class="line">            y = now.getFullYear(),</span><br><span class="line">            m = now.getMonth() + <span class="number">1</span>, <span class="comment">//！JavaScript中月分是从0开始的</span></span><br><span class="line">            d = now.getDate(),</span><br><span class="line">            h = now.getHours(),</span><br><span class="line">            min = now.getMinutes(),</span><br><span class="line">            s = now.getSeconds(),</span><br><span class="line">            time = y + <span class="string">'/'</span> + m + <span class="string">'/'</span> + d + <span class="string">' '</span> + h + <span class="string">':'</span> + min + <span class="string">':'</span> + s;</span><br><span class="line">        <span class="built_in">console</span>.log(time + <span class="string">' My App: '</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">$.log(<span class="string">'initializing...'</span>); <span class="comment">//调用</span></span><br></pre></td></tr></table></figure>
<p><img src="http://images.cnitblog.com/i/431064/201402/282326361905458.png" alt="extend"></p>
<p>但这种方式无法利用jQuery强大的选择器带来的便利，要处理DOM元素以及将插件更好地运用于所选择的元素身上，还是需要使用第二种开发方式。你所见到或使用的插件也大多是通过此种方式开发。</p>
<hr>
<h1 id="插件开发"><a href="#插件开发" class="headerlink" title="插件开发"></a>插件开发</h1><p>下面我们就来看第二种方式的jQuery插件开发。</p>
<h1 id="基本方法"><a href="#基本方法" class="headerlink" title="基本方法"></a>基本方法</h1><p>先看一下它的基本格式：<br><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$.fn.pluginName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//your code goes here</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>基本上就是往$.fn上面添加一个方法，名字是我们的插件名称。然后我们的插件代码在这个方法里面展开。</p>
<p>比如我们将页面上所有链接颜色转成红色，则可以这样写这个插件：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$.fn.myPlugin = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//在这里面,this指的是用jQuery选中的元素</span></span><br><span class="line">    <span class="comment">//example :$('a'),则this=$('a')</span></span><br><span class="line">    <span class="keyword">this</span>.css(<span class="string">'color'</span>, <span class="string">'red'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在插件名字定义的这个函数内部，this指代的是我们在调用该插件时，用jQuery选择器选中的元素，一般是一个jQuery类型的集合。比如$(‘a’)返回的是页面上所有a标签的集合，且这个集合已经是jQuery包装类型了，也就是说，在对其进行操作的时候可以直接调用jQuery的其他方法而不需要再用美元符号来包装一下。</p>
<p>所以在上面插件代码中，我们在this身上调用jQuery的css()方法，也就相当于在调用 $(‘a’).css()。</p>
<p>理解this在这个地方的含义很重要。这样你才知道为什么可以直接商用jQuery方法同时在其他地方this指代不同时我们又需要用jQuery重新包装才能调用，下面会讲到。初学容易被this的值整晕，但理解了就不难。</p>
<p>现在就可以去页面试试我们的代码了，在页面上放几个链接，调用插件后链接字体变成红色。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.webo.com/liuwayong"</span>&gt;</span>我的微博<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://http://www.cnblogs.com/Wayou/"</span>&gt;</span>我的博客<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://wayouliu.duapp.com/"</span>&gt;</span>我的小站<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>这是p标签不是a标签，我不会受影响<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"jquery-1.11.0.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"jquery.myplugin.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">	$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">		$(<span class="string">'a'</span>).myPlugin();</span></span><br><span class="line">	&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>运行结果：<br><img src="http://images.cnitblog.com/blog/431064/201402/281858090417237.png" alt="result"><br>下面进一步，在插件代码里处理每个具体的元素，而不是对一个集合进行处理，这样我们就可以针对每个元素进行相应操作。</p>
<p>我们已经知道this指代jQuery选择器返回的集合，那么通过调用jQuery的.each()方法就可以处理合集中的每个元素了，但此刻要注意的是，在each方法内部，this指带的是普通的DOM元素了，如果需要调用jQuery的方法那就需要用$来重新包装一下。</p>
<p>比如现在我们要在每个链接显示链接的真实地址，首先通过each遍历所有a标签，然后获取href属性的值再加到链接文本后面。</p>
<p>更改后我们的插件代码为：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$.fn.myPlugin = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//在这里面,this指的是用jQuery选中的元素</span></span><br><span class="line">    <span class="keyword">this</span>.css(<span class="string">'color'</span>, <span class="string">'red'</span>);</span><br><span class="line">    <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//对每个元素进行操作</span></span><br><span class="line">        $(<span class="keyword">this</span>).append(<span class="string">' '</span> + $(<span class="keyword">this</span>).attr(<span class="string">'href'</span>));</span><br><span class="line">    &#125;))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>调用代码还是一样的，我们通过选中页面所有的a标签来调用这个插件</p>
<p>运行结果：</p>
<p><img src="http://images.cnitblog.com/blog/431064/201402/281858096414351.png" alt="result"></p>
<p>到此，你已经可以编写功能简单的jQuery插件了。是不是也没那么难。</p>
<p>下面开始jQuery插件编写中一个重要的部分，参数的接收。</p>
<h1 id="支持链式调用"><a href="#支持链式调用" class="headerlink" title="支持链式调用"></a>支持链式调用</h1><p>我们都知道jQuery一个时常优雅的特性是支持链式调用，选择好DOM元素后可以不断地调用其他方法。</p>
<p>要让插件不打破这种链式调用，只需return一下即可。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$.fn.myPlugin = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//在这里面,this指的是用jQuery选中的元素</span></span><br><span class="line">    <span class="keyword">this</span>.css(<span class="string">'color'</span>, <span class="string">'red'</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//对每个元素进行操作</span></span><br><span class="line">        $(<span class="keyword">this</span>).append(<span class="string">' '</span> + $(<span class="keyword">this</span>).attr(<span class="string">'href'</span>));</span><br><span class="line">    &#125;))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="让插件接收参数"><a href="#让插件接收参数" class="headerlink" title="让插件接收参数"></a>让插件接收参数</h1><p>一个强劲的插件是可以让使用者随意定制的，这要求我们提供在编写插件时就要考虑得全面些，尽量提供合适的参数。</p>
<p>比如现在我们不想让链接只变成红色，我们让插件的使用者自己定义显示什么颜色，要做到这一点很方便，只需要使用者在调用的时候传入一个参数即可。同时我们在插件的代码里面接收。另一方面，为了灵活，使用者可以不传递参数，插件里面会给出参数的默认值。</p>
<p>在处理插件参数的接收上，通常使用jQuery的extend方法，上面也提到过，但那是给extend方法传递单个对象的情况下，这个对象会合并到jQuery身上，所以我们就可以在jQuery身上调用新合并对象里包含的方法了，像上面的例子。当给extend方法传递一个以上的参数时，它会将所有参数对象合并到第一个里。同时，如果对象中有同名属性时，合并的时候后面的会覆盖前面的。</p>
<p>利用这一点，我们可以在插件里定义一个保存插件参数默认值的对象，同时将接收来的参数对象合并到默认对象上，最后就实现了用户指定了值的参数使用指定的值，未指定的参数使用插件默认值。</p>
<p>为了演示方便，再指定一个参数fontSize，允许调用插件的时候设置字体大小。</p>
<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$.fn.myPlugin = function(options) &#123;</span><br><span class="line">    var defaults = &#123;</span><br><span class="line">        <span class="string">'color'</span>: <span class="string">'red'</span>,</span><br><span class="line">        <span class="string">'fontSize'</span>: <span class="string">'12px'</span></span><br><span class="line">    &#125;;</span><br><span class="line">    var<span class="built_in"> settings </span>= $.extend(defaults, options);</span><br><span class="line">    return this.css(&#123;</span><br><span class="line">        <span class="string">'color'</span>: settings.color,</span><br><span class="line">        <span class="string">'fontSize'</span>: settings.fontSize</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>现在，我们调用的时候指定颜色，字体大小未指定，会运用插件里的默认值12px。</p>
<figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$('a').myPlugin(&#123;</span><br><span class="line">    'color': '#2C<span class="number">9929</span>'</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="http://images.cnitblog.com/blog/431064/201402/281858102422938.png" alt="结果1"></p>
<p>同时指定颜色与字体大小：</p>
<figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$('a').myPlugin(&#123;</span><br><span class="line">    'color': '#2C<span class="number">9929</span>',</span><br><span class="line">    'fontSize': '20px'</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p><img src="http://images.cnitblog.com/blog/431064/201402/281858108955539.png" alt="结果2"></p>
<h1 id="保护好默认参数"><a href="#保护好默认参数" class="headerlink" title="保护好默认参数"></a>保护好默认参数</h1><p>注意到上面代码调用extend时会将defaults的值改变，这样不好，因为它作为插件因有的一些东西应该维持原样，另外就是如果你在后续代码中还要使用这些默认值的话，当你再次访问它时它已经被用户传进来的参数更改了。<br><img src="http://images.cnitblog.com/blog/431064/201402/281858115012654.png" alt="结果3"></p>
<p>一个好的做法是将一个新的空对象做为$.extend的第一个参数，defaults和用户传递的参数对象紧随其后，这样做的好处是所有值被合并到这个空对象上，保护了插件里面的默认值。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$.fn.myPlugin = <span class="function"><span class="keyword">function</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> defaults = &#123;</span><br><span class="line">        <span class="string">'color'</span>: <span class="string">'red'</span>,</span><br><span class="line">        <span class="string">'fontSize'</span>: <span class="string">'12px'</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">var</span> settings = $.extend(&#123;&#125;,defaults, options);<span class="comment">//将一个空对象做为第一个参数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.css(&#123;</span><br><span class="line">        <span class="string">'color'</span>: settings.color,</span><br><span class="line">        <span class="string">'fontSize'</span>: settings.fontSize</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>到此，插件可以接收和处理参数后，就可以编写出更健壮而灵活的插件了。若要编写一个复杂的插件，代码量会很大，如何组织代码就成了一个需要面临的问题，没有一个好的方式来组织这些代码，整体感觉会杂乱无章，同时也不好维护，所以将插件的所有方法属性包装到一个对象上，用面向对象的思维来进行开发，无疑会使工作轻松很多。</p>
<h1 id="面向对象的插件开发"><a href="#面向对象的插件开发" class="headerlink" title="面向对象的插件开发"></a>面向对象的插件开发</h1><p>为什么要有面向对象的思维，因为如果不这样，你可能需要一个方法的时候就去定义一个function，当需要另外一个方法的时候，再去随便定义一个function，同样，需要一个变量的时候，毫无规则地定义一些散落在代码各处的变量。</p>
<p>还是老问题，不方便维护，也不够清晰。当然，这些问题在代码规模较小时是体现不出来的。</p>
<p>如果将需要的重要变量定义到对象的属性上，函数变成对象的方法，当我们需要的时候通过对象来获取，一来方便管理，二来不会影响外部命名空间，因为所有这些变量名还有方法名都是在对象内部。</p>
<p>接着上面的例子，我们可以把这个插件抽象成一个美化页面的对象，因为他的功能是设置颜色啊字体啊什么的，当然我们还可以加入其他功能比如设置下划线啊什么的。当然对于这个例子抽象成对象有点小题大做，这里仅作演示用。以后我可能会介绍我编写的一个jQuery插件SlipHover,其中代码就比较多，这样的模式就用得上了。</p>
<p>所以我们新建一个对象命名为Beautifier，然后我们在插件里使用这个对象来编码。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义Beautifier的构造函数</span></span><br><span class="line"><span class="keyword">var</span> Beautifier = <span class="function"><span class="keyword">function</span>(<span class="params">ele, opt</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.$element = ele,</span><br><span class="line">    <span class="keyword">this</span>.defaults = &#123;</span><br><span class="line">        <span class="string">'color'</span>: <span class="string">'red'</span>,</span><br><span class="line">        <span class="string">'fontSize'</span>: <span class="string">'12px'</span>,</span><br><span class="line">        <span class="string">'textDecoration'</span>:<span class="string">'none'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">this</span>.options = $.extend(&#123;&#125;, <span class="keyword">this</span>.defaults, opt)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义Beautifier的方法</span></span><br><span class="line">Beautifier.prototype = &#123;</span><br><span class="line">    beautify: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.$element.css(&#123;</span><br><span class="line">            <span class="string">'color'</span>: <span class="keyword">this</span>.options.color,</span><br><span class="line">            <span class="string">'fontSize'</span>: <span class="keyword">this</span>.options.fontSize,</span><br><span class="line">            <span class="string">'textDecoration'</span>: <span class="keyword">this</span>.options.textDecoration</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//在插件中使用Beautifier对象</span></span><br><span class="line">$.fn.myPlugin = <span class="function"><span class="keyword">function</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//创建Beautifier的实体</span></span><br><span class="line">    <span class="keyword">var</span> beautifier = <span class="keyword">new</span> Beautifier(<span class="keyword">this</span>, options);</span><br><span class="line">    <span class="comment">//调用其方法</span></span><br><span class="line">    <span class="keyword">return</span> beautifier.beautify();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过上面这样一改造，我们的代码变得更面向对象了，也更好维护和理解，以后要加新功能新方法，只需向对象添加新变量及方法即可，然后在插件里实例化后即可调用新添加的东西。</p>
<p>插件的调用还是一样的，我们对代码的改动并不影响插件其他地方，只是将代码的组织结构改动了而以。</p>
<figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">'a'</span>).myPlugin(&#123;</span><br><span class="line">        <span class="string">'color'</span>: <span class="string">'#2C9929'</span>,</span><br><span class="line">        <span class="string">'fontSize'</span>: <span class="string">'20px'</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p><img src="http://images.cnitblog.com/blog/431064/201402/281858120772997.png" alt="结果4"></p>
<p>指定文字带下划线（我们在Beautifier对象中新加的功能，默认不带下划线，如上面的例子）的调用：</p>
<figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">'a'</span>).myPlugin(&#123;</span><br><span class="line">        <span class="string">'color'</span>: <span class="string">'#2C9929'</span>,</span><br><span class="line">        <span class="string">'fontSize'</span>: <span class="string">'20px'</span>,</span><br><span class="line">        <span class="string">'textDecoration'</span>: <span class="string">'underline'</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p><img src="http://images.cnitblog.com/blog/431064/201402/281858125256069.png" alt="结果5"></p>
<p>到这里，你可以更好地编写复杂的插件同时很好地组织代码了。当我们回头去看上面的代码时，其实也还是有改进空间的。也就是下面介绍的关于命名空间及变量各什么的，一些杂项。</p>
<h1 id="关于命名空间"><a href="#关于命名空间" class="headerlink" title="关于命名空间"></a>关于命名空间</h1><p>不仅仅是jQuery插件的开发，我们在写任何JS代码时都应该注意的一点是不要污染全局命名空间。因为随着你代码的增多，如果有意无意在全局范围内定义一些变量的话，最后很难维护，也容易跟别人写的代码有冲突。</p>
<p>比如你在代码中向全局window对象添加了一个变量status用于存放状态，同时页面中引用了另一个别人写的库，也向全局添加了这样一个同名变量，最后的结果肯定不是你想要的。所以不到万不得已，一般我们不会将变量定义成全局的。</p>
<p>一个好的做法是始终用自调用匿名函数包裹你的代码，这样就可以完全放心，安全地将它用于任何地方了，绝对没有冲突。</p>
<h2 id="用自调用匿名函数包裹你的代码"><a href="#用自调用匿名函数包裹你的代码" class="headerlink" title="用自调用匿名函数包裹你的代码"></a>用自调用匿名函数包裹你的代码</h2><p>我们知道JavaScript中无法用花括号方便地创建作用域，但函数却可以形成一个作用域，域内的代码是无法被外界访问的。如果我们将自己的代码放入一个函数中，那么就不会污染全局命名空间，同时不会和别的代码冲突。</p>
<p>如上面我们定义了一个Beautifier全局变量，它会被附到全局的window对象上，为了防止这种事情发生，你或许会说，把所有代码放到jQuery的插件定义代码里面去啊，也就是放到$.fn.myPlugin里面。这样做倒也是种选择。但会让我们实际跟插件定义有关的代码变得臃肿，而在$.fn.myPlugin里面我们其实应该更专注于插件的调用，以及如何与jQuery互动。</p>
<p>所以保持原来的代码不变，我们将所有代码用自调用匿名函数包裹。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//定义Beautifier的构造函数</span></span><br><span class="line">    <span class="keyword">var</span> Beautifier = <span class="function"><span class="keyword">function</span>(<span class="params">ele, opt</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.$element = ele,</span><br><span class="line">        <span class="keyword">this</span>.defaults = &#123;</span><br><span class="line">            <span class="string">'color'</span>: <span class="string">'red'</span>,</span><br><span class="line">            <span class="string">'fontSize'</span>: <span class="string">'12px'</span>,</span><br><span class="line">            <span class="string">'textDecoration'</span>: <span class="string">'none'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="keyword">this</span>.options = $.extend(&#123;&#125;, <span class="keyword">this</span>.defaults, opt)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//定义Beautifier的方法</span></span><br><span class="line">    Beautifier.prototype = &#123;</span><br><span class="line">        beautify: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.$element.css(&#123;</span><br><span class="line">                <span class="string">'color'</span>: <span class="keyword">this</span>.options.color,</span><br><span class="line">                <span class="string">'fontSize'</span>: <span class="keyword">this</span>.options.fontSize,</span><br><span class="line">                <span class="string">'textDecoration'</span>: <span class="keyword">this</span>.options.textDecoration</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//在插件中使用Beautifier对象</span></span><br><span class="line">    $.fn.myPlugin = <span class="function"><span class="keyword">function</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//创建Beautifier的实体</span></span><br><span class="line">        <span class="keyword">var</span> beautifier = <span class="keyword">new</span> Beautifier(<span class="keyword">this</span>, options);</span><br><span class="line">        <span class="comment">//调用其方法</span></span><br><span class="line">        <span class="keyword">return</span> beautifier.beautify();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>
<p>这样做的好处，也就是上面所阐述的那样。另外还有一个好处就是，自调用匿名函数里面的代码会在第一时间执行，页面准备好过后，上面的代码就将插件准备好了，以方便在后面的代码中使用插件。</p>
<p>目前为止似乎接近完美了。如果再考虑到其他一些因素，比如我们将这段代码放到页面后，前面别人写的代码没有用分号结尾，或者前面的代码将window, undefined等这些系统变量或者关键字修改掉了，正好我们又在自己的代码里面进行了使用，那结果也是不可预测的，这不是 我们想要的。我知道其实你还没太明白，下面详细介绍。</p>
<h2 id="将系统变量以变量形式传递到插件内部"><a href="#将系统变量以变量形式传递到插件内部" class="headerlink" title="将系统变量以变量形式传递到插件内部"></a>将系统变量以变量形式传递到插件内部</h2><p>来看下面的代码，你猜他会出现什么结果？</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo=<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//别人的代码</span></span><br><span class="line">&#125;<span class="comment">//注意这里没有用分号结尾</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//开始我们的代码。。。</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//我们的代码。。</span></span><br><span class="line">    alert(<span class="string">'Hello!'</span>);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>
<p>本来别人的代码也正常工作，只是最后定义的那个函数没有用分号结尾而以，然后当页面中引入我们的插件时，报错了，我们的代码无法正常执行。</p>
<p><img src="http://images.cnitblog.com/blog/431064/201402/281858132263684.png" alt="结果2"></p>
<p>原因是我们用来充当自调用匿名函数的第一对括号与上面别人定义的函数相连，因为中间没有分号嘛，总之我们的代码无法正常解析了，所以报错。</p>
<p>所以好的做法是我们在代码开头加一个分号，这在任何时候都是一个好的习惯。</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo=<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//别人的代码</span></span><br><span class="line">&#125;<span class="comment">//注意这里没有用分号结尾</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//开始我们的代码。。。</span></span><br><span class="line">;(<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//我们的代码。。</span></span><br><span class="line">    alert(<span class="string">'Hello!'</span>);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>
<p>同时，将系统变量以参数形式传递到插件内部也是个不错的实践。</p>
<p>当我们这样做之后，window等系统变量在插件内部就有了一个局部的引用，可以提高访问速度，会有些许性能的提升</p>
<p>最后我们得到一个非常安全结构良好的代码：<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">;(<span class="function"><span class="keyword">function</span>(<span class="params">$,<span class="built_in">window</span>,<span class="built_in">document</span>,<span class="literal">undefined</span></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//我们的代码。。</span></span><br><span class="line">    <span class="comment">//blah blah blah...</span></span><br><span class="line">&#125;)(jQuery,<span class="built_in">window</span>,<span class="built_in">document</span>);</span><br></pre></td></tr></table></figure></p>
<p>而至于这个undefined，稍微有意思一点，为了得到没有被修改的undefined，我们并没有传递这个参数，但却在接收时接收了它，因为实际并没有传，所以‘undefined’那个位置接收到的就是真实的’undefined’了。是不是有点hack的味道，值得细细体会的技术，当然不是我发明的，都是从前人的经验中学习。</p>
<p>所以最后我们的插件成了这样：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">;(<span class="function"><span class="keyword">function</span>(<span class="params">$, window, document,undefined</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//定义Beautifier的构造函数</span></span><br><span class="line">    <span class="keyword">var</span> Beautifier = <span class="function"><span class="keyword">function</span>(<span class="params">ele, opt</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.$element = ele,</span><br><span class="line">        <span class="keyword">this</span>.defaults = &#123;</span><br><span class="line">            <span class="string">'color'</span>: <span class="string">'red'</span>,</span><br><span class="line">            <span class="string">'fontSize'</span>: <span class="string">'12px'</span>,</span><br><span class="line">            <span class="string">'textDecoration'</span>: <span class="string">'none'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="keyword">this</span>.options = $.extend(&#123;&#125;, <span class="keyword">this</span>.defaults, opt)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//定义Beautifier的方法</span></span><br><span class="line">    Beautifier.prototype = &#123;</span><br><span class="line">        beautify: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.$element.css(&#123;</span><br><span class="line">                <span class="string">'color'</span>: <span class="keyword">this</span>.options.color,</span><br><span class="line">                <span class="string">'fontSize'</span>: <span class="keyword">this</span>.options.fontSize,</span><br><span class="line">                <span class="string">'textDecoration'</span>: <span class="keyword">this</span>.options.textDecoration</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//在插件中使用Beautifier对象</span></span><br><span class="line">    $.fn.myPlugin = <span class="function"><span class="keyword">function</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//创建Beautifier的实体</span></span><br><span class="line">        <span class="keyword">var</span> beautifier = <span class="keyword">new</span> Beautifier(<span class="keyword">this</span>, options);</span><br><span class="line">        <span class="comment">//调用其方法</span></span><br><span class="line">        <span class="keyword">return</span> beautifier.beautify();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)(jQuery, <span class="built_in">window</span>, <span class="built_in">document</span>);</span><br></pre></td></tr></table></figure>
<p>一个安全，结构良好，组织有序的插件编写完成。</p>
<h1 id="关于变量定义及命名"><a href="#关于变量定义及命名" class="headerlink" title="关于变量定义及命名"></a>关于变量定义及命名</h1><p>现在谈谈关于变量及方法等的命名，没有硬性规定，但为了规范，遵循一些约定还是很有必要的。</p>
<p><strong>变量定义：</strong>好的做法是把将要使用的变量名用一个var关键字一并定义在代码开头，变量名间用逗号隔开。原因有二：</p>
<ul>
<li>一是便于理解，知道下面的代码会用到哪些变量，同时代码显得整洁且有规律，也方便管理，变量定义与逻辑代码分开；</li>
<li>二是因为JavaScript中所有变量及函数名会自动提升，也称之为JavaScript的Hoist特性，即使你将变量的定义穿插在逻辑代码中，在代码解析运行期间，这些变量的声明还是被提升到了当前作用域最顶端的，所以我们将变量定义在一个作用域的开头是更符合逻辑的一种做法。当然，再次说明这只是一种约定，不是必需的。</li>
</ul>
<p><strong>变量及函数命名</strong> 一般使用驼峰命名法（CamelCase），即首个单词的首字母小写，后面单词首字母大写，比如resultArray，requestAnimationFrame。对于常量，所有字母采用大写，多个单词用下划线隔开，比如WIDTH=100，BRUSH_COLOR=’#00ff00’。当变量是jQuery类型时，建议以$开头，开始会不习惯，但经常用了之后会感觉很方便，因为可以很方便地将它与普通变量区别开来，一看到以$开头我们就知道它是jQuery类型可以直接在其身上调用jQuery相关的方法，比如var $element=$(‘a’); 之后就可以在后面的代码中很方便地使用它，并且与其他变量容易区分开来。</p>
<p><strong>引号的使用：</strong>既然都扯了这些与插件主题无关的了，这里再多说一句，一般HTML代码里面使用双引号，而在JavaScript中多用单引号，比如下面代码所示：<br><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="keyword">name</span> = <span class="string">'Wayou'</span>;</span><br><span class="line">document.getElementById(‘example’).innerHTML = <span class="string">'&lt; a href="http: //wayouliu.duapp.com/"&gt;'</span>+<span class="keyword">name</span>+<span class="string">'&lt;/a&gt;'</span>; <span class="comment">//href=".." HTML中保持双引号，JavaScript中保持单引号</span></span><br></pre></td></tr></table></figure></p>
<p>一方面，HTML代码中本来就使用的是双引号，另一方面，在JavaScript中引号中还需要引号的时候，要求我们单双引号间隔着写才是合法的语句，除非你使用转意符那也是可以的。再者，坚持这样的统一可以保持代码风格的一致，不会出现这里字符串用双引号包着，另外的地方就在用单引号。</p>
<p> <a href="http://www.cnblogs.com/Wayou/p/jquery_plugin_tutorial.html" target="_blank" rel="noopener">原文出处</a></p>
<blockquote>
<p>想了解更多技术文章信息，请继续关注<a href="http://wiliam.me">wiliam.s Blog</a>，谢谢，欢迎来访！</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> qianduan </category>
            
            <category> jquery </category>
            
        </categories>
        
        
        <tags>
            
            <tag> jquery </tag>
            
            <tag> 插件 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[深入理解javascript原型和闭包电子书]]></title>
      <url>http://wiliam.me/2017/04/23/20170423114940.html</url>
      <content type="html"><![CDATA[<blockquote>
<p>最近在写前端的代码，顺便就再学习巩固下JavaScript，在网上看见了对JavaScript的原型和闭包讲解的很透彻的博客。自己就摘过来做成了电子书，分享出来，供大家学习参考。</p>
</blockquote>
<h1 id="书籍说明"><a href="#书籍说明" class="headerlink" title="书籍说明"></a>书籍说明</h1><p>本书是对<a href="http://www.cnblogs.com/wangfupeng1988/p/3977924.html" target="_blank" rel="noopener">深入理解javascript原型和闭包</a>系列博客的整理，该博客的作者是<strong>王福朋</strong>,在此感谢王老师。整理人：<a href="http://wiliam.top" target="_blank" rel="noopener">wiliam</a></p>
<h1 id="为什么会整理成电子书"><a href="#为什么会整理成电子书" class="headerlink" title="为什么会整理成电子书"></a>为什么会整理成电子书</h1><p>之前学习JavaScript就对原型和闭包的概念不是很理解，总是晕乎乎的，无意间看到了王老师写的<a href="http://www.cnblogs.com/wangfupeng1988/p/3977924.html" target="_blank" rel="noopener">深入理解javascript原型和闭包</a>教程，有醍醐灌顶之感，<strong>王老师</strong>讲的很透彻，所以有想要将这系列收藏做成自己的知识储备，以后可以随时随地的巩固消化。最后整理出来了本电子书，在此分享出来，也希望大家看后对javascript原型和闭包的概念有所收获。最后再次感谢<strong>王老师</strong>。</p>
<h1 id="书籍地址："><a href="#书籍地址：" class="headerlink" title="书籍地址："></a>书籍地址：</h1><p><a href="http://jsprototype.wiliam.me" target="_blank" rel="noopener">博客阅读地址</a><br><a href="https://wiliam2015.gitbooks.io/jsprototype" target="_blank" rel="noopener">gitbook地址</a></p>
<blockquote>
<p>想了解更多技术文章信息，请继续关注<a href="http://wiliam.me">wiliam.s Blog</a>，谢谢，欢迎来访！</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> qianduan </category>
            
            <category> javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Spring的AOP实现源码分析]]></title>
      <url>http://wiliam.me/2017/04/02/20170402114321.html</url>
      <content type="html"><![CDATA[<blockquote>
<p>我们经常使用spring的aop功能，比如声明性事务，日志打印等。但其原理是什么呢，接下来我们就详细分析spring的AOP实现原理。<br><a id="more"></a></p>
</blockquote>
<p>使用Spring的AOP功能我们需要开启才能使用，Spring给我们提供了自定义标签启用AOP的功能。AOP常用的两个标签<code>&lt;aop:aspectj-autoproxy /&gt;</code>使用注解启用AOP功能，<code>&lt;aop:config&gt;</code>使用xml配置启用AOP功能。我们分析AOP的实现也是从这两个标签开始。</p>
<h1 id="1-自定义标签解析源码分析"><a href="#1-自定义标签解析源码分析" class="headerlink" title="1.自定义标签解析源码分析"></a>1.自定义标签解析源码分析</h1><p>默认的bean标签，我们通过class属性就知道注册了哪些类。自定义标签是不知道的，所以需要看源码。我们看自定义标签的解析，说白了也就是看Spring给我们默认注入了哪些bean类。<br>aop标签解析的整个类是<code>org.springframework.aop.config. AopNamespaceHandler</code>。</p>
<h2 id="1-1-lt-aop-aspectj-autoproxy-gt-标签解析"><a href="#1-1-lt-aop-aspectj-autoproxy-gt-标签解析" class="headerlink" title="1.1 &lt;aop:aspectj-autoproxy/&gt;标签解析"></a>1.1 &lt;aop:aspectj-autoproxy/&gt;标签解析</h2><p>从<code>AopNamespaceHandler</code>类的init方法中知道<a href="aop:aspectj-autoproxy/" target="_blank" rel="noopener">aop:aspectj-autoproxy/</a>标签解析使用的是<code>AspectJAutoProxyBeanDefinitionParser</code>类，从<code>AspectJAutoProxyBeanDefinitionParser</code>类的init方法中我们看到注册<code>AnnotationAwareAspectJAutoProxyCreator</code>代理类。</p>
<h2 id="1-2-lt-aop-config-gt-标签解析"><a href="#1-2-lt-aop-config-gt-标签解析" class="headerlink" title="1.2 &lt; aop:config &gt;标签解析"></a>1.2 &lt; aop:config &gt;标签解析</h2><p>从<code>AopNamespaceHandler</code>类的init方法中知道config标签的解析使用<code>ConfigBeanDefinitionParser</code>类<br>进入此类的parse方法。在parse方法中开头注册了<code>AspectJAwareAdvisorAutoProxyCreator</code>代理，接着会对<a href="aop:config" target="_blank" rel="noopener">aop:config</a>下的三个子标签分别解析，三个子标签是<code>&lt;aop:pointcut&gt;</code>,<code>&lt;aop:advisor&gt;</code>,<code>&lt;aop:aspect&gt;</code>。</p>
<h3 id="1-2-1-lt-aop-pointcut-gt-子标签解析"><a href="#1-2-1-lt-aop-pointcut-gt-子标签解析" class="headerlink" title="1.2.1 &lt;aop:pointcut &gt;子标签解析"></a>1.2.1 &lt;aop:pointcut &gt;子标签解析</h3><p>注册<code>AspectJExpressionPointcut</code>类，scope是prototype</p>
<h3 id="1-2-2-lt-aop-advisor-gt-子标签解析"><a href="#1-2-2-lt-aop-advisor-gt-子标签解析" class="headerlink" title="1.2.2 &lt;aop:advisor &gt;子标签解析"></a>1.2.2 &lt;aop:advisor &gt;子标签解析</h3><p>解析此标签时注册了以下bean：<br><code>DefaultBeanFactoryPointcutAdvisor</code><br><code>AspectJExpressionPointcut</code>，scope是prototype</p>
<h3 id="1-2-3-lt-aop-aspect-gt-子标签解析"><a href="#1-2-3-lt-aop-aspect-gt-子标签解析" class="headerlink" title="1.2.3 &lt;aop:aspect &gt;子标签解析"></a>1.2.3 &lt;aop:aspect &gt;子标签解析</h3><p>此标签如果下面存在<a href="aop:pointcut" target="_blank" rel="noopener">aop:pointcut</a>子标签会调用解析<a href="aop:pointcut" target="_blank" rel="noopener">aop:pointcut</a>代码去解析。<br>其余会注册<code>MethodLocatingFactoryBean</code>,<code>SimpleBeanFactoryAwareAspectInstanceFactory</code>和<code>AspectJPointcutAdvisor</code>类还会针对before，after，around，after-returning,after-throwing标签增加不同的bean，如下：<br><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="module-access"><span class="module"><span class="identifier">BEFORE</span>.</span></span>equals(elementName)) &#123;</span><br><span class="line">            return <span class="module-access"><span class="module"><span class="identifier">AspectJMethodBeforeAdvice</span>.</span></span><span class="keyword">class</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="module-access"><span class="module"><span class="identifier">AFTER</span>.</span></span>equals(elementName)) &#123;</span><br><span class="line">            return <span class="module-access"><span class="module"><span class="identifier">AspectJAfterAdvice</span>.</span></span><span class="keyword">class</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="module-access"><span class="module"><span class="identifier">AFTER_RETURNING_ELEMENT</span>.</span></span>equals(elementName)) &#123;</span><br><span class="line">            return <span class="module-access"><span class="module"><span class="identifier">AspectJAfterReturningAdvice</span>.</span></span><span class="keyword">class</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="module-access"><span class="module"><span class="identifier">AFTER_THROWING_ELEMENT</span>.</span></span>equals(elementName)) &#123;</span><br><span class="line">            return <span class="module-access"><span class="module"><span class="identifier">AspectJAfterThrowingAdvice</span>.</span></span><span class="keyword">class</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="module-access"><span class="module"><span class="identifier">AROUND</span>.</span></span>equals(elementName)) &#123;</span><br><span class="line">            return <span class="module-access"><span class="module"><span class="identifier">AspectJAroundAdvice</span>.</span></span><span class="keyword">class</span>;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="2-使用分析"><a href="#2-使用分析" class="headerlink" title="2.使用分析"></a>2.使用分析</h1><h2 id="2-1-lt-aop-aspectj-autoproxy-gt-使用分析"><a href="#2-1-lt-aop-aspectj-autoproxy-gt-使用分析" class="headerlink" title="2.1 &lt;aop:aspectj-autoproxy/&gt;使用分析"></a>2.1 &lt;aop:aspectj-autoproxy/&gt;使用分析</h2><p>我们在spring配置文件中加入<a href="aop:aspectj-autoproxy/" target="_blank" rel="noopener">aop:aspectj-autoproxy/</a>这个标签后，就可以在类中使用aop注解了，但背后的原理是什么呢。从1.1<a href="aop:aspectj-autoproxy/" target="_blank" rel="noopener">aop:aspectj-autoproxy/</a>标签解析 中我们知道解析此标签时注册了<code>AnnotationAwareAspectJAutoProxyCreator</code>的bean，那么分析aop注解的使用也是从此类开始。<br><code>AnnotationAwareAspectJAutoProxyCreator</code>的继承关系如下：<br><img src="http://imgcdn.yalongkeji.com/blog/20170402/114909576.png" alt="springaop"></p>
<p> 可以看到实现了<code>BeanPostProcessor</code>接口，<code>BeanPostProcessor</code>接口是spring的重要接口<code>BeanPostProcessor</code>源码如下。<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> interface BeanPostProcessor &#123;</span><br><span class="line">        <span class="comment">//初始化前调用</span></span><br><span class="line">	<span class="keyword">Object</span> postProcessBeforeInitialization(<span class="keyword">Object</span> bean, <span class="keyword">String</span> beanName) <span class="keyword">throws</span> BeansException;</span><br><span class="line">        <span class="comment">//初始化后调用</span></span><br><span class="line">	<span class="keyword">Object</span> postProcessAfterInitialization(<span class="keyword">Object</span> bean, <span class="keyword">String</span> beanName) <span class="keyword">throws</span> BeansException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>当我们使用ApplicationContext相关实现类的上下文时，spring会保证前者在实例化及依赖注入完成后，在任何初始化代码（比如配置文件中的init-method）调用之前调用；后者在初始化代码调用之后调用。</p>
<p><code>InstantiationAwareBeanPostProcessor</code>是<code>BeanPostProcessor</code>的子接口，可以在Bean生命周期的另外两个时期提供扩展的回调接口，即实例化Bean之前（调用<code>postProcessBeforeInstantiation</code>方法）和实例化Bean之后（调用<code>postProcessAfterInstantiation</code>方法），该接口定义如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">InstantiationAwareBeanPostProcessor</span> <span class="keyword">extends</span> <span class="title">BeanPostProcessor</span> </span>&#123;</span><br><span class="line">	<span class="comment">//实例化前调用</span></span><br><span class="line">	<span class="function">Object <span class="title">postProcessBeforeInstantiation</span><span class="params">(Class&lt;?&gt; beanClass, String beanName)</span> <span class="keyword">throws</span> BeansException</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//实例化后调用</span></span><br><span class="line">	<span class="function"><span class="keyword">boolean</span> <span class="title">postProcessAfterInstantiation</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//装配属性时调用</span></span><br><span class="line">	<span class="function">PropertyValues <span class="title">postProcessPropertyValues</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">			PropertyValues pvs, PropertyDescriptor[] pds, Object bean, String beanName)</span></span></span><br><span class="line"><span class="function">			<span class="keyword">throws</span> BeansException</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>我们分析也是从这些接口的实现方法入手<br>BeanPostProcessor .postProcessBeforeInitialization空实现<br>BeanPostProcessor .postProcessAfterInitialization方法实现如下：<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Create a proxy with the configured interceptors if the bean is</span></span><br><span class="line"><span class="comment"> * identified as one to proxy by the subclass.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #getAdvicesAndAdvisorsForBean</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException &#123;</span><br><span class="line">	<span class="keyword">if</span> (bean != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">//根据给定的bean的class和name构建出个key，格式beanClassName_beanName</span></span><br><span class="line">		Object cacheKey = getCacheKey(bean.getClass(), beanName);</span><br><span class="line">            <span class="comment">//如果适合被代理，则需要封装指定的bean</span></span><br><span class="line">		<span class="keyword">if</span> (!<span class="keyword">this</span>.earlyProxyReferences.containsKey(cacheKey)) &#123;</span><br><span class="line">			<span class="keyword">return</span> wrapIfNecessary(bean, beanName, cacheKey);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> bean;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Wrap the given bean if necessary, i.e. if it is eligible for being proxied.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> bean the raw bean instance</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> beanName the name of the bean</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> cacheKey the cache key for metadata access</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> a proxy wrapping the bean, or the raw bean instance as-is</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">protected</span> Object wrapIfNecessary(Object bean, String beanName, Object cacheKey) &#123;</span><br><span class="line">	<span class="comment">//如果bean已经被处理过</span></span><br><span class="line">	<span class="keyword">if</span> (beanName != <span class="literal">null</span> &amp;&amp; <span class="keyword">this</span>.targetSourcedBeans.containsKey(beanName)) &#123;</span><br><span class="line">		<span class="keyword">return</span> bean;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//如果bean无需增强</span></span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">Boolean</span>.FALSE.equals(<span class="keyword">this</span>.advisedBeans.<span class="keyword">get</span>(cacheKey))) &#123;</span><br><span class="line">		<span class="keyword">return</span> bean;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//如果bean类是一个基础设施类，基础设施类不应该代理，或者配置了指定bean不需要自动代理</span></span><br><span class="line">	<span class="comment">//如果bean是Advice,Advisor和AopInfrastructureBean的实例代表是基础设置类</span></span><br><span class="line">	<span class="keyword">if</span> (isInfrastructureClass(bean.getClass()) || shouldSkip(bean.getClass(), beanName)) &#123;</span><br><span class="line">		<span class="keyword">this</span>.advisedBeans.put(cacheKey, <span class="built_in">Boolean</span>.FALSE);</span><br><span class="line">		<span class="keyword">return</span> bean;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 如果存在增强方法则创建代理</span></span><br><span class="line">	Object[] specificInterceptors = getAdvicesAndAdvisorsForBean(bean.getClass(), beanName, <span class="literal">null</span>);</span><br><span class="line">	<span class="comment">//如果获取到了增强则需要针对增强创建代理</span></span><br><span class="line">	<span class="keyword">if</span> (specificInterceptors != DO_NOT_PROXY) &#123;</span><br><span class="line">		<span class="comment">//将创建的代理bean放到advisedBeans中，用于前面的判断</span></span><br><span class="line">		<span class="keyword">this</span>.advisedBeans.put(cacheKey, <span class="built_in">Boolean</span>.TRUE);</span><br><span class="line">		<span class="comment">//创建代理</span></span><br><span class="line">		Object proxy = createProxy(bean.getClass(), beanName, specificInterceptors, new SingletonTargetSource(bean));</span><br><span class="line">		<span class="keyword">this</span>.proxyTypes.put(cacheKey, proxy.getClass());</span><br><span class="line">		<span class="keyword">return</span> proxy;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//将创建的代理bean放到advisedBeans中，用于前面的判断</span></span><br><span class="line">	<span class="keyword">this</span>.advisedBeans.put(cacheKey, <span class="built_in">Boolean</span>.FALSE);</span><br><span class="line">	<span class="keyword">return</span> bean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>可以看到Spring代码的精巧，先构建出骨架然后在逐步完善，在函数中我们可以看到代理创建的雏形。当然在正式开始之前需要经过一些判断，比如是否已经处理过或者是否需要跳过的bean。Spring真正开始创建代理是从<code>Object[] specificInterceptors = getAdvicesAndAdvisorsForBean(bean.getClass(), beanName, null);</code>代码及以下开始的。</p>
<p>创建代理主要包含了两个步骤：</p>
<ol>
<li>获取增强方法或者增强器</li>
<li>根据获取的增强进行代理<br>下面逐步分析</li>
</ol>
<h3 id="2-1-1获取增强方法或者增强器"><a href="#2-1-1获取增强方法或者增强器" class="headerlink" title="2.1.1获取增强方法或者增强器"></a>2.1.1获取增强方法或者增强器</h3><p>AbstractAdvisorAutoProxyCreator.java类对getAdvicesAndAdvisorsForBean方法重写，代码如下：<br><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">protected Object<span class="literal">[]</span> get<span class="constructor">AdvicesAndAdvisorsForBean(Class <span class="params">beanClass</span>, String <span class="params">beanName</span>, TargetSource <span class="params">targetSource</span>)</span> &#123;</span><br><span class="line">                <span class="comment">//查找合适的增强</span></span><br><span class="line">		List advisors = find<span class="constructor">EligibleAdvisors(<span class="params">beanClass</span>, <span class="params">beanName</span>)</span>;</span><br><span class="line">		<span class="keyword">if</span> (advisors.is<span class="constructor">Empty()</span>) &#123;</span><br><span class="line">			return DO_NOT_PROXY;</span><br><span class="line">		&#125;</span><br><span class="line">		return advisors.<span class="keyword">to</span><span class="constructor">Array()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Find all eligible Advisors for auto-proxying this class.</span></span><br><span class="line"><span class="comment"> * @param beanClass the clazz to find advisors for</span></span><br><span class="line"><span class="comment"> * @param beanName the name of the currently proxied bean</span></span><br><span class="line"><span class="comment"> * @return the empty List, not &#123;@code null&#125;,</span></span><br><span class="line"><span class="comment"> * if there are no pointcuts or interceptors</span></span><br><span class="line"><span class="comment"> * @see #findCandidateAdvisors</span></span><br><span class="line"><span class="comment"> * @see #sortAdvisors</span></span><br><span class="line"><span class="comment"> * @see #extendAdvisors</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">protected List&lt;Advisor&gt; find<span class="constructor">EligibleAdvisors(Class <span class="params">beanClass</span>, String <span class="params">beanName</span>)</span> &#123;</span><br><span class="line">	List&lt;Advisor&gt; candidateAdvisors = find<span class="constructor">CandidateAdvisors()</span>;</span><br><span class="line">	List&lt;Advisor&gt; eligibleAdvisors = find<span class="constructor">AdvisorsThatCanApply(<span class="params">candidateAdvisors</span>, <span class="params">beanClass</span>, <span class="params">beanName</span>)</span>;</span><br><span class="line">	extend<span class="constructor">Advisors(<span class="params">eligibleAdvisors</span>)</span>;</span><br><span class="line">	<span class="keyword">if</span> (!eligibleAdvisors.is<span class="constructor">Empty()</span>) &#123;</span><br><span class="line">		eligibleAdvisors = sort<span class="constructor">Advisors(<span class="params">eligibleAdvisors</span>)</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	return eligibleAdvisors;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这里说下Spring中的Advisor。Advisor充当Advice和Pointcut的适配器。包括Pointcut和Advice，是将Advice注入程序中Pointcut位置的代码。<br>我们可以看到Spring又是层层构建，清晰的描绘了aop的实现逻辑<code>findEligibleAdvisors</code>方法中做了两件事:</p>
<ol>
<li>获取所有的增强。</li>
<li>找到所有增强中适用于bean的增强并应用。如果找不到变会返回空了。</li>
</ol>
<p>由于我们分析的是使用注解进行的aop，即最终的代理处理类是<code>AnnotationAwareAspectJAutoProxyCreator</code>，此类中重写了<code>findCandidateAdvisors</code>方法，此方法如下：<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> List&lt;Advisor&gt; findCandidateAdvisors() &#123;</span><br><span class="line">	<span class="comment">//获取父类中加载配置文件中的aop声明，使用注解配置aop并不是丢弃了对xml配置的支持。</span></span><br><span class="line">	List&lt;Advisor&gt; advisors = <span class="keyword">super</span>.findCandidateAdvisors();</span><br><span class="line">	<span class="comment">// Build Advisors for all AspectJ aspects in the bean factory.</span></span><br><span class="line">	advisors.addAll(<span class="keyword">this</span>.aspectJAdvisorsBuilder.buildAspectJAdvisors());</span><br><span class="line">	<span class="keyword">return</span> advisors;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>调用父类中的方法<code>super.findCandidateAdvisors()</code>主要是从配置文件中查找所有实现了<code>Advisor</code>接口的bean，这里就不在分析，代码逻辑很清晰，感兴趣的读者可以自己分析下。<br>接下来的第二行就是查找标记了aop注解的bean并增加到结果集中。而使用的代码点就是<code>this.aspectJAdvisorsBuilder.buildAspectJAdvisors()</code>,该方法整体逻辑如下：</p>
<ol>
<li>获取所有beanName，这一步中所有在beanFactory中注册的bean都会被提取出来。</li>
<li>遍历所有beanName，找出声明AspectJ注解的类，进行进一步的处理。</li>
<li>对标记为AspectJ注解的类进行增强器的提取。</li>
<li>将提取结果加入结果集。</li>
</ol>
<p>方法代码如下：<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"> * Look <span class="keyword">for</span> AspectJ-annotated aspect beans <span class="keyword">in</span> the current bean factory,</span><br><span class="line"> * and <span class="keyword">return</span> to a list of Spring AOP Advisors representing them.</span><br><span class="line"> * &lt;p&gt;Creates a Spring Advisor <span class="keyword">for</span> each AspectJ advice method.</span><br><span class="line"> * <span class="meta">@return</span> the list of &#123;<span class="meta">@link</span> org.springframework.aop.Advisor&#125; beans</span><br><span class="line"> * <span class="meta">@see</span> #isEligibleBean</span><br><span class="line"> */</span><br><span class="line"><span class="keyword">public</span> List&lt;Advisor&gt; buildAspectJAdvisors() &#123;</span><br><span class="line">	List&lt;String&gt; aspectNames = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">	synchronized (<span class="keyword">this</span>) &#123;</span><br><span class="line">		aspectNames = <span class="keyword">this</span>.aspectBeanNames;</span><br><span class="line">		<span class="keyword">if</span> (aspectNames == <span class="literal">null</span>) &#123;</span><br><span class="line">			List&lt;Advisor&gt; advisors = new LinkedList&lt;Advisor&gt;();</span><br><span class="line">			aspectNames = new LinkedList&lt;String&gt;();</span><br><span class="line">			<span class="comment">//获取所有的beanName</span></span><br><span class="line">			String[] beanNames =</span><br><span class="line">					BeanFactoryUtils.beanNamesForTypeIncludingAncestors(<span class="keyword">this</span>.beanFactory, Object<span class="class">.<span class="keyword">class</span>, <span class="type">true</span>, <span class="type">false);</span></span></span><br><span class="line">			<span class="comment">//循环所有的beanName 找出对应的增强方法		</span></span><br><span class="line">			<span class="keyword">for</span> (String beanName : beanNames) &#123;</span><br><span class="line">				<span class="comment">//不合法的bean则略过，有子类定义规则默认返回true</span></span><br><span class="line">				<span class="keyword">if</span> (!isEligibleBean(beanName)) &#123;</span><br><span class="line">					<span class="keyword">continue</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="comment">// We must be careful not to instantiate beans eagerly as in this</span></span><br><span class="line">				<span class="comment">// case they would be cached by the Spring container but would not</span></span><br><span class="line">				<span class="comment">// have been weaved</span></span><br><span class="line">				<span class="comment">//获取对应的bean的类型</span></span><br><span class="line">				Class beanType = <span class="keyword">this</span>.beanFactory.getType(beanName);</span><br><span class="line">				<span class="keyword">if</span> (beanType == <span class="literal">null</span>) &#123;</span><br><span class="line">					<span class="keyword">continue</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="comment">//如果存在Aspect注解</span></span><br><span class="line">				<span class="keyword">if</span> (<span class="keyword">this</span>.advisorFactory.isAspect(beanType)) &#123;</span><br><span class="line">					aspectNames.add(beanName);</span><br><span class="line">					AspectMetadata amd = new AspectMetadata(beanType, beanName);</span><br><span class="line">					<span class="keyword">if</span> (amd.getAjType().getPerClause().getKind() == PerClauseKind.SINGLETON) &#123;</span><br><span class="line">						MetadataAwareAspectInstanceFactory factory =</span><br><span class="line">								new BeanFactoryAspectInstanceFactory(<span class="keyword">this</span>.beanFactory, beanName);</span><br><span class="line">						<span class="comment">//解析标记AspectJ注解中的增强方法</span></span><br><span class="line">						List&lt;Advisor&gt; classAdvisors = <span class="keyword">this</span>.advisorFactory.getAdvisors(factory);</span><br><span class="line">						<span class="keyword">if</span> (<span class="keyword">this</span>.beanFactory.isSingleton(beanName)) &#123;</span><br><span class="line">							<span class="keyword">this</span>.advisorsCache.put(beanName, classAdvisors);</span><br><span class="line">						&#125;</span><br><span class="line">						<span class="keyword">else</span> &#123;</span><br><span class="line">							<span class="keyword">this</span>.aspectFactoryCache.put(beanName, factory);</span><br><span class="line">						&#125;</span><br><span class="line">						advisors.addAll(classAdvisors);</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">else</span> &#123;</span><br><span class="line">						<span class="comment">// Per target or per this.</span></span><br><span class="line">						<span class="keyword">if</span> (<span class="keyword">this</span>.beanFactory.isSingleton(beanName)) &#123;</span><br><span class="line">							<span class="keyword">throw</span> new IllegalArgumentException(<span class="string">"Bean with name '"</span> + beanName +</span><br><span class="line">									<span class="string">"' is a singleton, but aspect instantiation model is not singleton"</span>);</span><br><span class="line">						&#125;</span><br><span class="line">						MetadataAwareAspectInstanceFactory factory =</span><br><span class="line">								new PrototypeAspectInstanceFactory(<span class="keyword">this</span>.beanFactory, beanName);</span><br><span class="line">						<span class="keyword">this</span>.aspectFactoryCache.put(beanName, factory);</span><br><span class="line">						advisors.addAll(<span class="keyword">this</span>.advisorFactory.getAdvisors(factory));</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">this</span>.aspectBeanNames = aspectNames;</span><br><span class="line">			<span class="keyword">return</span> advisors;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (aspectNames.isEmpty()) &#123;</span><br><span class="line">		<span class="keyword">return</span> Collections.EMPTY_LIST;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//将结果集记录在结果中</span></span><br><span class="line">	List&lt;Advisor&gt; advisors = new LinkedList&lt;Advisor&gt;();</span><br><span class="line">	<span class="keyword">for</span> (String aspectName : aspectNames) &#123;</span><br><span class="line">		List&lt;Advisor&gt; cachedAdvisors = <span class="keyword">this</span>.advisorsCache.<span class="keyword">get</span>(aspectName);</span><br><span class="line">		<span class="keyword">if</span> (cachedAdvisors != <span class="literal">null</span>) &#123;</span><br><span class="line">			advisors.addAll(cachedAdvisors);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			MetadataAwareAspectInstanceFactory factory = <span class="keyword">this</span>.aspectFactoryCache.<span class="keyword">get</span>(aspectName);</span><br><span class="line">			advisors.addAll(<span class="keyword">this</span>.advisorFactory.getAdvisors(factory));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> advisors;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>上面代码中对增强advice的获取委托给了<code>this.advisorFactory.getAdvisors(factory)</code>方法，此方法代码如下：<br><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">public List&lt;Advisor&gt; get<span class="constructor">Advisors(MetadataAwareAspectInstanceFactory <span class="params">maaif</span>)</span> &#123;</span><br><span class="line">		<span class="comment">//获取标记为AspectJ的类</span></span><br><span class="line">		final Class&lt;?&gt; aspectClass = maaif.get<span class="constructor">AspectMetadata()</span>.get<span class="constructor">AspectClass()</span>;</span><br><span class="line">		<span class="comment">//获取标记为AspectJ的name</span></span><br><span class="line">		final String aspectName = maaif.get<span class="constructor">AspectMetadata()</span>.get<span class="constructor">AspectName()</span>;</span><br><span class="line">		<span class="comment">//校验是否符合aop注解规则</span></span><br><span class="line">		validate(aspectClass);</span><br><span class="line"></span><br><span class="line">		<span class="comment">// We need to wrap the MetadataAwareAspectInstanceFactory with a decorator</span></span><br><span class="line">		<span class="comment">// so that it will only instantiate once.</span></span><br><span class="line">		final MetadataAwareAspectInstanceFactory lazySingletonAspectInstanceFactory =</span><br><span class="line">				<span class="keyword">new</span> <span class="constructor">LazySingletonAspectInstanceFactoryDecorator(<span class="params">maaif</span>)</span>;</span><br><span class="line"></span><br><span class="line">		final List&lt;Advisor&gt; advisors = <span class="keyword">new</span> LinkedList&lt;Advisor&gt;<span class="literal">()</span>;</span><br><span class="line">		<span class="comment">//获取实现Advisor类的所有标识没有Pointcut的方法。</span></span><br><span class="line">		for (Method <span class="keyword">method</span> : get<span class="constructor">AdvisorMethods(<span class="params">aspectClass</span>)</span>) &#123;</span><br><span class="line">			<span class="comment">//获取普通的增强器</span></span><br><span class="line">			Advisor advisor = get<span class="constructor">Advisor(<span class="params">method</span>, <span class="params">lazySingletonAspectInstanceFactory</span>, <span class="params">advisors</span>.<span class="params">size</span>()</span>, aspectName);</span><br><span class="line">			<span class="keyword">if</span> (advisor != null) &#123;</span><br><span class="line">				advisors.add(advisor);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// If it's a per target aspect, emit the dummy instantiating aspect.</span></span><br><span class="line">		<span class="keyword">if</span> (!advisors.is<span class="constructor">Empty()</span><span class="operator"> &amp;&amp; </span>lazySingletonAspectInstanceFactory.get<span class="constructor">AspectMetadata()</span>.is<span class="constructor">LazilyInstantiated()</span>) &#123;</span><br><span class="line">			<span class="comment">//如果寻找的增强器不为空而且又配置了增强延迟初始化那么需要在首位加入同步实例化增强器</span></span><br><span class="line">			Advisor instantiationAdvisor = <span class="keyword">new</span> <span class="constructor">SyntheticInstantiationAdvisor(<span class="params">lazySingletonAspectInstanceFactory</span>)</span>;</span><br><span class="line">			advisors.add(<span class="number">0</span>, instantiationAdvisor);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// Find introduction fields.</span></span><br><span class="line">		<span class="comment">//获取DeclareParents 注解</span></span><br><span class="line">		for (Field field : aspectClass.get<span class="constructor">DeclaredFields()</span>) &#123;</span><br><span class="line">			Advisor advisor = get<span class="constructor">DeclareParentsAdvisor(<span class="params">field</span>)</span>;</span><br><span class="line">			<span class="keyword">if</span> (advisor != null) &#123;</span><br><span class="line">				advisors.add(advisor);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		return advisors;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure></p>
<p>此方法的逻辑是</p>
<ol>
<li>完成对增强器的获取，包括获取注解以及根据注解生成增强的步骤。</li>
<li>如果配置中将增强配置了延迟初始化，那么在首位加入同步实例化增强器保证增强使用之前的实例化</li>
<li>对DeclareParents注解的获取。</li>
</ol>
<p>下面详细讲解每个步骤<br><strong>普通增强器获取</strong><br>普通增强器的获取是通过<code>Advisor advisor = getAdvisor(method, lazySingletonAspectInstanceFactory, advisors.size(), aspectName);</code>代码获取<br><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Advisor getAdvisor(<span class="function"><span class="keyword">Method</span> <span class="title">candidateAdviceMethod</span>, <span class="title">MetadataAwareAspectInstanceFactory</span> <span class="title">aif</span>,</span></span><br><span class="line"><span class="function">			<span class="title">int</span> <span class="title">declarationOrderInAspect</span>, <span class="title">String</span> <span class="title">aspectName</span>) <span class="comment">&#123;</span></span></span><br><span class="line"><span class="function"><span class="comment">        //校验</span></span></span><br><span class="line"><span class="function"><span class="comment">		validate(aif.getAspectMetadata().getAspectClass());</span></span></span><br><span class="line"><span class="function"><span class="comment">        //切点信息获取</span></span></span><br><span class="line"><span class="function"><span class="comment">		AspectJExpressionPointcut ajexp =</span></span></span><br><span class="line"><span class="function"><span class="comment">				getPointcut(candidateAdviceMethod, aif.getAspectMetadata().getAspectClass());</span></span></span><br><span class="line"><span class="function"><span class="comment">		if (ajexp == null) &#123;</span></span></span><br><span class="line"><span class="function"><span class="comment">			return null;</span></span></span><br><span class="line"><span class="function"><span class="comment">		&#125;</span></span></span><br><span class="line"><span class="function">		//根据切点信息生成对应的增强器</span></span><br><span class="line"><span class="function">		<span class="title">return</span> <span class="title">new</span> <span class="title">InstantiationModelAwarePointcutAdvisorImpl</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">				this, ajexp, aif, candidateAdviceMethod, declarationOrderInAspect, aspectName)</span>;</span></span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure></p>
<p>(1)切点信息获取<br>切点信息获取就是指定注解的表达式信息获取，如<code>@Before(&quot;test&quot;)</code><br><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> AspectJExpressionPointcut get<span class="constructor">Pointcut(Method <span class="params">candidateAdviceMethod</span>, Class&lt;?&gt; <span class="params">candidateAspectClass</span>)</span> &#123;</span><br><span class="line">        <span class="comment">//获取方法上注解</span></span><br><span class="line">		AspectJAnnotation&lt;?&gt; aspectJAnnotation =</span><br><span class="line">				<span class="module-access"><span class="module"><span class="identifier">AbstractAspectJAdvisorFactory</span>.</span></span>find<span class="constructor">AspectJAnnotationOnMethod(<span class="params">candidateAdviceMethod</span>)</span>;</span><br><span class="line">		<span class="keyword">if</span> (aspectJAnnotation<span class="operator"> == </span>null) &#123;</span><br><span class="line">			return null;</span><br><span class="line">		&#125;</span><br><span class="line">		 <span class="comment">//使用AspectJExpressionPointcut 实例封装获取的信息</span></span><br><span class="line">		AspectJExpressionPointcut ajexp =</span><br><span class="line">				<span class="keyword">new</span> <span class="constructor">AspectJExpressionPointcut(<span class="params">candidateAspectClass</span>, <span class="params">new</span> String[0], <span class="params">new</span> Class[0])</span>;</span><br><span class="line">		<span class="comment">//提取得到的注解中的表达式如:    //@Pointcut("execution(*  *.* test* (..))")中的execution( *  * .* test* (..))		</span></span><br><span class="line">		ajexp.set<span class="constructor">Expression(<span class="params">aspectJAnnotation</span>.<span class="params">getPointcutExpression</span>()</span>);</span><br><span class="line">		return ajexp;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">protected static AspectJAnnotation find<span class="constructor">AspectJAnnotationOnMethod(Method <span class="params">method</span>)</span> &#123;</span><br><span class="line">  <span class="comment">//设置敏感的注解类</span></span><br><span class="line">		Class&lt;? extends Annotation&gt;<span class="literal">[]</span> classesToLookFor = <span class="keyword">new</span> Class<span class="literal">[]</span> &#123;</span><br><span class="line">				<span class="module-access"><span class="module"><span class="identifier">Before</span>.</span></span><span class="keyword">class</span>, <span class="module-access"><span class="module"><span class="identifier">Around</span>.</span></span><span class="keyword">class</span>, <span class="module-access"><span class="module"><span class="identifier">After</span>.</span></span><span class="keyword">class</span>, <span class="module-access"><span class="module"><span class="identifier">AfterReturning</span>.</span></span><span class="keyword">class</span>, <span class="module-access"><span class="module"><span class="identifier">AfterThrowing</span>.</span></span><span class="keyword">class</span>, <span class="module-access"><span class="module"><span class="identifier">Pointcut</span>.</span></span><span class="keyword">class</span>&#125;;</span><br><span class="line">		for (Class&lt;? extends Annotation&gt; c : classesToLookFor) &#123;</span><br><span class="line">			AspectJAnnotation foundAnnotation = find<span class="constructor">Annotation(<span class="params">method</span>, <span class="params">c</span>)</span>;</span><br><span class="line">			<span class="keyword">if</span> (foundAnnotation != null) &#123;</span><br><span class="line">				return foundAnnotation;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		return null;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取指定方法上的注解并使用AspectJAnnotation封装</span></span><br><span class="line">	<span class="keyword">private</span> static &lt;A extends Annotation&gt; AspectJAnnotation&lt;A&gt; find<span class="constructor">Annotation(Method <span class="params">method</span>, Class&lt;A&gt; <span class="params">toLookFor</span>)</span> &#123;</span><br><span class="line">		A result = <span class="module-access"><span class="module"><span class="identifier">AnnotationUtils</span>.</span></span>find<span class="constructor">Annotation(<span class="params">method</span>, <span class="params">toLookFor</span>)</span>;</span><br><span class="line">		<span class="keyword">if</span> (result != null) &#123;</span><br><span class="line">			return <span class="keyword">new</span> AspectJAnnotation&lt;A&gt;(result);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			return null;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure></p>
<p>(2)根据切点信息生成增强。所有的增强都由Advisor的实现类InstantiationModelAwarePointcutAdvisorImpl统一封装的。<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> InstantiationModelAwarePointcutAdvisorImpl(AspectJAdvisorFactory af, AspectJExpressionPointcut ajexp,</span><br><span class="line">			MetadataAwareAspectInstanceFactory aif, Method method, int declarationOrderInAspect, String aspectName) &#123;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">this</span>.declaredPointcut = ajexp;</span><br><span class="line">		<span class="keyword">this</span>.method = method;</span><br><span class="line">		<span class="keyword">this</span>.atAspectJAdvisorFactory = af;</span><br><span class="line">		<span class="keyword">this</span>.aspectInstanceFactory = aif;</span><br><span class="line">		<span class="keyword">this</span>.declarationOrder = declarationOrderInAspect;</span><br><span class="line">		<span class="keyword">this</span>.aspectName = aspectName;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (aif.getAspectMetadata().isLazilyInstantiated()) &#123;</span><br><span class="line">			<span class="comment">// Static part of the pointcut is a lazy type.</span></span><br><span class="line">			Pointcut preInstantiationPointcut =</span><br><span class="line">					Pointcuts.union(aif.getAspectMetadata().getPerClausePointcut(), <span class="keyword">this</span>.declaredPointcut);</span><br><span class="line"></span><br><span class="line">			<span class="comment">// Make it dynamic: must mutate from pre-instantiation to post-instantiation state.</span></span><br><span class="line">			<span class="comment">// If it's not a dynamic pointcut, it may be optimized out</span></span><br><span class="line">			<span class="comment">// by the Spring AOP infrastructure after the first evaluation.</span></span><br><span class="line">			<span class="keyword">this</span>.pointcut = new PerTargetInstantiationModelPointcut(<span class="keyword">this</span>.declaredPointcut, preInstantiationPointcut, aif);</span><br><span class="line">			<span class="keyword">this</span>.lazy = <span class="literal">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="comment">// A singleton aspect.</span></span><br><span class="line">			<span class="keyword">this</span>.instantiatedAdvice = instantiateAdvice(<span class="keyword">this</span>.declaredPointcut);</span><br><span class="line">			<span class="keyword">this</span>.pointcut = declaredPointcut;</span><br><span class="line">			<span class="keyword">this</span>.lazy = <span class="literal">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure></p>
<p>在封装过程中只是简单地将信息封装在类的实例中，所有的信息单纯地赋值，在实例初始化的过程中还完成了对于增强器的初始化。因为不同的增强所体现的逻辑是不同的，比如@Be-fore（“test()”）与@After（“test()”）标签的不同就是增强器增强的位置不同，所以就需要不同的增强器来完成不同的逻辑，而根据注解中的信息初始化对应的增强器就是在instantiateAdvice函数中实现的。<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function">Advice <span class="title">instantiateAdvice</span><span class="params">(AspectJExpressionPointcut pcut)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.atAspectJAdvisorFactory.getAdvice(</span><br><span class="line">				<span class="keyword">this</span>.method, pcut, <span class="keyword">this</span>.aspectInstanceFactory, <span class="keyword">this</span>.declarationOrder, <span class="keyword">this</span>.aspectName);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line"><span class="keyword">public</span> Advice getAdvice(Method candidateAdviceMethod, AspectJExpressionPointcut ajexp,</span><br><span class="line">			MetadataAwareAspectInstanceFactory aif, <span class="keyword">int</span> declarationOrderInAspect, String aspectName) &#123;</span><br><span class="line"></span><br><span class="line">		Class&lt;?&gt; candidateAspectClass = aif.getAspectMetadata().getAspectClass();</span><br><span class="line">		validate(candidateAspectClass);</span><br><span class="line"></span><br><span class="line">		AspectJAnnotation&lt;?&gt; aspectJAnnotation =</span><br><span class="line">				AbstractAspectJAdvisorFactory.findAspectJAnnotationOnMethod(candidateAdviceMethod);</span><br><span class="line">		<span class="keyword">if</span> (aspectJAnnotation == <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// If we get here, we know we have an AspectJ method.</span></span><br><span class="line">		<span class="comment">// Check that it's an AspectJ-annotated class</span></span><br><span class="line">		<span class="keyword">if</span> (!isAspect(candidateAspectClass)) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> AopConfigException(<span class="string">"Advice must be declared inside an aspect type: "</span> +</span><br><span class="line">					<span class="string">"Offending method '"</span> + candidateAdviceMethod + <span class="string">"' in class ["</span> +</span><br><span class="line">					candidateAspectClass.getName() + <span class="string">"]"</span>);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">			logger.debug(<span class="string">"Found AspectJ method: "</span> + candidateAdviceMethod);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		AbstractAspectJAdvice springAdvice;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">switch</span> (aspectJAnnotation.getAnnotationType()) &#123;</span><br><span class="line">			<span class="keyword">case</span> AtBefore:</span><br><span class="line">				springAdvice = <span class="keyword">new</span> AspectJMethodBeforeAdvice(candidateAdviceMethod, ajexp, aif);</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> AtAfter:</span><br><span class="line">				springAdvice = <span class="keyword">new</span> AspectJAfterAdvice(candidateAdviceMethod, ajexp, aif);</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> AtAfterReturning:</span><br><span class="line">				springAdvice = <span class="keyword">new</span> AspectJAfterReturningAdvice(candidateAdviceMethod, ajexp, aif);</span><br><span class="line">				AfterReturning afterReturningAnnotation = (AfterReturning) aspectJAnnotation.getAnnotation();</span><br><span class="line">				<span class="keyword">if</span> (StringUtils.hasText(afterReturningAnnotation.<span class="keyword">returning</span>())) &#123;</span><br><span class="line">					springAdvice.setReturningName(afterReturningAnnotation.<span class="keyword">returning</span>());</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> AtAfterThrowing:</span><br><span class="line">				springAdvice = <span class="keyword">new</span> AspectJAfterThrowingAdvice(candidateAdviceMethod, ajexp, aif);</span><br><span class="line">				AfterThrowing afterThrowingAnnotation = (AfterThrowing) aspectJAnnotation.getAnnotation();</span><br><span class="line">				<span class="keyword">if</span> (StringUtils.hasText(afterThrowingAnnotation.<span class="keyword">throwing</span>())) &#123;</span><br><span class="line">					springAdvice.setThrowingName(afterThrowingAnnotation.<span class="keyword">throwing</span>());</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> AtAround:</span><br><span class="line">				springAdvice = <span class="keyword">new</span> AspectJAroundAdvice(candidateAdviceMethod, ajexp, aif);</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> AtPointcut:</span><br><span class="line">				<span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">					logger.debug(<span class="string">"Processing pointcut '"</span> + candidateAdviceMethod.getName() + <span class="string">"'"</span>);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">			<span class="keyword">default</span>:</span><br><span class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(</span><br><span class="line">						<span class="string">"Unsupported advice type on method "</span> + candidateAdviceMethod);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// Now to configure the advice...</span></span><br><span class="line">		springAdvice.setAspectName(aspectName);</span><br><span class="line">		springAdvice.setDeclarationOrder(declarationOrderInAspect);</span><br><span class="line">		String[] argNames = <span class="keyword">this</span>.parameterNameDiscoverer.getParameterNames(candidateAdviceMethod);</span><br><span class="line">		<span class="keyword">if</span> (argNames != <span class="keyword">null</span>) &#123;</span><br><span class="line">			springAdvice.setArgumentNamesFromStringArray(argNames);</span><br><span class="line">		&#125;</span><br><span class="line">		springAdvice.calculateArgumentBindings();</span><br><span class="line">		<span class="keyword">return</span> springAdvice;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure></p>
<p>从函数中可以看到，Spring会根据不同的注解生成不同的增强器，例如AtBefore会对应AspectJMethodBeforeAdvice，而在AspectJMethodBeforeAdvice中完成了增强方法的逻辑。具体的实现感兴趣的读者可以自己看看。</p>
<p><strong>寻找匹配的增强器</strong><br>前面的函数中已经完成了所有增强器的解析，但是对于所有增强器来讲，并不一定都适用于当前的Bean，还要挑取出适合的增强器，也就是满足我们配置的通配符的增强器。具体实现在AbstractAdvisorAutoProxyCreator.findAdvisorsThatCanApply中。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">List</span>&lt;Advisor&gt; findAdvisorsThatCanApply(</span><br><span class="line">			<span class="keyword">List</span>&lt;Advisor&gt; candidateAdvisors, <span class="class"><span class="keyword">Class</span> <span class="title">beanClass</span>, <span class="title">String</span> <span class="title">beanName</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">		ProxyCreationContext.setCurrentProxiedBeanName(beanName);</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">		    <span class="comment">//过滤已经得到的advisors</span></span><br><span class="line">			<span class="keyword">return</span> AopUtils.findAdvisorsThatCanApply(candidateAdvisors, beanClass);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">finally</span> &#123;</span><br><span class="line">			ProxyCreationContext.setCurrentProxiedBeanName(<span class="keyword">null</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure></p>
<p>继续看findAdvisorsThatCanApply：<br><figure class="highlight zephir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">List</span>&lt;Advisor&gt; findAdvisorsThatCanApply(<span class="keyword">List</span>&lt;Advisor&gt; candidateAdvisors, <span class="class"><span class="keyword">Class</span>&lt;?&gt; <span class="title">clazz</span>) </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (candidateAdvisors.isEmpty()) &#123;</span><br><span class="line">			<span class="keyword">return</span> candidateAdvisors;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">List</span>&lt;Advisor&gt; eligibleAdvisors = <span class="keyword">new</span> LinkedList&lt;Advisor&gt;();</span><br><span class="line">		<span class="comment">//首先处理引介增强</span></span><br><span class="line">		<span class="keyword">for</span> (Advisor candidate : candidateAdvisors) &#123;</span><br><span class="line">			<span class="keyword">if</span> (candidate <span class="keyword">instanceof</span> IntroductionAdvisor &amp;&amp; canApply(candidate, clazz)) &#123;</span><br><span class="line">				eligibleAdvisors.add(candidate);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">boolean</span> hasIntroductions = !eligibleAdvisors.isEmpty();</span><br><span class="line">		<span class="keyword">for</span> (Advisor candidate : candidateAdvisors) &#123;</span><br><span class="line">		 <span class="comment">//引介增强已经处理</span></span><br><span class="line">			<span class="keyword">if</span> (candidate <span class="keyword">instanceof</span> IntroductionAdvisor) &#123;</span><br><span class="line">				<span class="comment">// already processed</span></span><br><span class="line">				<span class="keyword">continue</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			 <span class="comment">//对于普通bean 的处理</span></span><br><span class="line">			<span class="keyword">if</span> (canApply(candidate, clazz, hasIntroductions)) &#123;</span><br><span class="line">				eligibleAdvisors.add(candidate);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> eligibleAdvisors;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure></p>
<p>findAdvisorsThatCanApply函数的主要功能是寻找所有增强器中适用于当前class的增强器。引介增强与普通的增强是处理不一样的，所以分开处理。而对于真正的匹配在canApply中实现。实现的逻辑很简单就是循环之前查找出来的所有增强，逐个判断该增强是否匹配当前的Bean，匹配则加进Advisor结果集的list中。</p>
<h3 id="2-1-3-创建代理"><a href="#2-1-3-创建代理" class="headerlink" title="2.1.3 创建代理"></a>2.1.3 创建代理</h3><p>上面的代码已经将获取的增强器讲完了，那么接下来便是根据增强器对匹配的bean创建代理了。我们是否忘了从哪里分析了，那再回顾下，从AbstractAutoProxyCreator.wrapIfNecessary方法分析开始，先是获取匹配的增强器调用getAdvicesAndAdvisorsForBean方法。然后再是创建代理createProxy方法，接下来我们将会分析此方法</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> Object createProxy(</span><br><span class="line">			Class&lt;?&gt; beanClass, String beanName, Object[] specificInterceptors, TargetSource targetSource) &#123;</span><br><span class="line"></span><br><span class="line">		ProxyFactory proxyFactory = new ProxyFactory();</span><br><span class="line">		<span class="comment">// Copy our properties (proxyTargetClass etc) inherited from ProxyConfig.</span></span><br><span class="line">		<span class="comment">//获取当前类中相关属性</span></span><br><span class="line">		proxyFactory.copyFrom(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//决定对于给定的bean 是否应该使用targetClass 而不是他的接口代理,    </span></span><br><span class="line">        <span class="comment">//检查proxyTargeClass 设置以及preserveTargetClass 属性</span></span><br><span class="line">		<span class="keyword">if</span> (!shouldProxyTargetClass(beanClass, beanName)) &#123;</span><br><span class="line">			<span class="comment">// Must allow for introductions; can't just set interfaces to</span></span><br><span class="line">			<span class="comment">// the target's interfaces only.</span></span><br><span class="line">			Class&lt;?&gt;[] targetInterfaces = ClassUtils.getAllInterfacesForClass(beanClass, <span class="keyword">this</span>.proxyClassLoader);</span><br><span class="line">			<span class="keyword">for</span> (Class&lt;?&gt; targetInterface : targetInterfaces) &#123;</span><br><span class="line">			 <span class="comment">//添加代理接口</span></span><br><span class="line">				proxyFactory.addInterface(targetInterface);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		Advisor[] advisors = buildAdvisors(beanName, specificInterceptors);</span><br><span class="line">		<span class="keyword">for</span> (Advisor advisor : advisors) &#123;</span><br><span class="line">		<span class="comment">//设置要代理的类</span></span><br><span class="line">			proxyFactory.addAdvisor(advisor);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">//设置要代理的类</span></span><br><span class="line">		proxyFactory.setTargetSource(targetSource);</span><br><span class="line">		<span class="comment">//定制代理</span></span><br><span class="line">		customizeProxyFactory(proxyFactory);</span><br><span class="line"></span><br><span class="line"><span class="comment">//用来控制代理工厂被配置之后，是否还允许修改通知。    //缺省值为false （即在代理被配置之后，不允许修改代理的配置）。</span></span><br><span class="line">		proxyFactory.setFrozen(<span class="keyword">this</span>.freezeProxy);</span><br><span class="line">		<span class="keyword">if</span> (advisorsPreFiltered()) &#123;</span><br><span class="line">			proxyFactory.setPreFiltered(<span class="literal">true</span>);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> proxyFactory.getProxy(<span class="keyword">this</span>.proxyClassLoader);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p>对于代理类的创建及处理，Spring委托给力ProxyFactory去处理，而在此函数中主要是对ProxyFactory的初始化操作，进而对真正的创建代理做准备，这些初始化内容包括：</p>
<ol>
<li>获取当前类中的属性</li>
<li>添加代理接口</li>
<li>封装Advisor并加入到ProxyFactory中。</li>
<li>设置要代理的类。</li>
<li>Spring还未子类提供了定制的方法customizeProxyFactory，子类可以在此方法中进行对ProxyFactory的进一步封装。</li>
<li>进行获取代理操作。</li>
</ol>
<p>其中封装Advisor并加入到ProxyFactory中以及创建代理是两个相对繁琐的过程，可以通过ProxyFactory提供的addAdvisor方法直接将增强器织入代理创建工厂中，但是将拦截器封装为增强器还是需要一定逻辑的，代码如下：<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Determine the advisors for the given bean, including the specific interceptors</span></span><br><span class="line"><span class="comment"> * as well as the common interceptor, all adapted to the Advisor interface.</span></span><br><span class="line"><span class="comment"> * @param beanName the name of the bean</span></span><br><span class="line"><span class="comment"> * @param specificInterceptors the set of interceptors that is</span></span><br><span class="line"><span class="comment"> * specific to this bean (may be empty, but not null)</span></span><br><span class="line"><span class="comment"> * @return the list of Advisors for the given bean</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">protected</span> Advisor[] buildAdvisors(<span class="keyword">String</span> beanName, <span class="keyword">Object</span>[] specificInterceptors) &#123;</span><br><span class="line">	<span class="comment">// 解析注册的所有InterceptorName</span></span><br><span class="line">	Advisor[] commonInterceptors = resolveInterceptorNames();</span><br><span class="line"></span><br><span class="line">	List&lt;<span class="keyword">Object</span>&gt; allInterceptors = <span class="keyword">new</span> ArrayList&lt;<span class="keyword">Object</span>&gt;();</span><br><span class="line">	<span class="keyword">if</span> (specificInterceptors != <span class="keyword">null</span>) &#123;</span><br><span class="line">		<span class="comment">//加入拦截器</span></span><br><span class="line">		allInterceptors.addAll(Arrays.asList(specificInterceptors));</span><br><span class="line">		<span class="keyword">if</span> (commonInterceptors != <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span> (<span class="keyword">this</span>.applyCommonInterceptorsFirst) &#123;</span><br><span class="line">				allInterceptors.addAll(<span class="number">0</span>, Arrays.asList(commonInterceptors));</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				allInterceptors.addAll(Arrays.asList(commonInterceptors));</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">		<span class="built_in">int</span> nrOfCommonInterceptors = (commonInterceptors != <span class="keyword">null</span> ? commonInterceptors.length : <span class="number">0</span>);</span><br><span class="line">		<span class="built_in">int</span> nrOfSpecificInterceptors = (specificInterceptors != <span class="keyword">null</span> ? specificInterceptors.length : <span class="number">0</span>);</span><br><span class="line">		logger.debug(<span class="string">"Creating implicit proxy for bean '"</span> + beanName + <span class="string">"' with "</span> + nrOfCommonInterceptors +</span><br><span class="line">				<span class="string">" common interceptors and "</span> + nrOfSpecificInterceptors + <span class="string">" specific interceptors"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	Advisor[] advisors = <span class="keyword">new</span> Advisor[allInterceptors.<span class="built_in">size</span>()];</span><br><span class="line">	<span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; allInterceptors.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">		<span class="comment">//将拦截器转换为advisor</span></span><br><span class="line">		advisors[i] = <span class="keyword">this</span>.advisorAdapterRegistry.wrap(allInterceptors.<span class="built_in">get</span>(i));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> advisors;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Advisor wrap(<span class="keyword">Object</span> adviceObject) <span class="keyword">throws</span> UnknownAdviceTypeException &#123;</span><br><span class="line">	<span class="comment">//如果本身就是Advisor类型，无需处理直接转换</span></span><br><span class="line">	<span class="keyword">if</span> (adviceObject <span class="keyword">instanceof</span> Advisor) &#123;</span><br><span class="line">		<span class="keyword">return</span> (Advisor) adviceObject;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//因为此封装方法只对Advisor于advice两种类型的数据有效，如果不是将不能封装。</span></span><br><span class="line">	<span class="keyword">if</span> (!(adviceObject <span class="keyword">instanceof</span> Advice)) &#123;</span><br><span class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> UnknownAdviceTypeException(adviceObject);</span><br><span class="line">	&#125;</span><br><span class="line">	Advice advice = (Advice) adviceObject;</span><br><span class="line">	<span class="keyword">if</span> (advice <span class="keyword">instanceof</span> MethodInterceptor) &#123;</span><br><span class="line">		<span class="comment">// So well-known it doesn't even need an adapter.</span></span><br><span class="line">		<span class="comment">//如果是MethodInterceptor类型则使用DefaultPointcutAdvisor封装。</span></span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> DefaultPointcutAdvisor(advice);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (AdvisorAdapter adapter : <span class="keyword">this</span>.adapters) &#123;</span><br><span class="line">		<span class="comment">// Check that it is supported.</span></span><br><span class="line">		<span class="keyword">if</span> (adapter.supportsAdvice(advice)) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">new</span> DefaultPointcutAdvisor(advice);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">throw</span> <span class="keyword">new</span> UnknownAdviceTypeException(advice);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>由于Spring中涉及过多的拦截器、增强器、增强方法等方式来对逻辑进行增强，所以非常有必要统一封装成Advisor来进行代理的创建，完成了增强的封装过程，那么解析最重要的一步就是代理的创建于获取了。<br><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public Object get<span class="constructor">Proxy(ClassLoader <span class="params">classLoader</span>)</span> &#123;</span><br><span class="line">		return create<span class="constructor">AopProxy()</span>.get<span class="constructor">Proxy(<span class="params">classLoader</span>)</span>;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong>创建代理</strong><br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> synchronized AopProxy <span class="title">createAopProxy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (!<span class="keyword">this</span>.active) &#123;</span><br><span class="line">		activate();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//创建代理</span></span><br><span class="line">	<span class="keyword">return</span> getAopProxyFactory().createAopProxy(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> AopProxy <span class="title">createAopProxy</span><span class="params">(AdvisedSupport <span class="built_in">config</span>)</span> throws AopConfigException </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">config</span>.isOptimize() || <span class="built_in">config</span>.isProxyTargetClass() || hasNoUserSuppliedProxyInterfaces(<span class="built_in">config</span>)) &#123;</span><br><span class="line">		Class targetClass = <span class="built_in">config</span>.getTargetClass();</span><br><span class="line">		<span class="keyword">if</span> (targetClass == null) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> AopConfigException(<span class="string">"TargetSource cannot determine target class: "</span> +</span><br><span class="line">					<span class="string">"Either an interface or a target is required for proxy creation."</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (targetClass.isInterface()) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">new</span> JdkDynamicAopProxy(<span class="built_in">config</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> CglibProxyFactory.createCglibProxy(<span class="built_in">config</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> JdkDynamicAopProxy(<span class="built_in">config</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>到此已经完成了代理的创建，我们可以看到Spring会动态的选择使用Cglib或者jdk创建代理。这里就不细分析了。<br>至此我们分析完了<code>&lt;aop:aspectj-autoproxy/&gt;</code>标签创建Spring的AOP全流程。</p>
<h2 id="2-2-lt-aop-config-gt-使用分析"><a href="#2-2-lt-aop-config-gt-使用分析" class="headerlink" title="2.2 &lt;aop:config&gt;使用分析"></a>2.2 &lt;aop:config&gt;使用分析</h2><p>前面分析完了在使用<code>&lt;aop:aspectj-autoproxy/&gt;</code>标签时，aop的实现原理，接着分析<code>&lt;aop:config&gt;</code>实现原理。<br><code>&lt;aop:config&gt;</code>在 1.2节中解析此标签时我们看到注册了<code>AspectJAwareAdvisorAutoProxyCreator</code>看到此类是不是很熟悉，看下此类的集成关系图：<br><img src="http://imgcdn.yalongkeji.com/aop.png" alt="aop"><br>看到了吧，我们使用注解aop的<code>AnnotationAwareAspectJAutoProxyCreator</code>就是直接继承此类的，回头看看2.1节的<code>AnnotationAwareAspectJAutoProxyCreator</code>此类继承关系图。如果你理解了之前对注解AOP实现原理的分析，那么相信你对此标签的实现原理也是了然于胸了。这里主要说下步骤，就不进行相信分析了</p>
<ol>
<li>解析<code>&lt;aop:config&gt;</code>标签时，获取对应的子标签，注册对应的Bean，例如Advisor和pointcut。</li>
<li>程序运行调用getbean获取bean时执行<code>AnnotationAwareAspectJAutoProxyCreator</code>的<code>postProcessBeforeInstantiation</code>方法进行代理的创建。<code>postProcessBeforeInstantiation</code>方法我们在之前就分析了此流程。</li>
</ol>
<blockquote>
<p>至此aop的流程就分析完了，感兴趣的可以留言探讨，一起学习进步。</p>
</blockquote>
<blockquote>
<p>想了解更多技术文章信息，请继续关注<a href="http://wiliam.me">wiliam.s Blog</a>，谢谢，欢迎来访！</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> houduan </category>
            
            <category> spring </category>
            
        </categories>
        
        
        <tags>
            
            <tag> spring </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Spring中环境架构的解析说明]]></title>
      <url>http://wiliam.me/2017/02/26/20170226091750.html</url>
      <content type="html"><![CDATA[<blockquote>
<p>Spring在3.1版本添加了org.springframework.core.env包，该包下面描述了Spring的环境架构体系，对Spring环境配置方面起到了重要作用。该包下面有PropertyResolver，Environment等接口描述Spring的环境信息。其中Environment接口作用可以让Spring根据不同的环境配置加载不同的配置信息。例如我们常用的测试环境和生产环境需要使用不同的数据源，通过配置环境信息即可达到无缝切换。PropertyResolver可以让我们加载属性信息。接下来就详细解说Spring的环境架构</p>
</blockquote>
<a id="more"></a>
<h1 id="1-环境架构整体说明"><a href="#1-环境架构整体说明" class="headerlink" title="1.环境架构整体说明"></a>1.环境架构整体说明</h1><h2 id="1-1-重要接口和类"><a href="#1-1-重要接口和类" class="headerlink" title="1.1.重要接口和类"></a>1.1.重要接口和类</h2><h3 id="1-1-1-PropertySource类"><a href="#1-1-1-PropertySource类" class="headerlink" title="1.1.1.PropertySource类"></a>1.1.1.PropertySource类</h3><p>PropertySource是抽象类，该类是对(name/value)属性的抽象，其中value可以是任何类型属性，例如可以是java.util.Properties对象，java.util.Map对象，ServletContext和ServletConfig对象(可以获取初始化参数)。其方法<code>public abstract Object getProperty(String name)</code>是抽象方法，由不同的子类去实现。Spring对常用的属性都定义了对应的实现类，不同的实现代表了不同的类型属性。其类图如下：<br><img src="http://imgcdn.yalongkeji.com/blog/20170225/113634020.jpg" alt="propertysource"><br>上图其中最重要的是EnumerablePropertySource类，是枚举行属性类，该类下面的子类就有我们常用属性文件对象，如PropertiesPropertySource<br>PropertySource和Spring中的Resource接口很像，Resource对所有的资源文件进行了抽象，并提供了各种资源的实现类，如ClassPathResource，FileSystemResource等，这里就不详细介绍，感兴趣的可以自己去探索。</p>
<h3 id="1-1-2-PropertyResolver接口"><a href="#1-1-2-PropertyResolver接口" class="headerlink" title="1.1.2.PropertyResolver接口"></a>1.1.2.PropertyResolver接口</h3><p>PropertyResolver接口中定义了属性资源解析方法，可以理解为对PropertySource类的属性value解析。</p>
<h3 id="1-1-3-Environment接口"><a href="#1-1-3-Environment接口" class="headerlink" title="1.1.3.Environment接口"></a>1.1.3.Environment接口</h3><p>Environment接口继承PropertyResolver接口，之所以要单独列出来是因为Spring对外暴露的是Environment而不是PropertyResolver接口。类图如下：<br><img src="http://imgcdn.yalongkeji.com/blog/20170225/120820499.jpg" alt="environment"></p>
<p>从图中可以看出两大实体组件，分别是环境（StandardEnvironment）和属性解决器（PropertySourcesPropertyResolver）。spring框架把两个组件的对外提供的功能性接口和自身的配置性接口进行了拆分，组件的配置API都集中在ConfigurableXXX接口中。</p>
<p>两个组件都只有唯一的标准实现类，即StandardEnvironment和PropertySourcesPropertyResolver。</p>
<p>两个组件之间的关系可以这样理解：</p>
<p>环境对象通过持有属性解决器对象的引用，从而实现组件复用。同时，环境对象所定义的接口继承自属性解决器接口，因此，环境对象也具有属性解决器的所有功能，而且在属性解决器的功能基础之上，又扩展出了环境的功能。细心的读者可能已经看出，这实际上是使用了装饰器模式，StandardEnvironment通过对PropertySourcesPropertyResolver的装饰，进行了功能增强。</p>
<p>我们可以将整个体系拆分成Environment和PropertyResolver两个体系，然后分别讲解</p>
<p><div></div></p>
<p><div style="display:inline;float:left;"><img src="http://imgcdn.yalongkeji.com/blog/20170225/122833815.jpg" width="300" height="400"></div></p>
<p><div style="display:inline;"><img src="http://imgcdn.yalongkeji.com/blog/20170225/122913758.jpg" width="300" height="400"> </div></p>
<div>


<ol>
<li><p><a href="http://wiliam.me/2017/02/25/20170225125742.html">PropertyResolver属性解析器</a></p>
</li>
<li><p><a href="http://wiliam.me/2017/02/25/20170225125823.html">Environment应用上下文环境</a></p>
</li>
</ol>
<h1 id="2-Environment使用"><a href="#2-Environment使用" class="headerlink" title="2.Environment使用"></a>2.Environment使用</h1><p>通过第一节的介绍说明了Spring整体环境架构，那么整体环境架构已经构建好了，我们该如何使用呢？<br>Spring提供了EnvironmentCapable接口，我们实现该接口可以使组件具有环境。接口定义如下：<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public<span class="built_in"> interface </span>EnvironmentCapable &#123;</span><br><span class="line"></span><br><span class="line">	Environment getEnvironment();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>接口定义的唯一方法，就是获取与当前组件相关联的Environment环境对象。<br>该接口的实现类如图：<br>![EnvironmentCapable实现类][5]</p>
<p>可以看到ApplicationContext接口继承自这个接口，也就是说所有应用上下文都是具有环境的，当使用ApplicationContext实现类时调用getEnvironment就可以获取环境信息了。</p>
<hr>
<p>参考资料<br><a href="https://my.oschina.net/lixin91/blog/672351" target="_blank" rel="noopener">spring-core组件详解——环境体系</a><br><a href="http://www.jianshu.com/p/948c303b2253" target="_blank" rel="noopener">详解Spring中的Profile</a></p>
<blockquote>
<p>想了解更多技术文章信息，请继续关注<a href="http://wiliam.me">wiliam.s Blog</a>，谢谢，欢迎来访！</p>
</blockquote>
</div>]]></content>
      
        <categories>
            
            <category> houduan </category>
            
            <category> spring </category>
            
        </categories>
        
        
        <tags>
            
            <tag> spring </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Spring的Environment应用上下文环境]]></title>
      <url>http://wiliam.me/2017/02/25/20170225125823.html</url>
      <content type="html"><![CDATA[<blockquote>
<p>Spring使用Environment表示应用的上下文环境，Environment接口作用可以让Spring根据不同的环境配置加载不同的配置信息。例如我们常用的测试环境和生产环境需要使用不同的数据源，通过配置环境信息即可达到无缝切换。</p>
</blockquote>
<a id="more"></a>
<h1 id="1-整体介绍"><a href="#1-整体介绍" class="headerlink" title="1.整体介绍"></a>1.整体介绍</h1><p>Environment环境代表当前应用运行时所处的环境。</p>
<p>整个应用环境模型包括2个关键方面：</p>
<h2 id="1-1-profiles配置组（以下简称组）："><a href="#1-1-profiles配置组（以下简称组）：" class="headerlink" title="1.1. profiles配置组（以下简称组）："></a>1.1. profiles配置组（以下简称组）：</h2><p>一个profile组，是一个以name名称命名的、逻辑上的、要被注册到容器中的BeanDefinition的集合。简单一点说，一个profile就代表一组BeanDefinition，当是xml配置时使用<beans profile>。当加载解析xml配置文件的时候，只有active=true激活的BeanDefinition才会被加载进容器。当是注解使用@Profile配置。下面举例说明</beans></p>
<h3 id="1-1-1-xml配置"><a href="#1-1-1-xml配置" class="headerlink" title="1.1.1. xml配置"></a>1.1.1. xml配置</h3><p>ServerEnv接口<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">package me.wiliam.spring.xmlconfig.bean;</span><br><span class="line"></span><br><span class="line">public<span class="built_in"> interface </span>ServerEnv &#123;</span><br><span class="line"></span><br><span class="line">	void getEnvData();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>生产环境实现类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> me.wiliam.spring.xmlconfig.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductEnv</span> <span class="keyword">implements</span> <span class="title">ServerEnv</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getEnvData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"this is product Environment"</span>);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>测试环境实现类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> me.wiliam.spring.xmlconfig.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestEnv</span> <span class="keyword">implements</span> <span class="title">ServerEnv</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getEnvData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"this is Test Environment"</span>);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>xml配置<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">profile</span>=<span class="string">"product"</span>&gt;</span>  </span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"serverEnv"</span> <span class="attr">class</span>=<span class="string">"me.wiliam.spring.xmlconfig.bean.ProductEnv"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span>  </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">profile</span>=<span class="string">"test"</span>&gt;</span>  </span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"serverEnv"</span> <span class="attr">class</span>=<span class="string">"me.wiliam.spring.xmlconfig.bean.TestEnv"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>测试类<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">package me.wiliam.spring.xmlconfig;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> me.wiliam.spring.xmlconfig.bean.ServerEnv;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppMain</span> &#123;</span></span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123;</span><br><span class="line">		ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"me/wiliam/spring/xmlconfig/config/spring-profile.xml"</span>);</span><br><span class="line">		ServerEnv serverEnv = (ServerEnv)context.getBean(<span class="string">"serverEnv"</span>);</span><br><span class="line">		serverEnv.getEnvData();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>jvm环境变量设置<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">-Dspring.profiles.active</span>=product</span><br></pre></td></tr></table></figure></p>
<p>执行结果<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span> <span class="keyword">is</span> product Environment</span><br></pre></td></tr></table></figure></p>
<h3 id="1-1-2-注解配置"><a href="#1-1-2-注解配置" class="headerlink" title="1.1.2. 注解配置"></a>1.1.2. 注解配置</h3><p>ProdcutConfig配置类<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@Configuration</span></span><br><span class="line"><span class="variable">@Profile</span>(<span class="string">"product"</span>)</span><br><span class="line">public class ProdcutConfig &#123;</span><br><span class="line"></span><br><span class="line">	<span class="variable">@Bean</span>(name=<span class="string">"serverEnv"</span>)</span><br><span class="line">	public ProductEnv productEnv()&#123;</span><br><span class="line">		<span class="selector-tag">return</span> <span class="selector-tag">new</span> <span class="selector-tag">ProductEnv</span>();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>TestConfig配置类<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@Configuration</span></span><br><span class="line"><span class="variable">@Profile</span>(<span class="string">"test"</span>)</span><br><span class="line">public class TestConfig &#123;</span><br><span class="line">	<span class="variable">@Bean</span>(name=<span class="string">"serverEnv"</span>)</span><br><span class="line">	public TestEnv testEnv()&#123;</span><br><span class="line">		<span class="selector-tag">return</span> <span class="selector-tag">new</span> <span class="selector-tag">TestEnv</span>();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>总配置<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@Configuration</span></span><br><span class="line"><span class="variable">@Import</span>(&#123;TestConfig.class,ProdcutConfig.class&#125;)</span><br><span class="line">public class AppConfig &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>测试<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">APP</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		ApplicationContext context = <span class="keyword">new</span> AnnotationConfigApplicationContext(AppConfig<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">		ServerEnv server =context.getBean(ServerEnv<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">		server.getEnvData();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>jvm环境变量设置<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">-Dspring.profiles.active</span>=product</span><br></pre></td></tr></table></figure></p>
<p>执行结果<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span> <span class="keyword">is</span> product Environment</span><br></pre></td></tr></table></figure></p>
<h3 id="1-1-3-配置说明总结"><a href="#1-1-3-配置说明总结" class="headerlink" title="1.1.3.配置说明总结"></a>1.1.3.配置说明总结</h3><p>上面切换配置使用的是jvm环境变量配置的，如果是web环境，可以针对测试环境和生产环境在启动时增加环境变量就可以自动区分生产环境还是测试环境了。<br>激活profile还有其他几种方式，例如使用xml，下面说明下：</p>
<p>Spring通过两个不同属性来决定哪些profile可以被激活(注意：profile是可以同时激活多个的),一个属性是spring.profiles.active和spring.profiles.default。这两个常量值在Spring的AbstractEnvironment中有定义，查看AbstractEnvironment源码：<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">String</span> ACTIVE_PROFILES_PROPERTY_NAME = <span class="string">"spring.profiles.active"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">String</span> DEFAULT_PROFILES_PROPERTY_NAME = <span class="string">"spring.profiles.default"</span>;</span><br></pre></td></tr></table></figure></p>
<p>如果当spring.profiles.active属性被设置时，那么Spring会优先使用该属性对应值来激活Profile。当spring.profiles.active没有被设置时，那么Spring会根据spring.profiles.default属性的对应值来进行Profile进行激活。如果上面的两个属性都没有被设置，那么就不会有任务Profile被激活，只有定义在Profile之外的Bean才会被创建。我们发现这两个属性值其实是Spring容器中定义的属性，而我们在实际的开发中很少会直接操作Spring容器本身，所以如果要设置这两个属性，其实是需要定义在特殊的位置，让Spring容器自动去这些位置读取然后自动设置,这些位置主要为如下定义的地方：</p>
<ul>
<li>作为SpringMVC中的DispatcherServlet的初始化参数</li>
<li>作为Web 应用上下文中的初始化参数</li>
<li>作为JNDI的入口</li>
<li>作为环境变量</li>
<li>作为虚拟机的系统参数</li>
<li>使用@AtivceProfile来进行激活:单测使用</li>
</ul>
<p>上面的前三个Springwebmvc使用的是StandardServletEnvironment其继承StandardEnvironment，初始化时会读取ServletContext和ServletConfig的InitParameter这时就会将我们在配置文件中配置的spring.profiles.active配置项读入spring的上下文中了，然后spring就能根据配置的环境信息加载对应的配置项了。</p>
<p>我们在实际的使用过程中，可以定义默认的profile为开发环境，当实际部署的时候，主需要在实际部署的环境服务器中将spring.profiles.active定义在环境变量中来让Spring自动读取当前环境下的配置信息，这样就可以很好的避免不同环境而频繁修改配置文件的麻烦。</p>
<h2 id="1-2-properties环境变量："><a href="#1-2-properties环境变量：" class="headerlink" title="1.2.properties环境变量："></a>1.2.properties环境变量：</h2><p>在几乎所有的应用中，Properties环境变量都扮演着非常重要的角色，且这些变量值可以来自于各种PropertySource属性源，如：properties文件、jvm虚拟机环境变量、操作系统环境变量、JNDI、Servlet上下文参数、自定义的属性对象、Map对象，等等。Environment环境对象为用户提供了方便的接口，用于配置和使用属性源。</p>
<p>整体类图如下：<br>![environment][1]</p>
<p>刚才提到环境模型具有2个关键方面：profiles和properties，从体系图中可以看出，properties方面的所有功能由PropertyResolver属性解决器来实现，环境模型只是通过装饰模式，在PropertyResolver功能的基础上，额外扩展出了profiles方面的功能。因此在接口方面，Environment继承自PropertyResolver，从实现类方面，AbstractEnvironment类内部持有一个PropertySourcesPropertyResolver类型对象的引用，PropertyResolver和ConfigurablePropertyResolver的接口，都委托调用了PropertySourcesPropertyResolver实现。</p>
<h1 id="2-接口说明"><a href="#2-接口说明" class="headerlink" title="2.接口说明"></a>2.接口说明</h1><p>关于PropertyResolver，我前边的文章<a href="http://wiliam.me/2017/02/25/20170225125742.html">PropertyResolver属性解析器</a>已经进行了详细的解释，因此在本文中，我们重点关注环境模型在profiles方面的实现原理，体系图如下：<br><img src="http://imgcdn.yalongkeji.com/blog/20170225/122833815.jpg" width="300" height="400" alt="singleEnvironment"></p>
<h2 id="2-1-Environment接口："><a href="#2-1-Environment接口：" class="headerlink" title="2.1.Environment接口："></a>2.1.Environment接口：</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">interface</span> <span class="title">Environment</span> <span class="keyword">extends</span> <span class="title">PropertyResolver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment"><span class="markdown">/**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">	 * </span>获取当前环境对象激活的所有profile组。</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">	 * </span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">	 * </span>@return</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">	 */</span></span></span></span><br><span class="line">	<span class="built_in">String</span>[] getActiveProfiles();</span><br><span class="line"></span><br><span class="line">	<span class="comment"><span class="markdown">/**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">	 * </span>获取默认的profile组。</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">	 * </span>如果当前环境对象中激活的组为空（getActiveProfiles()返回空数组）的话，</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">	 * </span>则会启用默认profile组。</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">	 * </span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">	 * </span>@return</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">	 */</span></span></span></span><br><span class="line">	<span class="built_in">String</span>[] getDefaultProfiles();</span><br><span class="line">	</span><br><span class="line">	<span class="comment"><span class="markdown">/**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">	 * </span>判断给定的一个或多个组中，是否存在满足当前环境对象配置的组（任意一个组满足即可）。</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">	 * </span>如：</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">	 * </span>调用acceptsProfiles("p1","!p2")，如果当前环境对象激活了p1，</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">	 * </span>或者没有激活p2（注意是或，满足一个条件即可），则返回true，否则返回false。</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">	 * </span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">	 * </span>@param profiles</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">	 * </span>@return</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">	 */</span></span></span></span><br><span class="line">	boolean acceptsProfiles(<span class="built_in">String</span>... profiles);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="2-2-ConfigurableEnvironment："><a href="#2-2-ConfigurableEnvironment：" class="headerlink" title="2.2.ConfigurableEnvironment："></a>2.2.ConfigurableEnvironment：</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">interface</span> <span class="title">ConfigurableEnvironment</span> <span class="keyword">extends</span> <span class="title">Environment</span>, <span class="title">ConfigurablePropertyResolver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment"><span class="markdown">/**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">	 * </span>重新设置激活的组集合。</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">	 * </span>@param profiles</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">	 */</span></span></span></span><br><span class="line">	<span class="keyword">void</span> setActiveProfiles(<span class="built_in">String</span>... profiles);</span><br><span class="line"></span><br><span class="line">	<span class="comment"><span class="markdown">/**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">	 * </span>向当前激活的组集合中添加一个组。</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">	 * </span>@param profile</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">	 */</span></span></span></span><br><span class="line">	<span class="keyword">void</span> addActiveProfile(<span class="built_in">String</span> profile);</span><br><span class="line"></span><br><span class="line">	<span class="comment"><span class="markdown">/**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">	 * </span>设置默认激活的组集合。激活的组集合为空时会使用默认的组集合。</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">	 * </span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">	 * </span>@param profiles</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">	 */</span></span></span></span><br><span class="line">	<span class="keyword">void</span> setDefaultProfiles(<span class="built_in">String</span>... profiles);</span><br><span class="line"></span><br><span class="line">	<span class="comment"><span class="markdown">/**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">	 * </span>获取当前环境对象中的属性源集合，也就是应用环境变量。</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">	 * </span>属性源集合其实就是一个容纳PropertySource的容器。</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">	 * </span>这个方法提供了直接配置属性源的入口。</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">	 * </span>@return</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">	 */</span></span></span></span><br><span class="line">	MutablePropertySources getPropertySources();</span><br><span class="line"></span><br><span class="line">	<span class="comment"><span class="markdown">/**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">	 * </span>获取操作系统环境变量</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">	 * </span>这个方法提供了直接配置系统环境变量的入口。</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">	 * </span>@return</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">	 */</span></span></span></span><br><span class="line">	<span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">Object</span>&gt; getSystemEnvironment();</span><br><span class="line"></span><br><span class="line">	<span class="comment"><span class="markdown">/**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">	 * </span>获取虚拟机环境变量</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">	 * </span>这个方法提供了直接配置虚拟机环境变量的入口。</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">	 * </span>@return</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">	 */</span></span></span></span><br><span class="line">	<span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">Object</span>&gt; getSystemProperties();</span><br><span class="line"></span><br><span class="line">	<span class="comment"><span class="markdown">/**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">	 * </span>合并指定环境对象中的配置到当前环境对象中。</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">	 * </span>@param parent</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="code">	 */</span></span></span></span><br><span class="line">	<span class="keyword">void</span> merge(ConfigurableEnvironment parent);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="2-3-AbstractEnvironment抽象基类："><a href="#2-3-AbstractEnvironment抽象基类：" class="headerlink" title="2.3.AbstractEnvironment抽象基类："></a>2.3.AbstractEnvironment抽象基类：</h2><p>该类实际上实现了以上接口的所有方法，且额外扩展了自定义属性源的入口：<br>        protected void customizePropertySources(MutablePropertySources propertySources);<br>但是因为初始时属性源集合只是一个空集合，没有任何意义，因为该类定义为抽象基类，不能直接实例化使用。部分代码如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 部分代码</span></span><br><span class="line"><span class="comment"> * @author lixin</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractEnvironment</span> &#123;</span></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 可变属性源集合</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> MutablePropertySources propertySources = <span class="keyword">new</span> MutablePropertySources();</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 在构造方法中直接调用自定义属性源集合</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">AbstractEnvironment</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		customizePropertySources(<span class="keyword">this</span>.propertySources);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 自定义属性源集合，</span></span><br><span class="line"><span class="comment">	 * 默认空实现，子类可重写，用来配置属性源。</span></span><br><span class="line"><span class="comment">	 * </span></span><br><span class="line"><span class="comment">	 * @param propertySources</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">customizePropertySources</span><span class="params">(MutablePropertySources propertySources)</span> </span>&#123;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="2-4-StandardEnvironment："><a href="#2-4-StandardEnvironment：" class="headerlink" title="2.4.StandardEnvironment："></a>2.4.StandardEnvironment：</h2><p>该类定义了Spring应用运行时使用的标准环境，其实就是重写了customizePropertySources方法，先后追加了jvm虚拟机环境变量属性源和操作系统环境变量属性源这两个属性源。当然对于特殊的spring运行环境，我们可以创建标准环境的子类，以实现属性源的扩充，比如：StandardServletEnvironment类，用于web应用环境。<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">StandardEnvironment</span> <span class="keyword">extends</span> <span class="title">AbstractEnvironment</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 操作系统环境变量属性源的名称</span></span><br><span class="line">	public static <span class="keyword">final</span> <span class="type">String</span> <span class="type">SYSTEM_ENVIRONMENT_PROPERTY_SOURCE_NAME</span> = <span class="string">"systemEnvironment"</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// jvm虚拟机系统环境变量属性源的名称</span></span><br><span class="line">	public static <span class="keyword">final</span> <span class="type">String</span> <span class="type">SYSTEM_PROPERTIES_PROPERTY_SOURCE_NAME</span> = <span class="string">"systemProperties"</span>;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">protected</span> void customizePropertySources(<span class="type">MutablePropertySources</span> propertySources) &#123;</span><br><span class="line">		<span class="comment">// 追加虚拟机环境变量属性源</span></span><br><span class="line">		propertySources.addLast(<span class="keyword">new</span> <span class="type">MapPropertySource</span>(<span class="type">SYSTEM_PROPERTIES_PROPERTY_SOURCE_NAME</span>, getSystemProperties()));</span><br><span class="line">		<span class="comment">// 追加操作系统环境变量属性源</span></span><br><span class="line">		propertySources.addLast(<span class="keyword">new</span> <span class="type">SystemEnvironmentPropertySource</span>(<span class="type">SYSTEM_ENVIRONMENT_PROPERTY_SOURCE_NAME</span>, getSystemEnvironment()));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>以上就是spring框架的基本环境体系。<br>[1]:<a href="http://imgcdn.yalongkeji.com/blog/20170225/120820499.jpg" target="_blank" rel="noopener">http://imgcdn.yalongkeji.com/blog/20170225/120820499.jpg</a><br>[2]:<a href="http://imgcdn.yalongkeji.com/blog/20170225/122833815.jpg" target="_blank" rel="noopener">http://imgcdn.yalongkeji.com/blog/20170225/122833815.jpg</a></p>
<blockquote>
<p>想了解更多技术文章信息，请继续关注<a href="http://wiliam.me">wiliam.s Blog</a>，谢谢，欢迎来访！</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> houduan </category>
            
            <category> spring </category>
            
        </categories>
        
        
        <tags>
            
            <tag> spring </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Spring的PropertyResolver属性解析器]]></title>
      <url>http://wiliam.me/2017/02/25/20170225125742.html</url>
      <content type="html"><![CDATA[<blockquote>
<p>对Spring的PropertyResolver属性解析器详细介绍。</p>
</blockquote>
<a id="more"></a>
<h1 id="1-整体介绍"><a href="#1-整体介绍" class="headerlink" title="1.整体介绍"></a>1.整体介绍</h1><p>PropertyResolver属性解析器，主要具有两个功能：</p>
<ol>
<li><p>通过propertyName属性名获取与之对应的propertValue属性值（getProperty）。</p>
</li>
<li><p>把${propertyName:defaultValue}格式的属性占位符，替换为实际的值(resolvePlaceholders)。</p>
</li>
</ol>
<p><strong>注意：</strong>getProperty获取的属性值，全都是调用resolvePlaceholders进行占位符替换后的值。</p>
<p>组件体系图如下：<br><img src="http://imgcdn.yalongkeji.com/blog/20170225/122913758.jpg" width="300" height="400" alt="singleEnvironment"></p>
<h1 id="2-接口介绍"><a href="#2-接口介绍" class="headerlink" title="2.接口介绍"></a>2.接口介绍</h1><h2 id="2-1-PropertyResolver接口："><a href="#2-1-PropertyResolver接口：" class="headerlink" title="2.1.PropertyResolver接口："></a>2.1.PropertyResolver接口：</h2><p>该接口定义了组件所具有的所有功能。其一是通过key获取对应的value，当获取不到value时，有3种选择：返回null值、使用指定的默认值或者抛出一个非法状态异常。获取到的value值默认是String类型，当然也可以认为指定一种类型，这依赖于ConversionService进行类型转换。<br>另外还有一个问题：属性值中可以包含${}格式的占位符，因此，接口添加了另一个功能就是替换属性值中的占位符（注意：属性名是不允许存在占位符的，就算存在，组件也不会当作占位符进行替换）。当占位符无法替换时，也有2种选择：保持原样或者抛出一个非法参数异常。具体接口如下：<br><img src="http://static.oschina.net/uploads/space/2016/0505/153950_RyJe_2624635.png" alt="PropertyResolver类"></p>
<h2 id="2-2-ConfigurablePropertyResolver接口："><a href="#2-2-ConfigurablePropertyResolver接口：" class="headerlink" title="2.2.ConfigurablePropertyResolver接口："></a>2.2.ConfigurablePropertyResolver接口：</h2><p>该接口定义了如何对组件本身进行配置。如：刚刚提到获取value时可以指定任意类型，这依赖于ConversionService进行类型转换，当前接口就提供了对ConversionService的设置和获取。另外，可以配置属性占位符的格式，包括：占位符前缀（默认为”${“）、占位符后缀（默认为”}”）、占位符值分隔符（默认为”:”，用于分隔propertyName和defaultValue）。组件还可以设置哪些属性是必须存在的，还可以校验必须存在的属性是否真的存在（不存在的话会抛出异常）。具体接口如下：<br><img src="http://static.oschina.net/uploads/space/2016/0505/155208_UULx_2624635.png" alt="ConfigurablePropertyResolver接口"></p>
<h2 id="2-3-AbstractPropertyResolver类："><a href="#2-3-AbstractPropertyResolver类：" class="headerlink" title="2.3.AbstractPropertyResolver类："></a>2.3.AbstractPropertyResolver类：</h2><p>上述两个接口的抽象实现类。它实现了ConfigurablePropertyResolver接口的所有方法。关于PropertyResolver接口方法，还有3个getProperty方法需要子类实现（其他重载方法均调用这3个方法）：<br><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span> getProperty(<span class="built_in">String</span> <span class="keyword">key</span>);</span><br><span class="line">&lt;T&gt; T getProperty(<span class="built_in">String</span> <span class="keyword">key</span>, <span class="keyword">Class</span>&lt;T&gt; targetType);</span><br><span class="line">&lt;T&gt; <span class="keyword">Class</span>&lt;T&gt; getPropertyAsClass(<span class="built_in">String</span> <span class="keyword">key</span>, <span class="keyword">Class</span>&lt;T&gt; targetType);</span><br><span class="line">/**</span><br><span class="line">* 当前类还额外定义了一个抽象方法，用于直接返回获取到的value值（不进行占位符替换）。</span><br><span class="line">* 一般的getProperty方法默认都会替换掉value值中的占位符后返回。</span><br><span class="line">*/</span><br><span class="line"><span class="keyword">protected</span> abstract <span class="built_in">String</span> getPropertyAsRawString(<span class="built_in">String</span> <span class="keyword">key</span>);</span><br></pre></td></tr></table></figure></p>
<p>至于替换属性占位符，则借助2个PropertyPlaceholderHelper属性占位符助手（工具类）对象完成，这2个对象一个为严格模式，一个为非严格模式。</p>
<h2 id="2-4-PropertySourcesPropertyResolver类："><a href="#2-4-PropertySourcesPropertyResolver类：" class="headerlink" title="2.4.PropertySourcesPropertyResolver类："></a>2.4.PropertySourcesPropertyResolver类：</h2><p>该类是体系中唯一的完整实现类。它以PropertySources属性源集合（内部持有属性源列表List<propertysource>）为属性值的来源，按序遍历每个PropertySource，获取到一个非null的属性值则返回。</propertysource></p>
<blockquote>
<p>想了解更多技术文章信息，请继续关注<a href="http://wiliam.me">wiliam.s Blog</a>，谢谢，欢迎来访！</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> houduan </category>
            
            <category> spring </category>
            
        </categories>
        
        
        <tags>
            
            <tag> spring </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hexo博客next主题添加Fork me on GitHub]]></title>
      <url>http://wiliam.me/2017/02/11/20170211185643.html</url>
      <content type="html"><![CDATA[<blockquote>
<p>在网上浏览博客时经常看到页面的右上角或左上角有一个fork me on github的按钮，本文将介绍如何实现。</p>
</blockquote>
<a id="more"></a>
<h1 id="1、效果展示"><a href="#1、效果展示" class="headerlink" title="1、效果展示"></a>1、效果展示</h1><p>右上角截图<br><img src="http://imgcdn.yalongkeji.com/blog/20170211/175902504.png" alt="right"><br>左上角截图<br><img src="http://imgcdn.yalongkeji.com/blog/20170211/180101588.png" alt="left"></p>
<h1 id="2、实现"><a href="#2、实现" class="headerlink" title="2、实现"></a>2、实现</h1><h2 id="2-1、样式挑选"><a href="#2-1、样式挑选" class="headerlink" title="2.1、样式挑选"></a>2.1、样式挑选</h2><p><a href="https://github.com/blog/273-github-ribbons" target="_blank" rel="noopener">点我跳转</a>  挑选你自己喜欢的样式。</p>
<h2 id="2-2、next主题实现"><a href="#2-2、next主题实现" class="headerlink" title="2.2、next主题实现"></a>2.2、next主题实现</h2><p>打开文件：<code>hexo博客根目录\themes\next\layout\_layout.swig</code> 找到如下代码块<br><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;&#123; container_class &#125;&#125;</span><span class="xml"><span class="tag"><span class="string"> </span></span></span><span class="template-tag">&#123;% <span class="name"><span class="name">block</span></span> page_class %&#125;</span><span class="xml"><span class="tag"><span class="string"></span></span></span><span class="template-tag">&#123;% <span class="name"><span class="name">endblock</span></span> %&#125;</span><span class="xml"><span class="tag"><span class="string"> "</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"headband"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p>
<p>添加自己喜欢的样式后结果如下<br><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;&#123; container_class &#125;&#125;</span><span class="xml"><span class="tag"><span class="string"> </span></span></span><span class="template-tag">&#123;% <span class="name"><span class="name">block</span></span> page_class %&#125;</span><span class="xml"><span class="tag"><span class="string"></span></span></span><span class="template-tag">&#123;% <span class="name"><span class="name">endblock</span></span> %&#125;</span><span class="xml"><span class="tag"><span class="string"> "</span>&gt;</span></span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"headband"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">href</span>=<span class="string">"https://github.com/wiliam2015"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">style</span>=<span class="string">"position: absolute; top: 0; right: 0; border: 0;"</span> <span class="attr">src</span>=<span class="string">"https://camo.githubusercontent.com/365986a132ccd6a44c23a9169022c0b5c890c387/68747470733a2f2f73332e616d617a6f6e6177732e636f6d2f6769746875622f726962626f6e732f666f726b6d655f72696768745f7265645f6161303030302e706e67"</span> <span class="attr">alt</span>=<span class="string">"Fork me on GitHub"</span> <span class="attr">data-canonical-src</span>=<span class="string">"https://s3.amazonaws.com/github/ribbons/forkme_right_red_aa0000.png"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p>
<p>访问你的本地服务测试看看修改的效果吧。</p>
<h2 id="2-3、小屏幕不显示fork-me-on-github"><a href="#2-3、小屏幕不显示fork-me-on-github" class="headerlink" title="2.3、小屏幕不显示fork me on github"></a>2.3、小屏幕不显示fork me on github</h2><p>按照上面的步骤当屏幕缩小后还会显示fork me on github图标，但这不是我想要的，我希望在大屏下显示，小屏后就不显示了。方法如下：<br>修改文件<code>hexo博客根目录\themes\next\layout\_layout.swig</code>  找到如下代码块<br><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">class</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;&#123; html_class | lower &#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">  </span><span class="template-tag">&#123;% <span class="name"><span class="name">include</span></span> '_partials/head.swig' %&#125;</span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">title</span>&gt;</span></span><span class="template-tag">&#123;% <span class="name"><span class="name">block</span></span> title %&#125;</span><span class="template-tag">&#123;% <span class="name"><span class="name">endblock</span></span> %&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p>
<p>添加如下代码，结果如下<br><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">  </span><span class="template-tag">&#123;% <span class="name"><span class="name">include</span></span> '_partials/head.swig' %&#125;</span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">title</span>&gt;</span></span><span class="template-tag">&#123;% <span class="name"><span class="name">block</span></span> title %&#125;</span><span class="template-tag">&#123;% <span class="name"><span class="name">endblock</span></span> %&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="xml">  .forkme&#123;</span></span><br><span class="line"><span class="xml">		display: none;</span></span><br><span class="line"><span class="xml">	&#125;</span></span><br><span class="line"><span class="xml">  @media (min-width: 768px) &#123;</span></span><br><span class="line"><span class="xml">	.forkme&#123;</span></span><br><span class="line"><span class="xml">		display: inline;</span></span><br><span class="line"><span class="xml">	&#125;</span></span><br><span class="line"><span class="xml">  &#125;</span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p>
<p>最后在2.2节添加的代码块上套上div加上class就行了，如下<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"forkme"</span>&gt;</span><br><span class="line">	&lt;a target=<span class="string">"_blank"</span> href=<span class="string">"https://github.com/wiliam2015"</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">style</span>=<span class="string">"position: absolute; top: 0; right: 0; border: 0;"</span> <span class="attr">src</span>=<span class="string">"https://camo.githubusercontent.com/365986a132ccd6a44c23a9169022c0b5c890c387/68747470733a2f2f73332e616d617a6f6e6177732e636f6d2f6769746875622f726962626f6e732f666f726b6d655f72696768745f7265645f6161303030302e706e67"</span> <span class="attr">alt</span>=<span class="string">"Fork me on GitHub"</span> <span class="attr">data-canonical-src</span>=<span class="string">"https://s3.amazonaws.com/github/ribbons/forkme_right_red_aa0000.png"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line">	&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>最后在试试效果达到自己的想要的了</p>
<blockquote>
<p>想了解更多技术文章信息，请继续关注<a href="http://wiliam.me">wiliam.s Blog</a>，谢谢，欢迎来访！</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> tool </category>
            
            <category> hexo </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[终于等到你<br/><small style='font-size:12px;color:gray;'>————爸爸妈妈的小棉袄</small>]]></title>
      <url>http://wiliam.me/2017/02/11/20170211171202.html</url>
      <content type="html"><![CDATA[<blockquote>
<p>2017年2月1日我和老婆的爱情结晶来到了这个世界，嘿嘿，我的贴心小棉袄，从此自己就当爸爸了。</p>
</blockquote>
<a id="more"></a>
<h1 id="终于等到你"><a href="#终于等到你" class="headerlink" title="终于等到你"></a>终于等到你</h1><p>宝宝你可知道，妈妈为了让你来到这个世界，可是受尽了辛苦，从最初有了你的时候爸爸和妈妈高兴的都睡不着觉到每次孕检时的担心，生怕医生说出有不好结果。在你还在妈妈肚肚的时候，妈妈贫血又缺钙等，为了你的好好的成长妈妈可是吃了很多药和食物进补哦，还有就是妈妈有甲减症状，需要每天都吃药维持指标正常，这些都是为了宝宝你的健康成长。最后都到了40周了，妈妈的羊水都偏少了，宝宝你还是没有动静，爸爸妈妈也是很着急也很担心，你的爷爷奶奶，姥姥姥爷，大姑，大姨等都是很担心，最后胎心监测你的心跳加速了，频率都达到170了，医生说是宫内窘迫，最后不得不进行剖宫产手术让你来到这个世界。最后终于等到你，来到了这个世界和爸爸妈妈见面了，我们一起组成了三口之家，希望宝宝你能好好的体验这个五彩缤纷的世界。</p>
<h1 id="希望"><a href="#希望" class="headerlink" title="希望"></a>希望</h1><p>宝宝为了让你能够健康快乐的成长，爸爸妈妈会努力给你一个健康快乐的成长环境。最后希望宝宝以后健康快乐的成长，踏踏实实做人，活出自己的精彩人生。</p>
]]></content>
      
        <categories>
            
            <category> zatan </category>
            
            <category> 杂谈 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[spring中使用ClassPathXmlApplicationContext解析为BeanDefinition过程]]></title>
      <url>http://wiliam.me/2017/01/27/20170127195643.html</url>
      <content type="html"><![CDATA[<p>首先恭祝大家新年快乐O(∩_∩)O哈哈~</p>
<blockquote>
<p>BeanDefinition是Spring配置信息的内部对象映射，ClassPathXmlApplicationContext是ApplicatinContext和BeanFactory接口实现之一，是spring最经常使用的应用上下文初始化spring框架类，那么它是如何把xml配置文件转换成BeanDefinition对象的呢，本文将介绍。</p>
</blockquote>
<a id="more"></a>
<h1 id="入口"><a href="#入口" class="headerlink" title="入口"></a>入口</h1><p>我们使用如下代码进行跟踪，查看如何初始化的<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">ApplicationContext bf</span> = new ClassPathXmlApplicationContext(<span class="string">"classpath:spring/applicationContext.xml"</span>);</span><br></pre></td></tr></table></figure></p>
<p>ClassPathXmlApplicationContext在初始化时会调用好多方法，有的会直接调用父类，父类会再调用子类等方法，所以为了更好的理解初始化，对ClassPathXmlApplicationContext的类继承结构有必要好好了解。<br><img src="http://imgcdn.yalongkeji.com/%E5%88%9D%E5%A7%8B%E5%8C%96.jpg" alt="类继承结构"></p>
<h1 id="初始化配置分析"><a href="#初始化配置分析" class="headerlink" title="初始化配置分析"></a>初始化配置分析</h1><p>一层层跟进ClassPathXmlApplicationContext的构造方法找到如下构造方法<br><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public <span class="constructor">ClassPathXmlApplicationContext(String[] <span class="params">configLocations</span>, <span class="params">boolean</span> <span class="params">refresh</span>, ApplicationContext <span class="params">parent</span>)</span></span><br><span class="line">			throws BeansException &#123;</span><br><span class="line">                <span class="comment">//进行配置文件解析器的初始化</span></span><br><span class="line">		super(parent);</span><br><span class="line">                <span class="comment">//将配置文件路径信息转换成对应的resource对象</span></span><br><span class="line">		set<span class="constructor">ConfigLocations(<span class="params">configLocations</span>)</span>;</span><br><span class="line">                <span class="comment">//进行全流程初始化</span></span><br><span class="line">		<span class="keyword">if</span> (refresh) &#123;</span><br><span class="line">			refresh<span class="literal">()</span>;</span><br><span class="line">		&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>可以看到上面最重要的方法是refresh方法，此方法包含了整个spring流程初始化，进一步跟踪如下：<br><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">public void refresh<span class="literal">()</span> throws BeansException, IllegalStateException &#123;</span><br><span class="line">		synchronized (this.startupShutdownMonitor) &#123;</span><br><span class="line">			<span class="comment">// Prepare this context for refreshing.</span></span><br><span class="line">			prepare<span class="constructor">Refresh()</span>;</span><br><span class="line"></span><br><span class="line">			<span class="comment">// Tell the subclass to refresh the internal bean factory.</span></span><br><span class="line">			ConfigurableListableBeanFactory beanFactory = obtain<span class="constructor">FreshBeanFactory()</span>;</span><br><span class="line"></span><br><span class="line">			<span class="comment">// Prepare the bean factory for use in this context.</span></span><br><span class="line">			prepare<span class="constructor">BeanFactory(<span class="params">beanFactory</span>)</span>;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				<span class="comment">// Allows post-processing of the bean factory in context subclasses.</span></span><br><span class="line">				post<span class="constructor">ProcessBeanFactory(<span class="params">beanFactory</span>)</span>;</span><br><span class="line"></span><br><span class="line">				<span class="comment">// Invoke factory processors registered as beans in the context.</span></span><br><span class="line">				invoke<span class="constructor">BeanFactoryPostProcessors(<span class="params">beanFactory</span>)</span>;</span><br><span class="line"></span><br><span class="line">				<span class="comment">// Register bean processors that intercept bean creation.</span></span><br><span class="line">				register<span class="constructor">BeanPostProcessors(<span class="params">beanFactory</span>)</span>;</span><br><span class="line"></span><br><span class="line">				<span class="comment">// Initialize message source for this context.</span></span><br><span class="line">				init<span class="constructor">MessageSource()</span>;</span><br><span class="line"></span><br><span class="line">				<span class="comment">// Initialize event multicaster for this context.</span></span><br><span class="line">				init<span class="constructor">ApplicationEventMulticaster()</span>;</span><br><span class="line"></span><br><span class="line">				<span class="comment">// Initialize other special beans in specific context subclasses.</span></span><br><span class="line">				on<span class="constructor">Refresh()</span>;</span><br><span class="line"></span><br><span class="line">				<span class="comment">// Check for listener beans and register them.</span></span><br><span class="line">				register<span class="constructor">Listeners()</span>;</span><br><span class="line"></span><br><span class="line">				<span class="comment">// Instantiate all remaining (non-lazy-init) singletons.</span></span><br><span class="line">				finish<span class="constructor">BeanFactoryInitialization(<span class="params">beanFactory</span>)</span>;</span><br><span class="line"></span><br><span class="line">				<span class="comment">// Last step: publish corresponding event.</span></span><br><span class="line">				finish<span class="constructor">Refresh()</span>;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			catch (BeansException ex) &#123;</span><br><span class="line">				<span class="keyword">if</span> (logger.is<span class="constructor">WarnEnabled()</span>) &#123;</span><br><span class="line">					logger.warn(<span class="string">"Exception encountered during context initialization - "</span> +</span><br><span class="line">							<span class="string">"cancelling refresh attempt: "</span> + ex);</span><br><span class="line">				&#125;</span><br><span class="line"></span><br><span class="line">				<span class="comment">// Destroy already created singletons to avoid dangling resources.</span></span><br><span class="line">				destroy<span class="constructor">Beans()</span>;</span><br><span class="line"></span><br><span class="line">				<span class="comment">// Reset 'active' flag.</span></span><br><span class="line">				cancel<span class="constructor">Refresh(<span class="params">ex</span>)</span>;</span><br><span class="line"></span><br><span class="line">				<span class="comment">// Propagate exception to caller.</span></span><br><span class="line">				throw ex;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure></p>
<p>可以看到refresh方法定义了各个子方法进行加载，流程很清晰，其中<br><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Tell the subclass to refresh the internal bean factory.</span></span><br><span class="line">ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();</span><br></pre></td></tr></table></figure></p>
<p>进行了配置文件解析的工作，继续跟踪obtainFreshBeanFactory方法<br><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">protected ConfigurableListableBeanFactory obtain<span class="constructor">FreshBeanFactory()</span> &#123;</span><br><span class="line">		refresh<span class="constructor">BeanFactory()</span>;</span><br><span class="line">		ConfigurableListableBeanFactory beanFactory = get<span class="constructor">BeanFactory()</span>;</span><br><span class="line">		<span class="keyword">if</span> (logger.is<span class="constructor">DebugEnabled()</span>) &#123;</span><br><span class="line">			logger.debug(<span class="string">"Bean factory for "</span> + get<span class="constructor">DisplayName()</span> + <span class="string">": "</span> + beanFactory);</span><br><span class="line">		&#125;</span><br><span class="line">		return beanFactory;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure></p>
<p>obtainFreshBeanFactory又调用了refreshBeanFactory方法但继续点击refreshBeanFactory方法是个抽象方法，spring给的注释是交给了子类实现，根据我们上面写的继承结构，最后在AbstractRefreshableApplicationContext类中实现了refreshBeanFactory方法，如下：<br><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">protected final void refresh<span class="constructor">BeanFactory()</span> throws BeansException &#123;</span><br><span class="line">		<span class="keyword">if</span> (has<span class="constructor">BeanFactory()</span>) &#123;</span><br><span class="line">			destroy<span class="constructor">Beans()</span>;</span><br><span class="line">			close<span class="constructor">BeanFactory()</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			DefaultListableBeanFactory beanFactory = create<span class="constructor">BeanFactory()</span>;</span><br><span class="line">			beanFactory.set<span class="constructor">SerializationId(<span class="params">getId</span>()</span>);</span><br><span class="line">			customize<span class="constructor">BeanFactory(<span class="params">beanFactory</span>)</span>;</span><br><span class="line">			load<span class="constructor">BeanDefinitions(<span class="params">beanFactory</span>)</span>;</span><br><span class="line">			synchronized (this.beanFactoryMonitor) &#123;</span><br><span class="line">				this.beanFactory = beanFactory;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		catch (IOException ex) &#123;</span><br><span class="line">			throw <span class="keyword">new</span> <span class="constructor">ApplicationContextException(<span class="string">"I/O error parsing bean definition source for "</span> + <span class="params">getDisplayName</span>()</span>, ex);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure></p>
<p>可以看到AbstractRefreshableApplicationContext对refreshBeanFactory实现逻辑是先判断是否已经生成了BeanFactory，如果生成需要先清理已经生成的BeanFactory，然后在进行初始化。其中<code>loadBeanDefinitions(beanFactory);</code>就是我们要找的方法了，从命名我们也可以猜测到进行BeanDefinition装载。我们继续跟踪又是一个抽象方法交给子类实现，根据我们刚才的类结构在<code>AbstractXmlApplicationContext</code>类中对其实现，方法如下<br><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">protected void load<span class="constructor">BeanDefinitions(DefaultListableBeanFactory <span class="params">beanFactory</span>)</span> throws BeansException, IOException &#123;</span><br><span class="line">		<span class="comment">// Create a new XmlBeanDefinitionReader for the given BeanFactory.</span></span><br><span class="line">		XmlBeanDefinitionReader beanDefinitionReader = <span class="keyword">new</span> <span class="constructor">XmlBeanDefinitionReader(<span class="params">beanFactory</span>)</span>;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// Configure the bean definition reader with this context's</span></span><br><span class="line">		<span class="comment">// resource loading environment.</span></span><br><span class="line">		beanDefinitionReader.set<span class="constructor">Environment(<span class="params">this</span>.<span class="params">getEnvironment</span>()</span>);</span><br><span class="line">		beanDefinitionReader.set<span class="constructor">ResourceLoader(<span class="params">this</span>)</span>;</span><br><span class="line">		beanDefinitionReader.set<span class="constructor">EntityResolver(<span class="params">new</span> ResourceEntityResolver(<span class="params">this</span>)</span>);</span><br><span class="line"></span><br><span class="line">		<span class="comment">// Allow a subclass to provide custom initialization of the reader,</span></span><br><span class="line">		<span class="comment">// then proceed with actually loading the bean definitions.</span></span><br><span class="line">		init<span class="constructor">BeanDefinitionReader(<span class="params">beanDefinitionReader</span>)</span>;</span><br><span class="line">		load<span class="constructor">BeanDefinitions(<span class="params">beanDefinitionReader</span>)</span>;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure></p>
<p>可以看到此方法又调用了字方法loadBeanDefinitions(beanDefinitionReader);，此方法内容如下：<br><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">protected void load<span class="constructor">BeanDefinitions(XmlBeanDefinitionReader <span class="params">reader</span>)</span> throws BeansException, IOException &#123;</span><br><span class="line">		Resource<span class="literal">[]</span> configResources = get<span class="constructor">ConfigResources()</span>;</span><br><span class="line">		<span class="keyword">if</span> (configResources != null) &#123;</span><br><span class="line">			reader.load<span class="constructor">BeanDefinitions(<span class="params">configResources</span>)</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		String<span class="literal">[]</span> configLocations = get<span class="constructor">ConfigLocations()</span>;</span><br><span class="line">		<span class="keyword">if</span> (configLocations != null) &#123;</span><br><span class="line">			reader.load<span class="constructor">BeanDefinitions(<span class="params">configLocations</span>)</span>;</span><br><span class="line">		&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>可以看到loadBeanDefinitions方法使用XmlBeanDefinitionReader 进行配置文件读取，感兴趣的读者可以进去进行追踪，至此spring配置文件初始化加载完毕。</p>
<blockquote>
<p>想了解更多技术文章信息，请继续关注<a href="http://wiliam.me">wiliam.s Blog</a>，谢谢，欢迎来访！</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> houduan </category>
            
            <category> spring </category>
            
        </categories>
        
        
        <tags>
            
            <tag> spring </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[java中事件机制]]></title>
      <url>http://wiliam.me/2017/01/21/20170121101403.html</url>
      <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>最近在学习spring框架源码，看到了其中涉及事件处理，打算研究下事件的实现方式，所以从头学起，研究java中的事件实现机制。而且现实应用中很多都需要使用事件机制，而且使用事件机制也能对应用进行一定程度解耦。所以有必要好好了解下java中的事件机制。</p>
<a id="more"></a>
<h1 id="场景假设"><a href="#场景假设" class="headerlink" title="场景假设"></a>场景假设</h1><p>我们以网购12306火车票为场景，假设以下一些操作。<br>用户购买火车票成功后，会触发发送短信操作告知用户买了哪个车的票。<br>用户购买火车票成功后，会触发发送邮件操作告知用户买了哪个车的票。</p>
<h1 id="重点理解"><a href="#重点理解" class="headerlink" title="重点理解"></a>重点理解</h1><p>针对上面的场景，我们分析可以有如下几个对象或操作。<br>1.火车票对象，2.购买成功发短信操作，3.购买成功发邮件操作。<br>事件概念理解：<br><strong>事件源：</strong>触发事件的对象，例如购买火车票成功后发短信的火车票就是就是事件源。<br><strong>事件：</strong>对事件源进行操作产生的事件，例如购买成功后会产生发短信事件和发邮件事件。<br><strong>事件监听器：</strong>对事件源产生的事件进行处理，可以对不同的事件设置不同的事件监听器，处理不同事件。<br><strong>事件派发器：</strong>事件派发器主要处理事件的派发和事件监听器的管理，注册和删除事件监听器等。 </p>
<p>目前java中EventObject对应事件，提供事件的基类，任何自定义事件都集成自该类；<br>EventListener对应事件监听器，提供事件监听器者接口，任何自定义的事件监听器都实现了该接口。</p>
<p>事件派发器java中没有提供，需要自己去实现。</p>
<h1 id="自己写代码实现"><a href="#自己写代码实现" class="headerlink" title="自己写代码实现"></a>自己写代码实现</h1><p>以网购火车票为例，整体代码结构如图<br><img src="http://imgcdn.yalongkeji.com/event.png" alt="eventDemo"></p>
<h2 id="TrainTicket事件源类"><a href="#TrainTicket事件源类" class="headerlink" title="TrainTicket事件源类"></a>TrainTicket事件源类</h2><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">package me.wiliam;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 事件源类</span></span><br><span class="line"><span class="comment"> * @author wiliam</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TrainTicket</span> &#123;</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">String</span> userName;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">String</span> ticketName;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">getUserName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> userName;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserName</span><span class="params">(<span class="keyword">String</span> userName)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.userName = userName;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">getTicketName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> ticketName;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTicketName</span><span class="params">(<span class="keyword">String</span> ticketName)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.ticketName = ticketName;</span><br><span class="line">	&#125; </span><br><span class="line">	</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="TrainTicketEvent购票事件基类"><a href="#TrainTicketEvent购票事件基类" class="headerlink" title="TrainTicketEvent购票事件基类"></a>TrainTicketEvent购票事件基类</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> me.wiliam;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.<span class="type">EventObject</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 购票事件基类</span></span><br><span class="line"><span class="comment"> * @author wiliam</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">TrainTicketEvent</span> <span class="keyword">extends</span> <span class="title">EventObject</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> static <span class="keyword">final</span> long serialVersionUID = <span class="number">1</span>L;</span><br><span class="line"></span><br><span class="line">	public <span class="type">TrainTicketEvent</span>(<span class="type">TrainTicket</span> source) &#123;</span><br><span class="line">		<span class="keyword">super</span>(source);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="SendEmailEvent发送邮件事件"><a href="#SendEmailEvent发送邮件事件" class="headerlink" title="SendEmailEvent发送邮件事件"></a>SendEmailEvent发送邮件事件</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> me.wiliam;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 发送邮件事件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wiliam</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SendEmailEvent</span> <span class="keyword">extends</span> <span class="title">TrainTicketEvent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> TrainTicket trainTicket;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">SendEmailEvent</span><span class="params">(TrainTicket source)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>(source);</span><br><span class="line">		<span class="keyword">this</span>.trainTicket = source;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> TrainTicket <span class="title">getTrainTicket</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> trainTicket;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getEmailData</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(trainTicket != <span class="keyword">null</span>)&#123;</span><br><span class="line">			String data = <span class="string">"发送邮件："</span>+trainTicket.getUserName() + <span class="string">"您好，您已成功购买火车票"</span>+trainTicket.getTicketName();</span><br><span class="line">			<span class="keyword">return</span> data;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="SendSMSEvent发送短信事件"><a href="#SendSMSEvent发送短信事件" class="headerlink" title="SendSMSEvent发送短信事件"></a>SendSMSEvent发送短信事件</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> me.wiliam;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 发送短信事件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> huhailong</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SendSMSEvent</span> <span class="keyword">extends</span> <span class="title">TrainTicketEvent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">	<span class="keyword">private</span> TrainTicket trainTicket;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">SendSMSEvent</span><span class="params">(TrainTicket source)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>(source);</span><br><span class="line">		<span class="keyword">this</span>.trainTicket = source;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> TrainTicket <span class="title">getTrainTicket</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> trainTicket;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getSMSData</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(trainTicket != <span class="keyword">null</span>)&#123;</span><br><span class="line">			String data = <span class="string">"发送短信："</span>+trainTicket.getUserName() + <span class="string">"您好，您已成功购买火车票"</span>+trainTicket.getTicketName();</span><br><span class="line">			<span class="keyword">return</span> data;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="TrainTicketListener火车票事件监听器接口"><a href="#TrainTicketListener火车票事件监听器接口" class="headerlink" title="TrainTicketListener火车票事件监听器接口"></a>TrainTicketListener火车票事件监听器接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> me.wiliam;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.EventListener;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 火车票事件监听器接口</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wiliam</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TrainTicketListener</span> <span class="keyword">extends</span> <span class="title">EventListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">handEvent</span><span class="params">(TrainTicketEvent tte)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="EmailAndSMSListener同时处理发送邮件事件和短信事件"><a href="#EmailAndSMSListener同时处理发送邮件事件和短信事件" class="headerlink" title="EmailAndSMSListener同时处理发送邮件事件和短信事件"></a>EmailAndSMSListener同时处理发送邮件事件和短信事件</h2><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> me.wiliam;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 同时处理发送邮件事件和短信事件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wiliam</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmailAndSMSListener</span> <span class="keyword">implements</span> <span class="title">TrainTicketListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">handEvent</span><span class="params">(TrainTicketEvent tte)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span>(tte <span class="keyword">instanceof</span> SendEmailEvent)&#123;</span><br><span class="line">			SendEmailEvent see = (SendEmailEvent)tte;</span><br><span class="line">			System.out.println(see.getEmailData());</span><br><span class="line">		&#125;<span class="function"><span class="keyword">else</span> <span class="title">if</span><span class="params">(tte <span class="keyword">instanceof</span> SendSMSEvent)</span></span>&#123;</span><br><span class="line">			SendSMSEvent sse = (SendSMSEvent)tte;</span><br><span class="line">			System.out.println(sse.getSMSData());</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			System.out.println(<span class="string">"发送未知事件，无法处理"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="config-properties配置文件"><a href="#config-properties配置文件" class="headerlink" title="config.properties配置文件"></a>config.properties配置文件</h2><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#灵活使用监听器，多个可以用逗号间隔</span></span><br><span class="line"><span class="attr">listener</span>=me.wiliam.EmailAndSMSListener</span><br></pre></td></tr></table></figure>
<h2 id="TestBuyTrainTicketSuccessEvent事件测试类"><a href="#TestBuyTrainTicketSuccessEvent事件测试类" class="headerlink" title="TestBuyTrainTicketSuccessEvent事件测试类"></a>TestBuyTrainTicketSuccessEvent事件测试类</h2><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">package me.wiliam;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 事件测试类</span></span><br><span class="line"><span class="comment"> * @author wiliam</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">public <span class="keyword">class</span> TestBuyTrainTicketSuccessEvent &#123;</span><br><span class="line"></span><br><span class="line">	public static void main(String<span class="literal">[]</span> args) &#123;</span><br><span class="line">		TestBuyTrainTicketSuccessEvent  tbtts = <span class="keyword">new</span> <span class="constructor">TestBuyTrainTicketSuccessEvent()</span>;</span><br><span class="line">		tbtts.buy<span class="constructor">SuccessTicket()</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> void buy<span class="constructor">SuccessTicket()</span>&#123;</span><br><span class="line">		TrainTicket tt = <span class="keyword">new</span> <span class="constructor">TrainTicket()</span>;</span><br><span class="line">		tt.set<span class="constructor">TicketName(<span class="string">"【北京---济南】"</span>)</span>;</span><br><span class="line">		tt.set<span class="constructor">UserName(<span class="string">"小明"</span>)</span>;</span><br><span class="line">		<span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"购票成功"</span>);</span><br><span class="line">		<span class="module-access"><span class="module"><span class="identifier">TrainTicketPublisher</span>.</span></span>instance<span class="literal">()</span>.publish<span class="constructor">Event(<span class="params">new</span> SendEmailEvent(<span class="params">tt</span>)</span>);</span><br><span class="line">		<span class="module-access"><span class="module"><span class="identifier">TrainTicketPublisher</span>.</span></span>instance<span class="literal">()</span>.publish<span class="constructor">Event(<span class="params">new</span> SendSMSEvent(<span class="params">tt</span>)</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行上面的测试类，结果如下：<br><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">购票成功</span><br><span class="line">发送邮件：小明您好，您已成功购买火车票【北京<span class="comment">---济南】</span></span><br><span class="line">发送短信：小明您好，您已成功购买火车票【北京<span class="comment">---济南】</span></span><br></pre></td></tr></table></figure></p>
<h1 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h1><p>首先如果想要增加其它的监听器，在配置文件中配置下就可以了。<br>针对上面的事件发布器中对事件监听的处理完全可以单独启动一个线程，一直监听事件队列，有事件消息就处理，这样就可以即时响应各种消息了，解耦一定的程序模块。</p>
<h1 id="代码下载"><a href="#代码下载" class="headerlink" title="代码下载"></a>代码下载</h1><p>代码已上传到我的github上:<a href="https://github.com/wiliam2015/EventDemo" target="_blank" rel="noopener">https://github.com/wiliam2015/EventDemo</a></p>
<blockquote>
<p>想了解更多技术文章信息，请继续关注<a href="http://wiliam.me">wiliam.s Blog</a>，谢谢，欢迎来访！</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> houduan </category>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
            <tag> 事件 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Spring事务管理详解-Spring对事务支持]]></title>
      <url>http://wiliam.me/2017/01/15/20170115111731.html</url>
      <content type="html"><![CDATA[<blockquote>
<p>上一章节讲解了数据库的基本事务知识，这些知识是学习Spring事务管理的基础。下面讲解Spring是如何管理事务的。</p>
</blockquote>
<a id="more"></a>
<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>Spring为事务管理提供了一致的编程模板，在高层次简历了统一的事务抽象。其意思就是，当我们使用SpringJDBC，Hibernate、JPA还是iBatis这些框架时，Spring都让我们可以用统一的编程模型进行事务管理。</p>
<h1 id="Spring事务管理的关键抽象"><a href="#Spring事务管理的关键抽象" class="headerlink" title="Spring事务管理的关键抽象"></a>Spring事务管理的关键抽象</h1><p>在Spring事务管理的高层抽象接口主要包括3个接口，分别是<code>PlatformTransactionManager</code>，<code>TransactionDefinition</code>和<code>TransactionStatus</code>，都在<code>org.springframework.transaction</code>包中。三者关系如下：<br><img src="http://imgcdn.yalongkeji.com/blog/20170115/115150708.jpg" alt="spring事务抽象"></p>
<h2 id="TransactionDefinition"><a href="#TransactionDefinition" class="headerlink" title="TransactionDefinition"></a>TransactionDefinition</h2><p>TransactionDefinition用于描述事务的隔离级别，超时时间，是否为只读事务和事务传播规则等控制事务具体行为的事务属性，这些事务属性可以通过XML配置或注解描述提供，也可以手工编程设置。<br>TransactionDefinition定义了Spring兼容的事务属性，这些属性对事务管理控制的若干方面进行配置。<br>spring可以通过XML和注解元数据方式为一个有事务要求的服务类方法配置事务属性，这些信息作为Spring事务管理框架的“输入”，然后spring会按照配置的事务属性信息，为目标方法提供相应的事务支持。</p>
<ul>
<li><strong>事务隔离：</strong><br>当前事务和其他事务的隔离程度。在TransactionDefinition接口中，定义了和<code>java.sql.Connection</code>接口中同名的4个隔离级别，如下<figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">   <span class="type">int</span> ISOLATION_DEFAULT = <span class="number">-1</span>;//默认的隔离级别</span><br><span class="line">   </span><br><span class="line"><span class="type">int</span> ISOLATION_READ_UNCOMMITTED = <span class="keyword">Connection</span>.TRANSACTION_READ_UNCOMMITTED;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> ISOLATION_READ_COMMITTED = <span class="keyword">Connection</span>.TRANSACTION_READ_COMMITTED;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> ISOLATION_REPEATABLE_READ = <span class="keyword">Connection</span>.TRANSACTION_REPEATABLE_READ;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> ISOLATION_SERIALIZABLE = <span class="keyword">Connection</span>.TRANSACTION_SERIALIZABLE;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>上面的Connection类就是<code>java.sql.Connection</code>接口，可以看到spring对隔离级别的常量定义就是起了个别名。上面的隔离级别可以参考<a href="http://wiliam.me/2017/01/07/20170107160647.html">Spring事务管理详解-事务基础</a>中说明的隔离级别定义。<br>需要说明的是TransactionDefinition定义的默认的隔离级别，ISOLATION_DEFAULT，它表示使用底层数据库的默认隔离级别。</p>
<ul>
<li><strong>事务传播：</strong><br>通常在一个事务中执行的所有代码都会运行于同一事务上下文中。但Spring也提供了几个可选的事务传播类型，就是在调用新方法时是否保持和当前方法同一个事务或者新开启事务或挂起当前事务等<br>当我们调用一个机遇Spring的service接口方法时，它将运行于spring管理的事务环境中，service接口方法可能会在内部调用其他的service接口方法来完成同一个业务完整操作，因此就会产生服务接口方法嵌套调用的情况，spring通过事务创博行为控制当前的事务如何传播到被嵌套调用的目标服务接口方法中。<br>spring在TransactionDefinition接口总规定了7种事务传播行为，规定事务方法和事务方法发生嵌套调用时，事务如何进行传播，如下：<br>PROPAGATION_REQUIRED–支持当前事务，如果当前没有事务，就新建一个事务。这是最常见的选择。<br>PROPAGATION_SUPPORTS–支持当前事务，如果当前没有事务，就以非事务方式执行。<br>PROPAGATION_MANDATORY–支持当前事务，如果当前没有事务，就抛出异常。<br>PROPAGATION_REQUIRES_NEW–新建事务，如果当前存在事务，把当前事务挂起。<br>PROPAGATION_NOT_SUPPORTED–以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。<br>PROPAGATION_NEVER–以非事务方式执行，如果当前存在事务，则抛出异常。<br>PROPAGATION_NESTED–如果当前存在事务，则在嵌套事务内运行。如果没有事务，则只需与PROPAGATION_REQUIRE类似操作。使用此传播行为时，底层的数据源必须基于JDBC3.0，并实现了支持保存点事务机制。</li>
<li><strong>事务超时：</strong><br>事务在超时前能运行多久，超过时间后，事务呗回滚。该事务超时不是所有的事务管理器支持的，如果不支持，设置此值时，将抛出异常。</li>
<li><strong>只读状态：</strong><br>只读事务不修改任何数据，我们可以对事务应用一些优化措施，提高运行性能。如果在只读事务中更改数据将抛异常。</li>
</ul>
<h2 id="TransactionStatus"><a href="#TransactionStatus" class="headerlink" title="TransactionStatus"></a>TransactionStatus</h2><p>TransactionStatus代表一个事务的具体运行状态。事务管理器可以通过该借款获取事务运行期的状态信息，也可以通过该接口间接的回滚事务，它相比于在抛出异常时回滚事务的方式更具可控性。该特性需要运行在JDBC3.0支持savepoint（保存点）的jdbc驱动上。</p>
<h2 id="PlatformTransactionManager"><a href="#PlatformTransactionManager" class="headerlink" title="PlatformTransactionManager"></a>PlatformTransactionManager</h2><p>通过JDBC的事务管理知识，我们知道事务只能被提交或回滚（或回滚到摸个保存点提交）spring的PlatformTransactionManager高层事务抽象接口，很好的描述了事务管理这个概念。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.springframework.transaction;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PlatformTransactionManager</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function">TransactionStatus <span class="title">getTransaction</span><span class="params">(TransactionDefinition definition)</span> <span class="keyword">throws</span> TransactionException</span>;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">commit</span><span class="params">(TransactionStatus status)</span> <span class="keyword">throws</span> TransactionException</span>;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">rollback</span><span class="params">(TransactionStatus status)</span> <span class="keyword">throws</span> TransactionException</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>可以看到PlatformTransactionManager只定以了3个接口方法，简单的获取事务，提交事务和回滚事务。spring将事务管理委托底层具体的持久化实现框架去完成，因此针对不同的框架spring有的不同的接口实现类，具体如下：</p>
<table>
<thead>
<tr>
<th>事务</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>org.springframework.orm.jpa.JpaTransactionManager</td>
<td>使用JPA进行持久化时，使用该事务管理器</td>
</tr>
<tr>
<td>org.springframework.orm.hibernate3.HibernateTransactionManager</td>
<td>使用Hibernate3.0版本时使用该事务管理器</td>
</tr>
<tr>
<td>org.springframework.jdbc.datasource.DataSourceTransactionManager</td>
<td>使用SpringJDBC或iBatis等基于DataSource数据源的持久化技术时，使用该事务管理器</td>
</tr>
<tr>
<td>org.springframework.orm.jdo.JdoTransactionManager</td>
<td>使用JDO进行持久化时，使用该事务管理器</td>
</tr>
<tr>
<td>org.springframework.transaction.jta.JtaTransactionManager</td>
</tr>
</tbody>
</table>
<p>上面的事务管理器都是对特定事务实现框架的代理，这样我们就可以通过spring所提交的高级抽象对不同种类的实现使用相同方式进行管理，而不用关心具体实现。<br>要实现事务管理，首先要在spring中配置好对应的事务管理器，为事务管理器指定数据源和一些事务管理控制属性。</p>
<blockquote>
<p>想了解更多技术文章信息，请继续关注<a href="http://wiliam.me">wiliam.s Blog</a>，谢谢，欢迎来访！</p>
</blockquote>
<hr>
<p>参考资料<br>《Spring3.x企业应用开发实战》陈雄华 林开雄著</p>
]]></content>
      
        <categories>
            
            <category> houduan </category>
            
            <category> spring </category>
            
        </categories>
        
        
        <tags>
            
            <tag> spring </tag>
            
            <tag> 事务 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Spring事务管理详解-事务基础]]></title>
      <url>http://wiliam.me/2017/01/07/20170107160647.html</url>
      <content type="html"><![CDATA[<blockquote>
<p>目前JavaWeb系统的框架容器基本都是使用Spring管理的，其中事务管理也是比较重要的，之前也是看过，网上介绍的文章也很多，但毕竟不是自己的，也借此机会总结下Spring对事务的管理，希望对大家有用。</p>
</blockquote>
<a id="more"></a>
<h1 id="1-事务基础"><a href="#1-事务基础" class="headerlink" title="1.事务基础"></a>1.事务基础</h1><h2 id="1-1-事务的基本概念"><a href="#1-1-事务的基本概念" class="headerlink" title="1.1.事务的基本概念"></a>1.1.事务的基本概念</h2><p><strong>数据库事务(Database Transaction)</strong>：是指作为单个逻辑工作单元执行的一系列操作，要么完全地执行，要么完全地不执行。 “一荣俱荣，一损俱损”最能体现事务的的思想。也就是这些操作要么所有执行成功，所有执行失败。<br>数据库事务需要满足4个特性：原子性(Atomic)，一致性(Consistency)，隔离性(Isolation)，持久性(Durabiliy),简称为ACID原则。</p>
<ul>
<li><strong>原子性</strong>：表示组成一个事务的多个数据库操作是一个不可分割的原子单元，只有所有的操作执行成功，整个事务才能提交，若事务中的任务一个数据库操作失败，已经执行的任务操作都必须撤销，让数据库返回到初始状态。</li>
<li><strong>一致性</strong>：事务操作成功后，数据库所处的状态和它的业务规则是一致的，即数据不会被破坏。如在上超市买东西付款时，从你的账户扣钱，超市的账户价钱，但不管操作是否成功，你和超市的存款总额应是不变的。</li>
<li><strong>隔离性</strong>：在并发数据操作时，不同的事务拥有各自的数据空间，它们的操作不会对对方产生干扰。说白了就是同时存在两个事务一起操作数据时，都会在各自的事务空间中，对数据的操作不会对对方产生干扰。但，各个数据库实现也没有做到完全无干扰，数据库规定了多种事务隔离级别，不同隔离级别对应不同的干扰程度，隔离级别越高，数据一致性越好，但并发性越弱。</li>
<li><strong>持久性</strong>：一旦事务提交成功后，事务中所有的数据操作都必须持久化到数据库中，即使提交事务后，数据库马上崩溃，在数据库重启时，也必须能保证通过某种机制恢复数据。</li>
</ul>
<p>上面这些特性，数据的“一致性”是最终目标，其他特性都是为他服务。</p>
<h2 id="1-2-事务并发带来的问题"><a href="#1-2-事务并发带来的问题" class="headerlink" title="1.2.事务并发带来的问题"></a>1.2.事务并发带来的问题</h2><p>同一时刻有可能有多个事务访问数据库的同一个资源，如果没有采取必要的隔离措施，就会导致各种并发问题，破坏数据的完整性。总共包括5类，3种数据读取问题(脏读、不可重复读和幻象读)以及2类数据更新问题(第一类丢失更新和第二类丢失更新)，下面分别说下</p>
<ul>
<li><strong>脏读(dirty read)</strong><br>事务A读取事务B尚未提交的更改数据，并在这个数据的基础上操作。如果这时正好事务B回滚了，那么事务A读取到数据就是脏数据，也即是脏读。</li>
</ul>
<table>
<thead>
<tr>
<th>时间</th>
<th>转账事务A</th>
<th>取款事务B</th>
</tr>
</thead>
<tbody>
<tr>
<td>T1</td>
<td></td>
<td>开始事务</td>
</tr>
<tr>
<td>T2</td>
<td>开始事务</td>
<td></td>
</tr>
<tr>
<td>T3</td>
<td></td>
<td>查询账户余额为1000元</td>
</tr>
<tr>
<td>T4</td>
<td></td>
<td>取出500元把余额改为500元</td>
</tr>
<tr>
<td>T5</td>
<td>查询账户余额为500元(脏读)</td>
<td></td>
</tr>
<tr>
<td>T6</td>
<td></td>
<td>撤销事务余额恢复为1000元</td>
</tr>
<tr>
<td>T7</td>
<td>汇入100元把余额改为600元</td>
<td></td>
</tr>
<tr>
<td>T8</td>
<td>提交事务</td>
</tr>
</tbody>
</table>
<p>脏读对Oracle中不会发生，因为Oracle数据库使用了数据库版本的机制，在回滚段为数据的每个变化都保存一个版本，使数据的更改不影响数据的读取。</p>
<ul>
<li><strong>不可重复度(unrepeatable read)</strong><br>不可重复读是指事务A读取了事务B已经提交的更改数据。如A在取款事务的过程中，B往改账户转账100元，A两次读取的账户余额发生不一致。</li>
</ul>
<table>
<thead>
<tr>
<th>时间</th>
<th>取款事务A</th>
<th>转账事务B</th>
</tr>
</thead>
<tbody>
<tr>
<td>T1</td>
<td></td>
<td>开始事务</td>
</tr>
<tr>
<td>T2</td>
<td>开始事务</td>
<td></td>
</tr>
<tr>
<td>T3</td>
<td></td>
<td>查询账户余额为1000元</td>
</tr>
<tr>
<td>T4</td>
<td>查询账户余额为1000元</td>
<td></td>
</tr>
<tr>
<td>T5</td>
<td></td>
<td>取出100元把余额改为900</td>
</tr>
<tr>
<td>T6</td>
<td></td>
<td>提交事务</td>
</tr>
<tr>
<td>T7</td>
<td>查询账户余额为900元和T4读取的不一致</td>
</tr>
</tbody>
</table>
<ul>
<li><strong>幻象读(phantom read)</strong><br>幻象读和不可重复度类似，即事务A读取事务B提交的新增数据，这时事务A将出现幻象读的问题。幻象读一般发生在计算统计数据的事务中，如：银行系统在同一个事务中，两次统计存款账户的总金额，在两次统计过程中，刚好新增了一个存款账户，并存入100元，这时，两次统计的总金额将不一致。</li>
</ul>
<table>
<thead>
<tr>
<th>时间</th>
<th>统计金额事务A</th>
<th>转账事务B</th>
</tr>
</thead>
<tbody>
<tr>
<td>T1</td>
<td></td>
<td>开始事务</td>
</tr>
<tr>
<td>T2</td>
<td>开始事务</td>
<td></td>
</tr>
<tr>
<td>T3</td>
<td>统计总存款数为1000元</td>
<td></td>
</tr>
<tr>
<td>T4</td>
<td></td>
<td>新增一个存款账户，存款为100元</td>
</tr>
<tr>
<td>T5</td>
<td></td>
<td>提交事务</td>
</tr>
<tr>
<td>T6</td>
<td>再次统计存款数为1100元(幻象读)</td>
</tr>
</tbody>
</table>
<ul>
<li><strong>不可重复读和幻象读的区别</strong><br>不可重复读在于记录的值，即读取到其他已经提交事务的更改数据。<br>幻象读在于记录的数量，即读取到其他已经提交事务的新增数据。</li>
</ul>
<p><strong>数据库的解决方法：</strong><br>解决不可重复读——添加行级锁<br>解决幻象读——添加表级锁</p>
<ul>
<li><strong>第一类丢失更新</strong><br>事务A撤销时，把已经提交的事务B的更新数据覆盖了。这种错误可能造成很严重的问题。看下面例子</li>
</ul>
<table>
<thead>
<tr>
<th>时间</th>
<th>取款事务A</th>
<th>转账事务B</th>
</tr>
</thead>
<tbody>
<tr>
<td>T1</td>
<td>开始事务</td>
<td></td>
</tr>
<tr>
<td>T2</td>
<td></td>
<td>开始事务</td>
</tr>
<tr>
<td>T3</td>
<td>查询账户余额为1000元</td>
<td></td>
</tr>
<tr>
<td>T4</td>
<td></td>
<td>查询账户余额为1000元</td>
</tr>
<tr>
<td>T5</td>
<td></td>
<td>汇入100元把余额改为1100元</td>
</tr>
<tr>
<td>T6</td>
<td></td>
<td>提交事务</td>
</tr>
<tr>
<td>T7</td>
<td>取出100元把余额改为900元</td>
<td></td>
</tr>
<tr>
<td>T8</td>
<td>撤销事务</td>
<td></td>
</tr>
<tr>
<td></td>
<td>余额恢复为1000元(丢失更新)</td>
</tr>
</tbody>
</table>
<ul>
<li><strong>第二类丢失更新</strong><br>事务A覆盖事务B已经提交的数据，造成事务B所做操作丢失。</li>
</ul>
<h1 id="2-事务隔离级别"><a href="#2-事务隔离级别" class="headerlink" title="2.事务隔离级别"></a>2.事务隔离级别</h1><p>数据库为了解决1.2节中描述的事务并发问题通常是使用数据库锁机制，但数据库中的锁机制用户直接使用很麻烦，所以数据库提供了自动锁机制。即用户指定相应的事务隔离级别，数据库会添加合适的锁。<br>ANSI/ISO SQL 92标准定义了4个等级的事务隔离级别，不同事务隔离级别能够解决的数据并发问题的能力是不同的。如下：</p>
<table>
<thead>
<tr>
<th>隔离级别</th>
<th>脏读</th>
<th>不可重复读</th>
<th>幻象读</th>
<th>第一类丢失更新</th>
<th>第二类丢失更新</th>
</tr>
</thead>
<tbody>
<tr>
<td>READ UNCOMMITED</td>
<td>允许</td>
<td>允许</td>
<td>允许</td>
<td>不允许</td>
<td>允许</td>
</tr>
<tr>
<td>READ COMMITED</td>
<td>不允许</td>
<td>允许</td>
<td>允许</td>
<td>不允许</td>
<td>允许</td>
</tr>
<tr>
<td>REPEATABLE READ</td>
<td>不允许</td>
<td>不允许</td>
<td>允许</td>
<td>不允许</td>
<td>不允许</td>
</tr>
<tr>
<td>SERIALIZABLE</td>
<td>不允许</td>
<td>不允许</td>
<td>不允许</td>
<td>不允许</td>
<td>不允许</td>
</tr>
</tbody>
</table>
<blockquote>
<p>事务的隔离级别和数据库的并发性是对立的，两者此增彼涨。使用READ UNCOMMITED隔离级别的数据库拥有最高的并发性和吞吐量，使用SERIALIZABLE隔离级别的数据库并发性和吞吐量最低。</p>
</blockquote>
<blockquote>
<p>想了解更多技术文章信息，请继续关注<a href="http://wiliam.me">wiliam.s Blog</a>，谢谢，欢迎来访！</p>
</blockquote>
<hr>
<p>参考资料<br>《Spring3.x企业应用开发实战》陈雄华 林开雄著</p>
]]></content>
      
        <categories>
            
            <category> houduan </category>
            
            <category> spring </category>
            
        </categories>
        
        
        <tags>
            
            <tag> spring </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[从零开始搭建Nodejs,Express,Ejs,bootstrap,JsViews,Mongodb运行环境教程总汇]]></title>
      <url>http://wiliam.me/2016/12/31/20161231212357.html</url>
      <content type="html"><![CDATA[<blockquote>
<p>从零开始搭建Nodejs,Express,Ejs,bootstrap,JsViews,Mongodb运行环境教程总汇。</p>
</blockquote>
<p><a href="http://wiliam.me/2016/12/22/20161222132357.html">从零开始搭建Nodejs,Express,Ejs,bootstrap,JsViews,Mongodb运行环境教程(一)</a><br><a href="http://wiliam.me/2016/12/22/20161222162411.html">从零开始搭建Nodejs,Express,Ejs,bootstrap,JsViews,Mongodb运行环境教程(二)</a><br><a href="http://wiliam.me/2016/12/31/20161231162411.html">从零开始搭建Nodejs,Express,Ejs,bootstrap,JsViews,Mongodb运行环境教程(三)</a><br>nodeProject的github项目地址:<a href="https://github.com/wiliam2015/nodeProject" target="_blank" rel="noopener">https://github.com/wiliam2015/nodeProject</a></p>
<blockquote>
<p>想了解更多技术文章信息，请继续关注<a href="http://wiliam.me">wiliam.s Blog</a>，谢谢，欢迎来访！</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> qianduan </category>
            
            <category> Nodejs </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Nodejs </tag>
            
            <tag> Express </tag>
            
            <tag> Ejs </tag>
            
            <tag> bootstrap </tag>
            
            <tag> JsViews </tag>
            
            <tag> Mongodb </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[从零开始搭建Nodejs,Express,Ejs,bootstrap,JsViews,Mongodb运行环境教程(三)]]></title>
      <url>http://wiliam.me/2016/12/31/20161231162411.html</url>
      <content type="html"><![CDATA[<blockquote>
<p>在前两篇的博客中介绍了NodeJs的安装和对Express，Ejs,bootstrap,JsViews的相关集成，接下来将讲解与MongoDB的集成。</p>
</blockquote>
<a id="more"></a>
<p>该系列文章总汇链接<br><a href="http://wiliam.me/2016/12/22/20161222132357.html">从零开始搭建Nodejs,Express,Ejs,bootstrap,JsViews,Mongodb运行环境教程(一)</a><br><a href="http://wiliam.me/2016/12/22/20161222162411.html">从零开始搭建Nodejs,Express,Ejs,bootstrap,JsViews,Mongodb运行环境教程(二)</a><br><a href="http://wiliam.me/2016/12/31/20161231162411.html">从零开始搭建Nodejs,Express,Ejs,bootstrap,JsViews,Mongodb运行环境教程(三)</a><br>nodeProject的github项目地址:<a href="https://github.com/wiliam2015/nodeProject" target="_blank" rel="noopener">https://github.com/wiliam2015/nodeProject</a></p>
<h1 id="1-Mongodb介绍"><a href="#1-Mongodb介绍" class="headerlink" title="1.Mongodb介绍"></a>1.Mongodb介绍</h1><p>MongoDB是一个介于关系数据库和非关系数据库之间的产品，是非关系数据库当中功能最丰富，最像关系数据库的。他支持的数据结构非常松散，是类似json的bjson格式，因此可以存储比较复杂的数据类型。Mongo最大的特点是他支持的查询语言非常强大，其语法有点类似于面向对象的查询语言，几乎可以实现类似关系数据库单表查询的绝大部分功能，而且还支持对数据建立索引。</p>
<p>它的特点是高性能、易部署、易使用，存储数据非常方便。主要功能特性有：</p>
<ul>
<li>面向集合存储，易存储对象类型的数据。</li>
<li>模式自由。</li>
<li>支持动态查询。</li>
<li>支持完全索引，包含内部对象。</li>
<li>支持查询。</li>
<li>支持复制和故障恢复。</li>
<li>使用高效的二进制数据存储，包括大型对象（如视频等）。</li>
<li>自动处理碎片，以支持云计算层次的扩展性</li>
<li>支持RUBY，PYTHON，JAVA，C++，PHP等多种语言。</li>
<li>文件存储格式为BSON（一种JSON的扩展）</li>
<li>可通过网络访问</li>
</ul>
<p>所谓“面向集合”（Collenction-Orented），意思是数据被分组存储在数据集中，被称为一个集合（Collenction)。每个 集合在数据库中都有一个唯一的标识名，并且可以包含无限数目的文档。集合的概念类似关系型数据库（RDBMS）里的表（table），不同的是它不需要定 义任何模式（schema)。<br>模式自由（schema-free)，意味着对于存储在mongodb数据库中的文件，我们不需要知道它的任何结构定义。如果需要的话，你完全可以把不同结构的文件存储在同一个数据库里。<br>存储在集合中的文档，被存储为键-值对的形式。键用于唯一标识一个文档，为字符串类型，而值则可以是各中复杂的文件类型。我们称这种存储形式为BSON（Binary Serialized dOcument Format）。</p>
<p>MongoDB服务端可运行在Linux、Windows或OS X平台，支持32位和64位应用，默认端口为27017。推荐运行在64位平台，因为MongoDB</p>
<p>在32位模式运行时支持的最大文件尺寸为2GB。</p>
<p>MongoDB把数据存储在文件中（默认路径为：/data/db），为提高效率使用内存映射文件进行管理。</p>
<p>以上为网上找的，其实就是非传统的非关系数据库，现在归到文档型数据库分类之中，注意32位操作系统支持的最大文件为2GB，所以做大文件海量储存的朋友要选择64位的系统安装</p>
<h1 id="2-安装和使用"><a href="#2-安装和使用" class="headerlink" title="2.安装和使用"></a>2.安装和使用</h1><p>安装我就不介绍了，网上的教程一大堆：我这里参考<a href="http://www.cnblogs.com/huangxincheng/category/355399.html" target="_blank" rel="noopener">8天学通MongoDB</a>安装和学习使用的。下面重点说下如何与Nodejs集成使用</p>
<h1 id="3-NodeJS下连接MongoDB"><a href="#3-NodeJS下连接MongoDB" class="headerlink" title="3.NodeJS下连接MongoDB"></a>3.NodeJS下连接MongoDB</h1><ul>
<li><p>在NodeJs中引入MongoDB模块,另外我们操作MongoDB使用Mongoose，Mongoose是MongoDB的一个对象模型工具，是基于node-mongodb-native开发的MongoDB nodejs驱动，<a href="http://www.hubwiz.com/course/543b2e7788dba02718b5a4bd" target="_blank" rel="noopener">Mongoose学习地址</a>，可以在异步的环境下执行，在命令行执行下面代码。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install mongodb --save</span><br><span class="line">npm install mongoose  --save</span><br></pre></td></tr></table></figure>
</li>
<li><p>在nodeProject根目录下新建database目录，再在database目录下新建<code>connectMongoDB.js</code>,内容如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> dbObj = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> mongoose = <span class="built_in">require</span>(<span class="string">"mongoose"</span>);</span><br><span class="line"><span class="keyword">var</span> db = mongoose.connect(<span class="string">"mongodb://127.0.0.1:27017/nodeProject"</span>);</span><br><span class="line">db.connection.on(<span class="string">"error"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"connect mongodb error,error message："</span> + error);</span><br><span class="line">&#125;);</span><br><span class="line">db.connection.on(<span class="string">"open"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"connect mongodb success"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">module</span>.exports = dbObj;</span><br></pre></td></tr></table></figure>
</li>
<li><p>接下来修改nodeProject跟目录下的app.js,增加的代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mongodb = <span class="built_in">require</span>(<span class="string">'./database/connectMongoDB'</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>在命令行启动项目，执行<code>npm start</code>输出结果如下：</p>
<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; nodeproject@<span class="number">0.0</span>.<span class="number">0</span> <span class="literal">start</span> G:\workspace\project\nodeproject</span><br><span class="line">&gt; <span class="keyword">node</span> <span class="title">./bin</span>/www</span><br><span class="line"></span><br><span class="line">connect mongodb success</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>看到控制台输出<code>connect mongodb success</code>表示成功连接到了mongodb数据库</p>
<h1 id="4-集成MongoDB开发"><a href="#4-集成MongoDB开发" class="headerlink" title="4.集成MongoDB开发"></a>4.集成MongoDB开发</h1><p>上面讲解了Node下连接MongoDB，但实际我们还没有通过代码对MongoDB插入数据和读取数据，接下来一一演示</p>
<h2 id="4-1-写数据"><a href="#4-1-写数据" class="headerlink" title="4.1.写数据"></a>4.1.写数据</h2><p>继续在<code>database/connectMongoDB.js</code>文件下写入下面代码<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> UserSchema = <span class="keyword">new</span> mongoose.Schema(&#123;</span><br><span class="line">    name : &#123;<span class="attr">type</span>:<span class="built_in">String</span>&#125;,</span><br><span class="line">    age : &#123;<span class="attr">type</span>:<span class="built_in">Number</span>,<span class="attr">default</span>:<span class="number">0</span>&#125;,</span><br><span class="line">    email : &#123;<span class="attr">type</span>:<span class="built_in">String</span>&#125;,</span><br><span class="line">    time : &#123;<span class="attr">type</span>:<span class="built_in">Date</span>,<span class="attr">default</span>:<span class="built_in">Date</span>.now()&#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> userModel = db.model(<span class="string">"user"</span>,UserSchema);</span><br><span class="line">dbObj.userModel = userModel;</span><br></pre></td></tr></table></figure></p>
<p>然后将<code>routes/index.js</code>文件改下成下面代码<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> router = express.Router();</span><br><span class="line"><span class="keyword">var</span> mongodb = <span class="built_in">require</span>(<span class="string">'../database/connectMongoDB'</span>);</span><br><span class="line"><span class="comment">/* GET home page. */</span></span><br><span class="line">router.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> UserEntity = <span class="keyword">new</span> mongodb.userModel(&#123;</span><br><span class="line">      name : <span class="string">'wiliam'</span>,</span><br><span class="line">      age : <span class="number">22</span>,</span><br><span class="line">      email :<span class="string">'wiliam@ss.com'</span></span><br><span class="line">  &#125;);</span><br><span class="line">    UserEntity.save(<span class="function"><span class="keyword">function</span>(<span class="params">error,doc</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(error)&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'error :'</span> + error);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(doc);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'保存成功'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  res.render(<span class="string">'index'</span>, &#123; <span class="attr">title</span>: <span class="string">'Express'</span>&#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = router;</span><br></pre></td></tr></table></figure></p>
<p>再次在命令行执行<code>npm start</code>启动项目，访问<code>http://localhost:3000</code>,控制台有日志输出，内容如下<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#123;</span> <span class="attr">__v:</span> <span class="number">0</span><span class="string">,</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">'wiliam'</span><span class="string">,</span></span><br><span class="line">  <span class="attr">email:</span> <span class="string">'wiliam@ss.com'</span><span class="string">,</span></span><br><span class="line">  <span class="attr">_id:</span> <span class="string">58679ac8110741366cc60291,</span></span><br><span class="line">  <span class="attr">time:</span> <span class="number">2016</span><span class="number">-12</span><span class="string">-31T11:34:55.242Z,</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">22</span> <span class="string">&#125;</span></span><br><span class="line"><span class="string">保存成功</span></span><br></pre></td></tr></table></figure></p>
<p>可以看到我们已经保存成功了，为了确定，我们再在MongoDB下查看是否确实存在，输入下面命令查看<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">db</span><span class="selector-class">.users</span><span class="selector-class">.find</span>()</span><br></pre></td></tr></table></figure></p>
<p>结果如下：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="attr">"_id"</span> : ObjectId(<span class="string">"58679ac8110741366cc60291"</span>), <span class="attr">"name"</span> : <span class="string">"wiliam"</span>, <span class="attr">"email"</span> : <span class="string">"wiliam@ss.com"</span>, <span class="attr">"time"</span> : ISODate(<span class="string">"2016-12-31T11:34:55.242Z"</span>), <span class="attr">"age"</span> : <span class="number">22</span>, <span class="attr">"__v"</span> : <span class="number">0</span> &#125;</span><br></pre></td></tr></table></figure></p>
<p>比较上面log输出的_id和结果中的ObjectId完全相等，说明插入成功。</p>
<h2 id="4-2-读数据"><a href="#4-2-读数据" class="headerlink" title="4.2.读数据"></a>4.2.读数据</h2><p>继续修改<code>routes/index.js</code>文件，改下成下面代码<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> router = express.Router();</span><br><span class="line"><span class="keyword">var</span> mongodb = <span class="built_in">require</span>(<span class="string">'../database/connectMongoDB'</span>);</span><br><span class="line"><span class="comment">/* GET home page. */</span></span><br><span class="line">router.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  mongodb.userModel.find(&#123;<span class="attr">name</span>:<span class="string">'wiliam'</span>&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">error, docs</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(error)&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'error :'</span> + error);</span><br><span class="line">            res.render(<span class="string">'index'</span>, &#123; <span class="attr">title</span>: <span class="string">'Express'</span>,<span class="attr">msg</span>:<span class="string">'查询出错啦'</span>+docs&#125;);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(docs);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'查询成功'</span>);</span><br><span class="line">            res.render(<span class="string">'index'</span>, &#123; <span class="attr">title</span>: <span class="string">'Express'</span>,<span class="attr">msg</span>:<span class="string">'查出数据啦'</span>+docs&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = router;</span><br></pre></td></tr></table></figure></p>
<p>再将<code>views/index.ejs</code>文件中找到Hello, world!,将下面的内容改成&lt;%= msg%&gt;，整体代码如下:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"jumbotron"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">		Hello, world!</span><br><span class="line">	<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">%=</span> <span class="attr">msg</span>%&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">		 <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"btn btn-primary btn-large"</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>更多<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>再次在命令行执行<code>npm start</code>启动项目,访问<code>http://localhost:3000</code>,控制台有日志输出，内容如下</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">[</span> <span class="string">&#123;</span> <span class="attr">_id:</span> <span class="string">58679ac8110741366cc60291,</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">'wiliam'</span><span class="string">,</span></span><br><span class="line">    <span class="attr">email:</span> <span class="string">'wiliam@ss.com'</span><span class="string">,</span></span><br><span class="line">    <span class="attr">__v:</span> <span class="number">0</span><span class="string">,</span></span><br><span class="line">    <span class="attr">time:</span> <span class="number">2016</span><span class="number">-12</span><span class="string">-31T11:34:55.242Z,</span></span><br><span class="line">    <span class="attr">age:</span> <span class="number">22</span> <span class="string">&#125;</span> <span class="string">]</span></span><br><span class="line"><span class="string">查询成功</span></span><br></pre></td></tr></table></figure>
<p>可以看到_id就是我们刚刚插入的那条数据，另外首页也显示如下<br><img src="http://imgcdn.yalongkeji.com/mongodb.jpg" alt="mongodb"><br>可以看到首页显示的就是我们刚刚查到的数据。</p>
<p>至此，与MongoDB集成成功，自己可以按照业务需求定制开发了。</p>
<p>还有一些问题需要继续完善，有兴趣的可以一起探讨,如下：</p>
<ol>
<li>如何设计好nodejs框架的各个功能目录，自己对此还没有一个好的想法。</li>
<li>如何将nodejs的代码各个模块有效隔离就是做到高内聚，低耦合。</li>
</ol>
<p>本系列教程到此就结束了，如果您有什么问题或想法可以留言回复与我探讨。 </p>
<blockquote>
<p>想了解更多技术文章信息，请继续关注<a href="http://wiliam.me">wiliam.s Blog</a>，谢谢，欢迎来访！</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> qianduan </category>
            
            <category> Nodejs </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Nodejs </tag>
            
            <tag> Express </tag>
            
            <tag> Ejs </tag>
            
            <tag> bootstrap </tag>
            
            <tag> JsViews </tag>
            
            <tag> Mongodb </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[从零开始搭建Nodejs,Express,Ejs,bootstrap,Jsviews,Mongodb运行环境教程(二)]]></title>
      <url>http://wiliam.me/2016/12/22/20161222162411.html</url>
      <content type="html"><![CDATA[<blockquote>
<p>在第一篇博客中我们介绍了Nodejs，Express和Ejs的安装，简单的搭建了服务器的基本运行环境，下面再次开始</p>
</blockquote>
<a id="more"></a>
<p>该系列文章总汇链接<br><a href="http://wiliam.me/2016/12/22/20161222132357.html">从零开始搭建Nodejs,Express,Ejs,bootstrap,Jsviews,Mongodb运行环境教程(一)</a><br><a href="http://wiliam.me/2016/12/22/20161222162411.html">从零开始搭建Nodejs,Express,Ejs,bootstrap,Jsviews,Mongodb运行环境教程(二)</a><br><a href="http://wiliam.me/2016/12/31/20161231162411.html">从零开始搭建Nodejs,Express,Ejs,bootstrap,Jsviews,Mongodb运行环境教程(三)</a><br>nodeProject的github项目地址:<a href="https://github.com/wiliam2015/nodeProject" target="_blank" rel="noopener">https://github.com/wiliam2015/nodeProject</a></p>
<h1 id="1-和bootstrap集成"><a href="#1-和bootstrap集成" class="headerlink" title="1.和bootstrap集成"></a>1.和bootstrap集成</h1><p>这个就很简单了，我们直接将下载后的bootstrap放到public目录下就可以了然后在相关页面引入bootstrap的css和js文件即可，但npm拥有强大的资源，我们将bootstrap依赖下载后可以直接使用bootstrap模块。本教程就是这样用的。步骤如下：<br>在node目录下执行<br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install </span><span class="keyword">bootstrap </span>--save</span><br></pre></td></tr></table></figure></p>
<p>执行结果如下：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">nodeproject@</span><span class="number">0.0</span><span class="number">.0</span> G:\workspace\project\nodeproject</span><br><span class="line">`-- <span class="symbol">bootstrap@</span><span class="number">3.3</span><span class="number">.7</span>  extraneous</span><br></pre></td></tr></table></figure></p>
<p>由于bootstrap需要jquery所以也需要安装jquery，执行<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install <span class="symbol">jquery@</span><span class="number">1.11</span>.* --save</span><br></pre></td></tr></table></figure></p>
<p>执行结果<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">nodeproject@</span><span class="number">0.0</span><span class="number">.0</span> G:\workspace\project\nodeproject</span><br><span class="line">`-- <span class="symbol">jquery@</span><span class="number">1.11</span><span class="number">.3</span></span><br></pre></td></tr></table></figure></p>
<p>可以看到我们安装的bootstrap版本是3.3.7，jquery1.11.3 文件放在node_modules/bootstrap和jquery下<br>接着我们就来使用bootstrap搭建页面，步骤如下</p>
<ul>
<li>打开nodeproject下的app.js，找到<code>app.use(express.static(path.join(__dirname, &#39;public&#39;)));</code>在之后添加如下代码:</li>
</ul>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.use(<span class="string">'/lib'</span>,express.<span class="keyword">static</span>(path.<span class="keyword">join</span>(__dirname, <span class="string">'node_modules'</span>)));</span><br></pre></td></tr></table></figure>
<p>结果如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">app.use(express.static(path.join(__dirname, <span class="string">'public'</span>)));</span><br><span class="line">app.use(<span class="string">'/lib'</span>,express.static(path.join(__dirname, <span class="string">'node_modules'</span>)));</span><br></pre></td></tr></table></figure></p>
<p>这样就把node_modules下的文件映射为我们的静态资源文件了。</p>
<ul>
<li>在<code>nodeproject/views</code>目录下打开<code>index.ejs</code>文件,加入对bootstrap和jquery的引用,并增加一些内容，如下：</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">title</span> %&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">'stylesheet'</span> <span class="attr">href</span>=<span class="string">'/stylesheets/style.css'</span> /&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 新 Bootstrap 核心 CSS 文件 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"/lib/bootstrap/dist/css/bootstrap.min.css"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!-- 可选的Bootstrap主题文件（一般不用引入） --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"/lib/bootstrap/dist/css/bootstrap-theme.min.css"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!-- jQuery文件。务必在bootstrap.min.js 之前引入 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/lib/jquery/dist/jquery.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!-- 最新的 Bootstrap 核心 JavaScript 文件 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/lib/bootstrap/dist/js/bootstrap.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row clearfix"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-12 column"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">"navbar navbar-default"</span> <span class="attr">role</span>=<span class="string">"navigation"</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"navbar-header"</span>&gt;</span></span><br><span class="line">					 <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"navbar-toggle"</span> <span class="attr">data-toggle</span>=<span class="string">"collapse"</span> <span class="attr">data-target</span>=<span class="string">"#bs-example-navbar-collapse-1"</span>&gt;</span> <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"sr-only"</span>&gt;</span>Toggle navigation<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"icon-bar"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"icon-bar"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"icon-bar"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"navbar-brand"</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">title</span> %&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">				</span><br><span class="line">				<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"collapse navbar-collapse"</span> <span class="attr">id</span>=<span class="string">"bs-example-navbar-collapse-1"</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav navbar-nav"</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span></span><br><span class="line">							 <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">							 <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>链接1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"dropdown"</span>&gt;</span></span><br><span class="line">							 <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"dropdown-toggle"</span> <span class="attr">data-toggle</span>=<span class="string">"dropdown"</span>&gt;</span>下拉菜单<span class="tag">&lt;<span class="name">strong</span> <span class="attr">class</span>=<span class="string">"caret"</span>&gt;</span><span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"dropdown-menu"</span>&gt;</span></span><br><span class="line">								<span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">									 <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>动作1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">								<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">								<span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">									 <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>动作2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">								<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">								<span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">									 <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>动作3<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">								<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">								<span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"divider"</span>&gt;</span></span><br><span class="line">								<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">								<span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">									 <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>分隔动作1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">								<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">								<span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"divider"</span>&gt;</span></span><br><span class="line">								<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">								<span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">									 <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>分隔动作2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">								<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">"navbar-form navbar-left"</span> <span class="attr">role</span>=<span class="string">"search"</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> /&gt;</span></span><br><span class="line">						<span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span>&gt;</span>搜索<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav navbar-nav navbar-right"</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">							 <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>链接2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"dropdown"</span>&gt;</span></span><br><span class="line">							 <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"dropdown-toggle"</span> <span class="attr">data-toggle</span>=<span class="string">"dropdown"</span>&gt;</span>下拉菜单2<span class="tag">&lt;<span class="name">strong</span> <span class="attr">class</span>=<span class="string">"caret"</span>&gt;</span><span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"dropdown-menu"</span>&gt;</span></span><br><span class="line">								<span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">									 <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>动作1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">								<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">								<span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">									 <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>动作2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">								<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">								<span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">									 <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>其他动作<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">								<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">								<span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"divider"</span>&gt;</span></span><br><span class="line">								<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">								<span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">									 <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>其他动作2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">								<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">				</span><br><span class="line">			<span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"jumbotron"</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">					Hello, world!</span><br><span class="line">				<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">					This is a template for a simple marketing or informational website. It includes a large callout called the hero unit and three supporting pieces of content. Use it as a starting point to create something more unique.</span><br><span class="line">				<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">					 <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"btn btn-primary btn-large"</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>更多<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row clearfix"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-4 column"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">h2</span>&gt;</span></span><br><span class="line">				标题1</span><br><span class="line">			<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">				Donec id elit non mi porta gravida at eget metus. Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa justo sit amet risus. Etiam porta sem malesuada magna mollis euismod. Donec sed odio dui.</span><br><span class="line">			<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">				 <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"btn"</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>详细信息  »<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-4 column"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">h2</span>&gt;</span></span><br><span class="line">				标题2</span><br><span class="line">			<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">				Donec id elit non mi porta gravida at eget metus. Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa justo sit amet risus. Etiam porta sem malesuada magna mollis euismod. Donec sed odio dui.</span><br><span class="line">			<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">				 <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"btn"</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>详细信息  »<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-4 column"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">h2</span>&gt;</span></span><br><span class="line">				标题3</span><br><span class="line">			<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">				Donec id elit non mi porta gravida at eget metus. Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa justo sit amet risus. Etiam porta sem malesuada magna mollis euismod. Donec sed odio dui.</span><br><span class="line">			<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">				 <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"btn"</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>详细信息 »<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在浏览器中打开<code>http://localhost:3000</code>，结果如图：<br><img src="http://imgcdn.yalongkeji.com/bootstrap1.png" alt="bootstrap1"><br> 可以看到成功显示了bootstrap的布局</p>
<h1 id="2-集成Jsviews"><a href="#2-集成Jsviews" class="headerlink" title="2.集成Jsviews"></a>2.集成Jsviews</h1><p>Jsviews介绍自己看<a href="http://www.jsviews.com" target="_blank" rel="noopener">官网</a>吧,我就不吹了。<br>集成方法也是参考1节中的方法，知道的同学可以不看教程自己写下，步骤如下：</p>
<ul>
<li>在nodeproject目录下执行</li>
</ul>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install </span><span class="keyword">jsviews </span>--save</span><br></pre></td></tr></table></figure>
<p>结果如下：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">nodeproject@</span><span class="number">0.0</span><span class="number">.0</span> G:\workspace\project\nodeProject</span><br><span class="line">`-- <span class="symbol">jsviews@</span><span class="number">0.9</span><span class="number">.84</span></span><br></pre></td></tr></table></figure></p>
<p>可以看到jsviews使用的是0.9.84版本</p>
<ul>
<li>打开<code>nodeproject/views/index.ejs</code>文件，在html的head标签添加对jsviews的引用，部分代码如下：</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 最新的 Bootstrap 核心 JavaScript 文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/lib/bootstrap/dist/js/bootstrap.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入 JsViews 核心 JavaScript 文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/lib/jsviews/jsviews.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>找到如下代码，大约31-33行：<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">li</span> <span class="keyword">class</span>=<span class="string">"active"</span> &gt;</span><br><span class="line">	首页</span><br><span class="line">&lt;/<span class="keyword">li</span>&gt;</span><br></pre></td></tr></table></figure></p>
<p>换成如下代码：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;li <span class="keyword">class</span>="<span class="symbol">active</span>" <span class="symbol">id</span>="<span class="symbol">title</span>"&gt;</span><br><span class="line"></span><br><span class="line">&lt;/<span class="symbol">li</span>&gt;</span><br></pre></td></tr></table></figure></p>
<p>在index.ejs文件末尾<code>&lt;/body&gt;</code>之前添加如下代码：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">id</span>=<span class="string">"titleTml"</span> <span class="attr">type</span>=<span class="string">"text/x-jsrender"</span>&gt;</span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span></span><span class="template-variable">&#123;&#123;:title&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span> <span class="attr">language</span>=<span class="string">"JavaScript"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">        $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> titleData=&#123;title:<span class="string">"首页jsviews"</span>&#125;;</span></span><br><span class="line"><span class="javascript">            $.templates(&#123;</span></span><br><span class="line"><span class="actionscript">                titleTml: <span class="string">"#titleTml"</span></span></span><br><span class="line">            &#125;);</span><br><span class="line"><span class="javascript">            $.templates.titleTml.link(<span class="string">"#title"</span>,titleData);</span></span><br><span class="line">        &#125;);</span><br><span class="line"> <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>结果如图：<br><img src="http://imgcdn.yalongkeji.com/bootstrap2.png" alt="bootstrap1"></p>
<p>本篇就到此为止，介绍了和bootstrap,JsViews集成的方法步骤，接下来的博客将介绍和Mongodb的集成 </p>
<blockquote>
<p>想了解更多技术文章信息，请继续关注<a href="http://wiliam.me">wiliam.s Blog</a>，谢谢，欢迎来访！</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> qianduan </category>
            
            <category> Nodejs </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Nodejs </tag>
            
            <tag> Express </tag>
            
            <tag> Ejs </tag>
            
            <tag> bootstrap </tag>
            
            <tag> Mongodb </tag>
            
            <tag> Jsviews </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[从零开始搭建Nodejs,Express,Ejs,bootstrap,JsViews,Mongodb运行环境教程(一)]]></title>
      <url>http://wiliam.me/2016/12/22/20161222132357.html</url>
      <content type="html"><![CDATA[<blockquote>
<p>基于Nodejs搭建的应用越来越多，并且也提供了不错的性能。该系列博客将会介绍在NodeJs的环境基础上，如何与xpress,Ejs,bootstrap,JsViews,Mongodb集成。</p>
</blockquote>
<a id="more"></a>
<p>该系列文章总汇链接<br><a href="http://wiliam.me/2016/12/22/20161222132357.html">从零开始搭建Nodejs,Express,Ejs,bootstrap,JsViews,Mongodb运行环境教程(一)</a><br><a href="http://wiliam.me/2016/12/22/20161222162411.html">从零开始搭建Nodejs,Express,Ejs,bootstrap,JsViews,Mongodb运行环境教程(二)</a><br><a href="http://wiliam.me/2016/12/31/20161231162411.html">从零开始搭建Nodejs,Express,Ejs,bootstrap,JsViews,Mongodb运行环境教程(三)</a><br>nodeProject的github项目地址:<a href="https://github.com/wiliam2015/nodeProject" target="_blank" rel="noopener">https://github.com/wiliam2015/nodeProject</a></p>
<h1 id="1-背景"><a href="#1-背景" class="headerlink" title="1.背景"></a>1.背景</h1><p>目前项目组用到了上面的技术搭建框架，现在自己总结下共后续人员参考，少走弯路，按照我写的教程可以一步一步的操作，完全将项目环境搭建起来。本教程是在window7系统下搭建。</p>
<h1 id="2-环境安装"><a href="#2-环境安装" class="headerlink" title="2.环境安装"></a>2.环境安装</h1><h2 id="2-1-NodeJs安装"><a href="#2-1-NodeJs安装" class="headerlink" title="2.1.NodeJs安装"></a>2.1.NodeJs安装</h2><p>NodeJs介绍就不写了，感兴趣的可以看看这个链接：<a href="http://www.infoq.com/cn/articles/what-is-nodejs/" target="_blank" rel="noopener">深入浅出NodeJs</a>,想学习的话也可以买一本<a href="http://product.dangdang.com/23371791.html" target="_blank" rel="noopener">《深入浅出Node.js·朴灵著》</a><br>自己使用的NodeJs版本是v6.2.0<br>下载NodeJs，<a href="https://nodejs.org/zh-cn" target="_blank" rel="noopener">官网</a> 点击绿绿的下载按钮。下载完成后运行安装程序，如果你不太熟悉，可以直接一直下一步，直到完成就好。下载完成后进入命令行<code>windows+R</code>键输入<code>cmd</code>按<code>Enter</code> 输入node -v显示版本则证明安装成功，如图：<br><img src="http://imgcdn.yalongkeji.com/node.png" alt="node"></p>
<p> 此外node安装包也为你安装了npm(node的包管理工具)工具，再次输入npm -v 查看是否显示npm版本，如图：<br><img src="http://imgcdn.yalongkeji.com/node2.png" alt="node"></p>
<h3 id="2-1-1-NodeJs使用前配置"><a href="#2-1-1-NodeJs使用前配置" class="headerlink" title="2.1.1.NodeJs使用前配置"></a>2.1.1.NodeJs使用前配置</h3><p><strong>配置代理</strong><br>如果你不是通过代理访问外网，可以跳过此步骤。如果你的网络环境是通过代理访问外网的可以按照下面配置nodejs的代理，方法如下：<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm<span class="built_in"> config </span><span class="builtin-name">set</span> <span class="attribute">proxy</span>=http://proxy_ip_or_fqdn:port</span><br><span class="line">npm<span class="built_in"> config </span><span class="builtin-name">set</span> <span class="attribute">proxy</span>=http://proxy_user:proxy_password@proxy_ip_or_fqdn:port </span><br><span class="line">npm<span class="built_in"> config </span>delete<span class="built_in"> proxy </span>#删除代理</span><br></pre></td></tr></table></figure></p>
<p>第一行是不用用户名密码的代理配置方法，第二行是需要用户名和密码的代理配置方法，第三行是删除代理方法。</p>
<p><strong>设置同步镜像地址为淘宝的镜像地址</strong><br>nodejs默认镜像是国外的，会比较慢，所以设置淘宝NPM镜像,同步频率目前为 10分钟一次以保证尽量与官方服务同步。有3种配置方法，如下：<br>1.通过config命令<br><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="keyword">set</span> registry <span class="comment">https:</span>//<span class="comment">registry.npm.taobao.org</span> </span><br><span class="line">npm <span class="comment">info underscore</span>  //（如果上面配置正确这个命令会有字符串<span class="comment">response</span>）</span><br></pre></td></tr></table></figure></p>
<p>2.命令行指定<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">npm</span> --registry https://registry.npm.taobao.org <span class="literal">info</span> underscore</span><br></pre></td></tr></table></figure></p>
<p>3.编辑 ~/.npmrc (windows下此文件在nodejs安装目录/node_moudules/npm下) 加入下面内容<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">registry = <span class="string">https:</span><span class="comment">//registry.npm.taobao.org</span></span><br></pre></td></tr></table></figure></p>
<p>我使用的是第一种方法。</p>
<h2 id="2-2-安装Express"><a href="#2-2-安装Express" class="headerlink" title="2.2.安装Express"></a>2.2.安装Express</h2><p>Express简介：我就不介绍了，还是看<a href="http://www.expressjs.com.cn/" target="_blank" rel="noopener">官网</a>吧，中文的。<br>其实上面的官网中已经对安装介绍的很详细了，在【入门】-&gt;【安装】菜单下，想要手动安装的可以按照这个步骤自己做一下。<br>下面说下使用Express应用生成器，生成Express项目，通过应用生成器工具 express 可以快速创建一个应用的骨架。应用生成器官网也提供了详细的教程，<a href="http://www.expressjs.com.cn/starter/generator.html" target="_blank" rel="noopener">点此链接查看</a><br>或者在命令行执行下面命令安装<br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> express-generator -g</span><br></pre></td></tr></table></figure></p>
<p>执行成功后，我们就用刚才安装成功的Express应用生成器，生成本地需要搭建的项目nodeproject,在当前目录下或者进入自己工作目录下执行以下命令：<br><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">G:<span class="symbol">\w</span>orkspace<span class="symbol">\p</span>roject                                                   </span><br><span class="line">λ express nodeproject</span><br></pre></td></tr></table></figure></p>
<p>下面是执行后的结果<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">                                                                   </span><br><span class="line"><span class="string">warning:</span> the <span class="keyword">default</span> view engine will not be jade <span class="keyword">in</span> future releases </span><br><span class="line"><span class="string">warning:</span> use `--view=jade<span class="string">' or `--help'</span> <span class="keyword">for</span> additional options        </span><br><span class="line">                                                                     </span><br><span class="line">                                                                     </span><br><span class="line"> <span class="string">create :</span> nodeproject                                                </span><br><span class="line"> <span class="string">create :</span> nodeproject/<span class="keyword">package</span>.json                                   </span><br><span class="line"> <span class="string">create :</span> nodeproject/app.js                                         </span><br><span class="line"> <span class="string">create :</span> nodeproject/<span class="keyword">public</span>                                         </span><br><span class="line"> <span class="string">create :</span> nodeproject/routes                                         </span><br><span class="line"> <span class="string">create :</span> nodeproject<span class="regexp">/routes/</span>index.js                                </span><br><span class="line"> <span class="string">create :</span> nodeproject<span class="regexp">/routes/</span>users.js                                </span><br><span class="line"> <span class="string">create :</span> nodeproject/views                                          </span><br><span class="line"> <span class="string">create :</span> nodeproject<span class="regexp">/views/</span>index.jade                               </span><br><span class="line"> <span class="string">create :</span> nodeproject<span class="regexp">/views/</span>layout.jade                              </span><br><span class="line"> <span class="string">create :</span> nodeproject<span class="regexp">/views/</span>error.jade                               </span><br><span class="line"> <span class="string">create :</span> nodeproject/bin                                            </span><br><span class="line"> <span class="string">create :</span> nodeproject<span class="regexp">/bin/</span>www                                        </span><br><span class="line"> <span class="string">create :</span> nodeproject<span class="regexp">/public/</span>javascripts                             </span><br><span class="line"> <span class="string">create :</span> nodeproject<span class="regexp">/public/</span>stylesheets                             </span><br><span class="line"> <span class="string">create :</span> nodeproject<span class="regexp">/public/</span>stylesheets/style.css                   </span><br><span class="line">                                                                     </span><br><span class="line"> install <span class="string">dependencies:</span>                                               </span><br><span class="line">   &gt; cd nodeproject &amp;&amp; npm install                                   </span><br><span class="line">                                                                     </span><br><span class="line"> run the <span class="string">app:</span>                                                        </span><br><span class="line">   &gt; SET DEBUG=<span class="string">nodeproject:</span>* &amp; npm start                             </span><br><span class="line">                                                                     </span><br><span class="line"> <span class="string">create :</span> nodeproject<span class="regexp">/public/</span>images</span><br></pre></td></tr></table></figure></p>
<p>上面生成的只是文档目录结构，相关依赖还是没有的，接着执行下面命令安装依赖<br><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">cd</span> <span class="string">nodeproject</span></span><br><span class="line"><span class="attr">npm</span> <span class="string">install</span></span><br></pre></td></tr></table></figure></p>
<p>执行成功后会在nodeproject目录下生成node_modules目录，里面就是我们有的依赖啦，Express也随着这个命令一起安装成功了。<br>然后执行下面命令测试下看能否启动成功<br><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">DEBUG</span>=nodeproject &amp; npm <span class="keyword">start</span></span><br><span class="line">或直接输入</span><br><span class="line">npm <span class="keyword">start</span></span><br></pre></td></tr></table></figure></p>
<p>然后在浏览器中打开 <code>http://localhost:3000/</code> 网址就可以看到这个应用了。界面如下：<br><img src="http://imgcdn.yalongkeji.com/express1.jpg" alt="express"></p>
<p>结束程序按<code>Ctrl+C</code>快捷键</p>
<p>通过 Express 应用生成器创建的应用一般都有如下目录结构：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── <span class="selector-tag">app</span><span class="selector-class">.js</span>  <span class="selector-tag">----</span>项目入口文件，这个都是在<span class="selector-tag">package</span><span class="selector-class">.json</span>配置的，名字可以改，程序从这里开始。相当于<span class="selector-tag">jsp</span>项目中的 <span class="selector-tag">index</span><span class="selector-class">.jsp</span>,<span class="selector-tag">index</span><span class="selector-class">.html</span></span><br><span class="line">├── <span class="selector-tag">bin</span>     <span class="selector-tag">----</span>存放启动项目的脚本，例如本项目的<span class="selector-tag">start</span>脚本就是下面的<span class="selector-tag">www</span>啦</span><br><span class="line">│   └── <span class="selector-tag">www</span></span><br><span class="line">├── <span class="selector-tag">node_modules</span>  <span class="selector-tag">----</span>存放所有项目的依赖库</span><br><span class="line">├── <span class="selector-tag">package</span><span class="selector-class">.json</span>   <span class="selector-tag">----</span>项目的描述文件，启动脚本和项目的启动文件，依赖库信息都在这里配置的哦</span><br><span class="line">├── <span class="selector-tag">public</span> <span class="selector-tag">----</span>项目的静态资源文件夹，默认<span class="selector-tag">images</span>，<span class="selector-tag">javascripts</span>，<span class="selector-tag">stylesheets</span>。</span><br><span class="line">│   ├── <span class="selector-tag">images</span></span><br><span class="line">│   ├── <span class="selector-tag">javascripts</span></span><br><span class="line">│   └── <span class="selector-tag">stylesheets</span></span><br><span class="line">│       └── <span class="selector-tag">style</span><span class="selector-class">.css</span></span><br><span class="line">├── <span class="selector-tag">routes</span>  <span class="selector-tag">----</span>项目的路由文件夹，相当于<span class="selector-tag">SpringMVC</span>中的<span class="selector-tag">Controller</span>，默认<span class="selector-tag">index</span><span class="selector-class">.js</span>，<span class="selector-tag">users</span><span class="selector-class">.js</span>。</span><br><span class="line">│   ├── <span class="selector-tag">index</span><span class="selector-class">.js</span></span><br><span class="line">│   └── <span class="selector-tag">users</span><span class="selector-class">.js</span></span><br><span class="line">└── <span class="selector-tag">views</span>  <span class="selector-tag">----</span>页面文件夹，相当于<span class="selector-tag">MVC</span>框架中的<span class="selector-tag">view</span>，<span class="selector-tag">Ejs</span>模板或者<span class="selector-tag">jade</span>模板。</span><br><span class="line">    ├── <span class="selector-tag">error</span><span class="selector-class">.jade</span></span><br><span class="line">    ├── <span class="selector-tag">index</span><span class="selector-class">.jade</span></span><br><span class="line">    └── <span class="selector-tag">layout</span><span class="selector-class">.jade</span></span><br></pre></td></tr></table></figure></p>
<h2 id="2-3-安装模板引擎Ejs"><a href="#2-3-安装模板引擎Ejs" class="headerlink" title="2.3.安装模板引擎Ejs"></a>2.3.安装模板引擎Ejs</h2><p>2.2节中创建的程序中，默认使用的是jade模板引擎(jade模板已经更名为Pug模板了)，但个人觉得Ejs更适合后端开发更易上手，jade虽然简洁但不是很直观，所以替换成了Ejs模板<a href="https://github.com/visionmedia/ejs" target="_blank" rel="noopener">官网</a>，替换方法如下：</p>
<ul>
<li>打开nodeproject目录下的app.js</li>
<li>找到<code>app.set(&#39;view engine&#39;, &#39;jade&#39;);</code>将其中的jade替换为ejs</li>
<li>在nodeproject目录下执行<code>npm install ejs --save</code></li>
</ul>
<p>上面几步就将默认的jade模板替换为了ejs模板了<br>接着测试使用ejs模板,步骤如下</p>
<ul>
<li>进入<code>nodeproject-&gt;views</code>目录，将下面的jade模板文件删除。</li>
<li><p>新建<code>index.ejs</code>文件，将如下内容粘贴进去，并保存完成</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">title</span> %&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">'stylesheet'</span> <span class="attr">href</span>=<span class="string">'/stylesheets/style.css'</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">title</span> %&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Welcome to <span class="tag">&lt;<span class="name">%=</span> <span class="attr">title</span> %&gt;</span> use ejs template<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>再次回到nodeproject目录下，执行</p>
<figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">DEBUG</span>=nodeproject &amp; npm <span class="keyword">start</span></span><br><span class="line">或直接输入</span><br><span class="line">npm <span class="keyword">start</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>然后在浏览器中打开 <code>http://localhost:3000/</code> 网址可以看到我们成功将jade模板替换为ejs。界面如下：<br><img src="http://imgcdn.yalongkeji.com/express1.jpg" alt="express"></p>
<p>上面介绍的是手动将jade模板替换为ejs，如果最开始就是使用Ejs模板创建项目可以直接使用<code>express -e webappname</code>就可以直接使用ejs模板创建了，哈哈，感觉是不是饶了个弯，但就是想让大家多了解一些，不要喷我啊。</p>
<p>本篇就到此为止，简单的介绍了安装Nodejs，express和Ejs的方法步骤，接下来的博客将介绍和bootstrap，JsViews和Mongodb的集成 </p>
<blockquote>
<p>想了解更多技术文章信息，请继续关注<a href="http://wiliam.me">wiliam.s Blog</a>，谢谢，欢迎来访！</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> qianduan </category>
            
            <category> Nodejs </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Nodejs </tag>
            
            <tag> Express </tag>
            
            <tag> Ejs </tag>
            
            <tag> bootstrap </tag>
            
            <tag> JsViews </tag>
            
            <tag> Mongodb </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[linux下如何安装nodejs]]></title>
      <url>http://wiliam.me/2016/12/18/20161218162411.html</url>
      <content type="html"><![CDATA[<blockquote>
<p>在windows下安装node很简单，直接按照安装向导下一步就可以了，今天试验了下如何在linux下安装，供需要的同学参考。</p>
</blockquote>
<a id="more"></a>
<h1 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h1><p>这里推荐在阿里npm的镜像下载nodejs的安装包，<a href="https://npm.taobao.org" target="_blank" rel="noopener">点击访问</a>，找到Node.js镜像链接点击进入就能看到安装包了。官网不太稳定，自己下载了好几次都断了，而且花的时间也是很长，不知道是不是被墙了，感觉好坑。</p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>我这里是直接安装编译好的nodejs的，自己下载的版本地址：<a href="https://npm.taobao.org/mirrors/node/latest-v7.x/node-v7.3.0-linux-x64.tar.gz" target="_blank" rel="noopener">点击下载</a>。<br>下载完成后将压缩包放到你想安装的目录解压，例如我的nodejs安装目录为<code>/home/wiliam/software/work</code><br>然后执行如下命令<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mv <span class="keyword">node</span><span class="title">-v7</span>.<span class="number">3.0</span>-linux-x64 <span class="keyword">node</span> <span class="title">#将文件夹改名为node</span></span><br><span class="line">cd <span class="keyword">node</span><span class="title">/bin</span></span><br><span class="line">./<span class="keyword">node</span> <span class="title">-v</span></span><br></pre></td></tr></table></figure></p>
<p>此时会看到输出的版本信息<br>但这样只是在当前目录下好使，还没有配置到环境变量下，执行下面步骤</p>
<ol>
<li>执行<code>cd ~</code></li>
<li><code>vi .bashrc</code></li>
<li>在.bashrc文件的末尾添加 <code>export PATH=/home/wiliam/software/work/node/bin:$PATH</code>注意将<code>/home/wiliam/software/work/node/bin</code>替换为你自己的node的目录</li>
<li>再次执行<code>source .bashrc</code></li>
<li>测试<code>node -v</code></li>
</ol>
<p>如果输出版本号就证明你安装node成功了。</p>
<blockquote>
<p>想了解更多技术文章信息，请继续关注<a href="http://wiliam.me">wiliam.s Blog</a>，谢谢，欢迎来访！</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> qianduan </category>
            
            <category> Nodejs </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Nodejs </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JVM的内存模型简介]]></title>
      <url>http://wiliam.me/2016/11/16/20161116174712.html</url>
      <content type="html"><![CDATA[<blockquote>
<p>最近在公司遇到了系统的性能效率问题，其中有内存溢出导致的。分析内存溢出的问题需要对<code>JVM</code>内存模型有较为清晰的理解，之前自己看书《深入理解Java虚拟机:JVM高级特性与最佳实践》中有对<code>JVM</code>内存模型详细介绍，不过已经很久记不太清了，趁这个机会自己再次总结下，分享出来共大家参考。</p>
</blockquote>
<a id="more"></a>
<h1 id="1-JVM的内存模型总体结构"><a href="#1-JVM的内存模型总体结构" class="headerlink" title="1.JVM的内存模型总体结构"></a>1.JVM的内存模型总体结构</h1><p>JVM在执行java程序的过程中会把它所管理的内存划分为若干个不同的数据区域。这些区域都有各自的用途，以及创建和销毁的时间，有的区域随着虚拟机进程的启动而存在，有些区域则依赖用户线程的启动和结束而建立和销毁。下图是JVM内存模型的整体结构<br><img src="http://imgcdn.yalongkeji.com/JVM.jpg" alt="JVM内存模型"></p>
<h2 id="1-1-程序计数器"><a href="#1-1-程序计数器" class="headerlink" title="1.1 程序计数器"></a>1.1 程序计数器</h2><p>程序计数器(Program Counter Register)是一块较小的内存空间，它可以看做是当前线程所执行的字节码的行号指示器，多线程时，当线程数超过CPU数量或CPU内核数量，线程之间就要根据时间片轮询抢夺CPU时间资源。因此每个线程有要有一个独立的程序计数器，记录下一条要运行的指令。线程私有的内存区域。如果执行的是JAVA方法，计数器记录正在执行的java字节码地址，如果执行的是native方法，则计数器为空。</p>
<p>关键点：</p>
<ul>
<li>此内存区是线程私有内存区域</li>
<li>此内存区是唯一一个在Java虚拟机规范中没有规定任何<code>OutOfMemoryError</code>情况的区域。</li>
</ul>
<h2 id="1-2-虚拟机栈-VM-Stack"><a href="#1-2-虚拟机栈-VM-Stack" class="headerlink" title="1.2 虚拟机栈(VM Stack)"></a>1.2 虚拟机栈(VM Stack)</h2><p>管理JAVA方法执行的内存模型。每个方法执行时都会创建一个桢栈来存储方法的的变量表、操作数栈、动态链接方法、返回值、返回地址等信息。栈的大小决定了方法调用的可达深度（递归多少层次，或嵌套调用多少层其他方法，-Xss参数可以设置虚拟机栈大小）。栈的大小可以是固定的，或者是动态扩展的。如果请求的栈深度大于最大可用深度，则抛出stackOverflowError；如果栈是可动态扩展的，但没有内存空间支持扩展，则抛出OutofMemoryError。<br>使用jclasslib工具可以查看class类文件的结构。下图为栈帧结构图：<br><img src="http://imgcdn.yalongkeji.com/zhanzhen.jpg" alt="栈帧图"></p>
<p>关键点：</p>
<ul>
<li>此内存区是线程私有内存区域</li>
<li>在JVM规范中，对这个区域规定了两种异常状况：如果线程请求的栈深度大于虚拟机所允许的深度，将抛出StackOverflowError异常；如果虚拟机栈可以动态扩展（当前大部分的JVM都可以动态扩展），如果扩展时无法申请到足够的内存，就会抛出OutOfMemoryError异常。</li>
</ul>
<h2 id="1-3-本地方法栈"><a href="#1-3-本地方法栈" class="headerlink" title="1.3 本地方法栈"></a>1.3 本地方法栈</h2><p>本地方法栈(Native Method Stack)与虚拟机栈所发挥的作用是非常相似的，它们之间的区别不过是虚拟机栈为虚拟机执行java方法(也就是字节码)服务，而本地方法栈则为虚拟机用到的Native方法服务。在虚拟机规范中对本地方法栈中方法使用的语言，使用方式与数据结构并没有强制规定，因此虚拟机可以自动的实现它。甚至有的虚拟机（如HotSpot虚拟机）直接就是把本地方法和虚拟机栈合二为一。</p>
<p>关键点：</p>
<ul>
<li>本地方法栈区也是线程使用内存区域</li>
<li>本地方法栈区也会抛出StackOverflowError和OutOfMemoryError异常。</li>
</ul>
<h2 id="1-4-JAVA堆"><a href="#1-4-JAVA堆" class="headerlink" title="1.4 JAVA堆"></a>1.4 JAVA堆</h2><p>JAVA堆(Java heap)是Java虚拟机所管理的内存中最大的一块。Java堆是被所以线程共享的一块内存区域。虚拟机进行启动时创建。存放所以对象实例和数组。</p>
<p>Java堆是垃圾收集器管理的主要区域，因此很多时候也称作<code>GC堆</code>因为目前垃圾回收是分代回收的，所以可以将Java堆再细分为新生代和老年代，新生代又可细分为Eden空间，Survivor0(S0,from space)空间，Survivor1空间(S1,to space)。<br>新生代用于存放刚创建的对象以及年轻的对象，刚创建的对象都放入eden，S0和S1都至少经过一次GC并幸存，如果对象一直没有被回收，生存得足够长，老年对象就会被移入老年代。下图为堆内存结构<br><img src="http://imgcdn.yalongkeji.com/heapSpace.jpg" alt="java对内存结构图"></p>
<p>关键点：</p>
<ul>
<li>Java堆是线程共享的内存区域</li>
<li>Java堆可以处于物理上不连续的内存空间中，只要逻辑上是连续的即可，就像我们的磁盘空间一样。如果在堆中没有内存完成实例分配，并且堆也无法再扩展时将会抛出OutOfMemoryError异常。</li>
</ul>
<h2 id="1-5-方法区"><a href="#1-5-方法区" class="headerlink" title="1.5 方法区"></a>1.5 方法区</h2><p>方法区(Method Area)与java堆一样，是各个线程的共享区域。用于存放被虚拟机加载的类的元数据信息：如常量、静态变量、即时编译器编译后的代码。虽然Java虚拟机规范把方法区描述为堆的一个逻辑部分，但是它却有一个别名叫做Non-Heap（非堆），目的应该是与java堆区分开来</p>
<p><strong>注：</strong> 在HotSpot虚拟机上 方法区还有一个别名“永久代(Permanent Generation)”,其实本质上两者并不等价，仅仅是因为HotSpot的垃圾收集器可以像管理java堆一样管理这部分内存，能够省去专门为方法区编写内存管理代码的工作。对于其他的虚拟机，如BEA JRockit,IBM J9来说是不存在永久代的概念的。<br>关键点：</p>
<ul>
<li>方法区是线程共享的内存区域</li>
<li>方法区无法满足分配需求时，也会抛出OutOfMemoryError异常</li>
<li>jdk1.7的HotSpot中已经把原本放在永久代中的字符串常量池移出。</li>
<li>方法区进行垃圾回收的条件是非常苛刻的：回收的基本条件至少有：所有该类的实例被回收，而且装载该类的ClassLoader被回收</li>
</ul>
<h2 id="1-6-运行时常量时"><a href="#1-6-运行时常量时" class="headerlink" title="1.6 运行时常量时"></a>1.6 运行时常量时</h2><p>运行时常量池(Runtime Constant Pool)是方法区的一部分。Class文件中除了有类的版本、字段、方法、接口等描述信息wait，还有一项信息是常量池(Constant Pool Table),用于存放编译期生成的各种字面量和符号引用，这部分内容将在类加载后进入方法区的运行时常量池中存放。<br>运行时常量池相对于Class文件常量池的另外一个重要特征是具备动态性，java语言并不要求常量一定只有编译期才能产生，也就是并非预置如Class文件中常量池的内容才能进入方法区运行时常量池，运行期间也可能将新的常量放入池中。其中利用较多的是String类的intern()方法。<br>关键点：</p>
<ul>
<li>运行时常量池是方法区的一部分</li>
<li>当常量池也无法再申请到内存时会抛出utOfMemoryError异常。</li>
</ul>
<blockquote>
<p>想了解更多技术文章信息，请继续关注<a href="http://wiliam.me">wiliam.s Blog</a>，谢谢，欢迎来访！</p>
</blockquote>
<hr>
<p>参考资料<br>《深入理解Java虚拟机:JVM高级特性与最佳实践》·<font color="gray" size="2">周志明著</font>·<font color="gray" size="2">第二版</font><br><a href="http://blog.csdn.net/kingofworld/article/details/17718587" target="_blank" rel="noopener">JVM内存模型及垃圾回收算法</a>·<font color="gray" size="2">CSDN</font></p>
]]></content>
      
        <categories>
            
            <category> houduan </category>
            
            <category> JVM </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JVM </tag>
            
            <tag> JAVA </tag>
            
            <tag> GC </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SpringCloud整合搭建教程]]></title>
      <url>http://wiliam.me/2016/11/14/20161114105113.html</url>
      <content type="html"><![CDATA[<blockquote>
<p>SpringCloud提供了全套的微服务解决方案，将来有可能会成为微服务事实上的标准，所以有必要好好的学习一下。接下来文章会带你一步一步的搭建SpringCloud开发自己的微服务架构。</p>
</blockquote>
<a id="more"></a>
<h1 id="1-微服务介绍"><a href="#1-微服务介绍" class="headerlink" title="1.微服务介绍"></a>1.微服务介绍</h1><p>网上介绍的微服务概念有很多，但并没有一个严格的定义，下面是按照马丁·福勒先生的博客给出的微服务介绍：<br>微服务架构是一种架构模式，它提倡将单一应用程序划分成一组小的服务，服务之间互相协调、互相配合，为用户提供最终价值。每个服务运行在其独立的进程中，服务与服务间采用轻量级的通信机制互相沟通(通常是基于HTTP的RESTful API)。每个服务都围绕着具体业务进行构建，并且能够被独立地部署到生产环境、类生产环境等。另外，应尽量避免同一的、集中式的服务管理机制，对具体的一个服务而言，应根据业务上下文，选择合适的语言、工具对其进行构建。<br>[点击访问马丁·福勒对微服务的定义][<a href="http://martinfowler.com/articles/microservices.html]" target="_blank" rel="noopener">http://martinfowler.com/articles/microservices.html]</a></p>
<h1 id="2-SpringCloud简介"><a href="#2-SpringCloud简介" class="headerlink" title="2.SpringCloud简介"></a>2.SpringCloud简介</h1><p>Spring Cloud是在Spring Boot的基础上构建的，用于简化分布式系统构建的工具集，为开发人员提供快速建立分布式系统中的一些常见的模式。<br><a href="http://projects.spring.io/spring-cloud/" target="_blank" rel="noopener">官网</a>介绍的有</p>
<ul>
<li>配置管理(configuration management)</li>
<li>服务发现(service discovery)</li>
<li>断路器(circuit breakers)</li>
<li>智能路由(intelligent routing)</li>
<li>微代理(micro-proxy)</li>
<li>控制总线(control bus)</li>
<li>一次性令牌(one-time tokens)</li>
<li>全局锁(global locks)</li>
<li>领导选举(leadership election)</li>
<li>分布式会话(distributed sessions)</li>
<li>集群状态(cluster state)</li>
</ul>
<p>SpringCloud的上面的各个功能是通过SpringCloud的子项目实现的，主要有</p>
<ul>
<li>Spring Cloud config</li>
<li>Spring Cloud Netflix</li>
<li>Spring Cloud Bus</li>
<li>Spring Cloud for Cloud Foundry</li>
<li>Spring Cloud Cloud Foundry Service Broker</li>
<li>Spring Cloud Cluster</li>
<li>Spring Cloud Consul</li>
<li>Spring Cloud Security</li>
<li>Spring Cloud Sleuth</li>
<li>Spring Cloud Data Flow</li>
<li>Spring Cloud Stream</li>
<li>Spring Cloud Stream App Starters</li>
<li>Spring Cloud Task</li>
<li>Spring Cloud Task App Starrters</li>
<li>Spring Cloud Zookeeper</li>
<li>Spring Cloud for Amazon Web Services</li>
<li>Spring Cloud Connectors</li>
<li>Spring Cloud Starters</li>
<li>Spring Cloud CLI</li>
</ul>
<blockquote>
<p>想了解更多技术文章信息，请继续关注<a href="http://wiliam.me">wiliam.s Blog</a>，谢谢，欢迎来访！</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> houduan </category>
            
            <category> spring </category>
            
        </categories>
        
        
        <tags>
            
            <tag> spring </tag>
            
            <tag> springcloud </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[个人在线简历制作]]></title>
      <url>http://wiliam.me/2016/11/08/20161108084329.html</url>
      <content type="html"><![CDATA[<p><img src="http://www.jobdeer.com/img/rd.png" alt="img"></p>
<blockquote>
<p><a href="https://github.com/geekcompany/DeerResume" target="_blank" rel="noopener">DeerResume</a>项目介绍了如何用markdown制作个人在线简历。不过其中的数据不是存储到本地的，个人感觉不太放心，所以把他的源码clone下来，自己修改了下，可以将数据存储到本地。有需要的同学可以看下。</p>
</blockquote>
<a id="more"></a>
<h1 id="1-DeerResume简要介绍"><a href="#1-DeerResume简要介绍" class="headerlink" title="1.DeerResume简要介绍"></a>1.DeerResume简要介绍</h1><p>下面是<a href="https://github.com/geekcompany/DeerResume" target="_blank" rel="noopener">DeerResume</a>官方GitHub的介绍，只是摘抄过来。<br>最好用的MarkDown在线简历工具，可在线预览、编辑、设置访问密码和生成PDF</p>
<ul>
<li>可自行搭建，任意修改页面样式和风格</li>
<li>免安装，可放置于任何支持静态页面的云和服务器（当然包括GitHub)</li>
<li>在线MarkDown编辑器+实时预览</li>
<li>在浏览器中实时保存草稿</li>
<li>支持阅读密码，您可以直接将网址和密码发送，供招聘方在线浏览</li>
<li><p>一键生成简单雅致的PDF，供邮件发送及打印</p>
<p>点击访问<a href="https://github.com/geekcompany/DeerResume" target="_blank" rel="noopener">原项目地址</a></p>
</li>
</ul>
<h1 id="2-个人修改"><a href="#2-个人修改" class="headerlink" title="2.个人修改"></a>2.个人修改</h1><p><a href="https://github.com/geekcompany/DeerResume" target="_blank" rel="noopener">DeerResume</a>是在线简历制作工具，只要了解markdown语法就可以写出自己的个性化简历。不过按照<a href="https://github.com/geekcompany/DeerResume" target="_blank" rel="noopener">DeerResume</a>介绍的“如何在没有云端的情况下使用DeerResume？”方法并未好使，主要是用到后台PHP请求了，但并没有PHP服务器支持，所以就不好使了。然后我把代码clone下来，研究了一下，对其中有写修改。</p>
<p>主要修改如下：</p>
<ul>
<li>可以将简历数据存储到本地。</li>
<li>支持本地设置阅读密码功能。</li>
<li>新增简历页面置顶功能。</li>
</ul>
<p>暂不支持的功能</p>
<ul>
<li>不能在线MarkDown编辑器+实时预览</li>
</ul>
<p><a href="http://resumedemo.wiliam.me/" target="_blank" rel="noopener">此项目示例</a>。<br>初始密码:12345</p>
<h1 id="3-FAQ"><a href="#3-FAQ" class="headerlink" title="3.FAQ"></a>3.FAQ</h1><ol>
<li><p>如何修改访问密码？<br><code>pwd.json</code>中<code>vpass</code>字段存储的是访问密码</p>
</li>
<li><p>如何在显示输入密码的时候显示首页的标题和子标题？<br>将data.json、err.json和pwd.json中的title字段和subtitle字段都写值即可。</p>
</li>
<li><p>如何编写自己的在线简历？<br>编写完自己的markdown简历后，将内容复制到data.json中的content字段即可。</p>
</li>
<li><p>修改访问密码后密码不好使？<br>此问题主要是浏览器的缓存在作怪,修改如下：<br>修改j<code>s/app.js</code>文件的第6行<code>var pwdurl = &#39;pwd.json?v=1.0.0&#39;;</code><br>将后面的版本号随便修改一个数字；修改index.html文件的28行<code>&lt;script src=&quot;js/app.js?v=1.0.0&quot;&gt;&lt;/script&gt;</code>将后面的版本号随便修改一个数字，这时再刷新下浏览器就好使了。</p>
</li>
</ol>
<p><strong>注意</strong><br>这里复制自己的markdown简历到<code>data.json</code>中的<code>content</code>字段时要注意简历中的换行符。需要替换成\r\n在一行显示才可以。<br>这里我是自己写java代码替换的，需要使用的有<code>json-lib</code>包和apache的<code>common-io</code>包，代码如下：<br><figure class="highlight java"><figcaption><span>制作json代码</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.io.FileUtils;</span><br><span class="line"><span class="keyword">import</span> net.sf.json.JSONObject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenJson</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">		resume();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">resume</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">		JSONObject jsonObject = <span class="keyword">new</span> JSONObject();</span><br><span class="line">		jsonObject.put(<span class="string">"local"</span>, <span class="number">1</span>);</span><br><span class="line">		jsonObject.put(<span class="string">"errno"</span>, <span class="number">0</span>);</span><br><span class="line">		jsonObject.put(<span class="string">"show"</span>, <span class="number">1</span>);</span><br><span class="line">		jsonObject.put(<span class="string">"title"</span>, <span class="string">"Java程序员简历模板"</span>);</span><br><span class="line">		jsonObject.put(<span class="string">"subtitle"</span>, <span class="string">"-----------就是个模板"</span>);</span><br><span class="line">		String content = FileUtils.readFileToString</span><br><span class="line">		    (<span class="keyword">new</span> File(<span class="string">"G:/test/jsontest.txt"</span>), <span class="string">"UTF-8"</span>);</span><br><span class="line">		jsonObject.put(<span class="string">"content"</span>, content);</span><br><span class="line">		System.out.println(jsonObject.toString());</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;      </span><br></pre></td></tr></table></figure></p>
<p>maven构建项目的pom.xml的依赖如下：<br><figure class="highlight xml"><figcaption><span>制作json代码pom依赖</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.sf.json-lib<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>json-lib<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">classifier</span>&gt;</span>jdk15<span class="tag">&lt;/<span class="name">classifier</span>&gt;</span><span class="comment">&lt;!--指定jdk版本--&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">		</span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
<p>示例截图：<br><img src="http://imgcdn.yalongkeji.com/mima.jpg" alt><br><img src="http://imgcdn.yalongkeji.com/DeerResumeSimple.jpg" alt></p>
<blockquote>
<p>想了解更多技术文章信息，请继续关注<a href="http://wiliam.me">wiliam.s Blog</a>，谢谢，欢迎来访！</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> tool </category>
            
            <category> 招聘 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 招聘 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[java逻辑运算与位运算]]></title>
      <url>http://wiliam.me/2016/11/04/20161104083145.html</url>
      <content type="html"><![CDATA[<blockquote>
<p>逻辑运算又称布尔运算 布尔用数学方法研究逻辑问题，成功地建立了逻辑演算。他用等式表示判断，把推理看作等式的变换。这种变换的有效性不依赖人们对符号的解释，只依赖于符号的组合规律 。</p>
</blockquote>
<p>学习数据结构知识总会用到逻辑运算，所以将此知识再次巩固下，减少对学习数据结构等其它知识的障碍。</p>
<a id="more"></a>
<h1 id="1-基本概念"><a href="#1-基本概念" class="headerlink" title="1.基本概念"></a>1.基本概念</h1><p>逻辑常量与变量：逻辑常量只有两个，即0和1，用来表示两个对立的逻辑状态。逻辑变量与普通代数一样，也可以用字母、符号、数字及其组合来表示，但它们之间有着本质区别，因为逻辑常量的取值只有两个，即0和1，而没有中间值。</p>
<p>逻辑运算：逻辑运算：在逻辑代数中，有与、或、非三种基本逻辑运算。表示逻辑运算的方法有多种，如语句描述、逻辑代数式、真值表、卡诺图等。</p>
<h1 id="2-java中的逻辑运算符和位运算符"><a href="#2-java中的逻辑运算符和位运算符" class="headerlink" title="2.java中的逻辑运算符和位运算符"></a>2.java中的逻辑运算符和位运算符</h1><h2 id="2-1-逻辑运算符"><a href="#2-1-逻辑运算符" class="headerlink" title="2.1. 逻辑运算符"></a>2.1. 逻辑运算符</h2><p>逻辑运算符： 逻辑与’&amp;&amp;’，逻辑或’||’，逻辑非’!’，逻辑异或’^’，逻辑与’&amp;’，逻辑或’|’</p>
<p>逻辑运算真值表：下面的<code>or=||</code> 和 <code>wor=|</code></p>
<table>
<thead>
<tr>
<th>A</th>
<th>B</th>
<th>A&amp;&amp;B</th>
<th>A or B</th>
<th>!A</th>
<th>A^B</th>
<th>A&amp;B</th>
<th>A wor B </th>
</tr>
</thead>
<tbody>
<tr>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>true</td>
<td>false</td>
<td>false</td>
<td>false</td>
</tr>
<tr>
<td>true</td>
<td>false</td>
<td>false</td>
<td>true</td>
<td>false</td>
<td>true</td>
<td>false</td>
<td>true </td>
</tr>
<tr>
<td>false</td>
<td>true</td>
<td>false</td>
<td>true</td>
<td>true</td>
<td>true</td>
<td>false</td>
<td>true </td>
</tr>
<tr>
<td>true</td>
<td>true</td>
<td>true</td>
<td>true</td>
<td>false</td>
<td>false</td>
<td>true</td>
<td>true </td>
</tr>
</tbody>
</table>
<p>A和B是逻辑运算的两个逻辑变量；</p>
<p>两种逻辑与（&amp;&amp;和&amp;）的运算规则基本相同，两种逻辑或（||和|）的运算规则也基本相同。<br>&amp;和|运算是把逻辑表达式全部计算完，而&amp;&amp;和||运算具有短路计算功能。</p>
<p>对于&amp;来说，如果左侧条件为false，也会计算右侧条件的值，而对于&amp;&amp;来说，如果左侧的条件为false，则不计算右侧的条件，这种现象被称作短路现象。</p>
<p>所谓短路计算，是指系统从左至右进行逻辑表达式的计算，一旦出现计算结果已经确定的情况，则计算过程即被终止。<br>对于&amp;&amp;运算来说，只要运算符左端的值为false，则因无论运算符右端的值为true或为false，其最终结果都为false。<br>所以，系统一旦判断出&amp;&amp;运算符左端的值为false，则系统将终止其后的计算过程；</p>
<p>对于 || 运算来说，只要运算符左端的值为true，则因无论运算符右端的值为true或为false，其最终结果都为true。<br>所以，系统一旦判断出|| 运算符左端的值为true，则系统将终止其后的计算过程。 </p>
<p><strong>利用短路现象：</strong><br>在程序设计时使用&amp;&amp;和||运算符，不建议使用&amp;和|运算符。<br><strong>注：异或相同为false，相反则为true。</strong></p>
<h2 id="2-2-位运算符"><a href="#2-2-位运算符" class="headerlink" title="2.2. 位运算符"></a>2.2. 位运算符</h2><p>位运算符：位与’&amp;’，位或’|’，位非’~’，位异或’^’，右移’&gt;&gt;’，左移’&lt;&lt;’，0填充的右移’&gt;&gt;&gt;’</p>
<p>位运算的位与’&amp;’，位或’|’，位非’~’，位异或’^’与逻辑运算的相应操作的真值表完全相同，其差别只是位运算操作的操作数和运算结果都是二进制整数，而逻辑运算相应操作的操作数和运算结果都是逻辑值boolean型。 </p>
<p>运算规则，下面的<code>or=||</code> 和 <code>wor=|</code></p>
<table>
<thead>
<tr>
<th>A</th>
<th>B</th>
<th>A&amp;B</th>
<th>A wor B</th>
<th>A^B </th>
</tr>
</thead>
<tbody>
<tr>
<td> 0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0   </td>
</tr>
<tr>
<td> 1</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>1   </td>
</tr>
<tr>
<td> 0</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>1   </td>
</tr>
<tr>
<td> 1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>0   </td>
</tr>
</tbody>
</table>
<p>简单的说<br>&amp;:与运算。只有同为真时才为真，近似于乘法。<br>|:或运算。只有同为假时才为假，近似于加法。<br>^:异或运算。相同为假，不同为真。</p>
<p>位运算符说明，下面的<code>or=||</code> 和 <code>wor=|</code> </p>
<table>
<thead>
<tr>
<th>运算符</th>
<th>名称</th>
<th>示例</th>
<th>说明                      </th>
</tr>
</thead>
<tbody>
<tr>
<td>  &amp;</td>
<td>位与</td>
<td>x&amp;y</td>
<td>把x和y按位求与            </td>
</tr>
<tr>
<td> wor</td>
<td>位或</td>
<td>x wor y</td>
<td>把x和y按位求或            </td>
</tr>
<tr>
<td> ~</td>
<td>位非</td>
<td>~x</td>
<td>把x按位求非               </td>
</tr>
<tr>
<td> ^</td>
<td>位异或</td>
<td>x^y</td>
<td>把x和y按位求异或  </td>
</tr>
<tr>
<td> &gt;&gt;</td>
<td>右移</td>
<td>x &gt;&gt; y</td>
<td>把x的各位右移y位          </td>
</tr>
<tr>
<td> &lt;&lt;</td>
<td>左移</td>
<td>x &lt;&lt; y</td>
<td>把x的各位左移y位          </td>
</tr>
<tr>
<td> &gt;&gt;&gt;</td>
<td>右移</td>
<td>x &gt;&gt;&gt; y</td>
<td>把x的各位右移y位,左边填0 </td>
</tr>
</tbody>
</table>
<p>下边为位&amp;运算：</p>
<pre><code>int a = 15;    //x等于二进制数的00001111
int b = 6;     //y等于二进制数的00000110
int c = x&amp;y    //z等于二进制数的00000110
            结果为：  二进制数的00000110
</code></pre><p>右移是将一个二进制数按指定移动的位数向右移位，移掉的被丢弃，左边移进的部分或者补0（当该数为正时），或者补1（当该数为负时）。这是因为整数在机器内部采用补码表示法，正数的符号位为0，负数的符号位为1。</p>
<p>将一个数左移”&lt;&lt;”会使该值乘以2的幂。<br>将一个数右移&gt;&gt;”会使该值除以2的幂。</p>
<p>右移（补零）运算符，即无符号右移，”&gt;&gt;&gt;”永远不会产生负号，因为其符号位总是被补零。 不论被移动数是正数还是负数，左边移进的部分一律补0。</p>
 <figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="number">1</span>&lt;&lt;<span class="number">3</span>  = <span class="number">8</span></span><br><span class="line"><span class="number">8</span>&gt;&gt;<span class="number">3</span>  = <span class="number">1</span></span><br><span class="line"><span class="built_in">int</span> x = <span class="number">70</span>;   <span class="comment">//x等于二进制数的01000110</span></span><br><span class="line"><span class="built_in">int</span> y = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">int</span> z = x&gt;&gt;y  <span class="comment">//z等于二进制数的00010001</span></span><br><span class="line">即运算结果为z等于二进制数<span class="number">00010001</span>，即z等于十进制数<span class="number">17</span>。</span><br><span class="line"><span class="built_in">int</span> x = <span class="number">-70</span>;  <span class="comment">//x等于二进制数的11000110</span></span><br><span class="line"><span class="built_in">int</span> y = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">int</span> z = x&gt;&gt;y  <span class="comment">//z等于二进制数的11101110</span></span><br><span class="line">即运算结果为z等于二进制数<span class="number">11101110</span>，即z等于十进制数<span class="number">-18</span>。</span><br></pre></td></tr></table></figure>
<p>右移和左移操作，是整数机器数的补码表示法。<br>&amp;运算符规定必须信号A和B都被充电，其结果才是充电。(1表示充电，0表示未充电)<br>|运算符规定只要信号A或B被充电，输出结果就是充电。<br>^异或（XOR）运算符规定如果信号A或B之一被充电，但是信号A和B不是同时被充电，则结果为充电。<br>~运算符也称为按位求补，它翻转所有的充电状态值。</p>
<blockquote>
<p>想了解更多技术文章信息，请继续关注<a href="http://wiliam.me">wiliam.s Blog</a>，谢谢，欢迎来访！</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> houduan </category>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[java基础之hashmap实现]]></title>
      <url>http://wiliam.me/2016/11/02/20161102091056.html</url>
      <content type="html"><![CDATA[<blockquote>
<p>作为java程序员的你，一定每天都在用hashmap，那么你知道他的底层实现原理吗，知道的话，那你可以忽略本文章了，不知道的话，可以一起看看，共同学习成长。</p>
</blockquote>
<p>HashMap 和 HashSet 是 Java集合家族的两个重要成员，其中 HashMap 是 Map 接口的常用实现类，HashSet 是 Set 接口的常用实现类。虽然 HashMap 和 HashSet 实现的接口规范不同，但它们底层的 Hash 存储机制完全一样，甚至 HashSet 本身就采用 HashMap 来实现的。</p>
<a id="more"></a>
<blockquote>
<p>在读取本文之前，需要对数据结构hash表和逻辑运算有基本了解，如果不清楚可以参考我下面的blog：<br><a href="/2016/11/02/20161102090928.html">数据结构之hash表</a><br>[java逻辑运算与位运算<a href="/2016/11/04/20161104083145.html">7</a></p>
</blockquote>
<h1 id="1-hashmap介绍"><a href="#1-hashmap介绍" class="headerlink" title="1. hashmap介绍"></a>1. hashmap介绍</h1><p><code>hashmap</code>是基于<a href="/2016/11/02/20161102090928.html">hash表</a>的Map接口的非同步实现。此实现提供所有可选的映射操作，并允许使用null值和null键。此类不保证映射的顺序，特别是它不保证该顺序恒久不变。</p>
<h1 id="2-hashmap的数据结构"><a href="#2-hashmap的数据结构" class="headerlink" title="2. hashmap的数据结构"></a>2. hashmap的数据结构</h1><p>要知道hashmap是什么，首先要搞清楚它的数据结构，在java编程语言中，最基本的结构就是两种，一个是<code>数组</code>，另外一个是<code>模拟指针（引用）</code>，所有的数据结构都可以用这两个基本结构来构造的，hashmap也不例外。<code>Hashmap</code>实际上是一个数组和链表的结合体（在数据结构中，一般称之为<code>链表散列</code>），请看下图（横排表示数组，纵排表示数组元素[实际上是一个链表]）。<br><img src="http://imgcdn.yalongkeji.com/java_hash.jpg" alt="HaspMap数据结构图"></p>
<p>从上图中看到，<code>HashMap</code>底层就是一个数组结构，数组中的每一项又是一个链表。当新建一个HashMap的时候，就会初始化一个数组。</p>
<figure class="highlight java"><figcaption><span>HashMap默认构造函数</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//The table, resized as necessary. </span></span><br><span class="line">   <span class="comment">//Length MUST Always be a power of two.   </span></span><br><span class="line">   <span class="keyword">transient</span> Entry[] table;		</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">()</span> </span>&#123;       </span><br><span class="line">       table = <span class="keyword">new</span> Entry[DEFAULT_INITIAL_CAPACITY];        </span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><figcaption><span>Entry实现类定义</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> K key;</span><br><span class="line">    V value;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> hash;</span><br><span class="line">    Entry&lt;K,V&gt; next;</span><br><span class="line">	...</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><figcaption><span>Entry接口定义</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;    	</span><br><span class="line">	<span class="function">K <span class="title">getKey</span><span class="params">()</span></span>;    </span><br><span class="line">	<span class="function">V <span class="title">getValue</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function">V <span class="title">setValue</span><span class="params">(V value)</span></span>;	</span><br><span class="line">	<span class="function"><span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span></span>;	</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>  可以看出，<code>Entry</code>就是数组中的元素，每个 <code>Map.Entry</code> 其实就是一个<code>key-value</code>对，它持有一个指向下一个元素的引用，这就构成了<code>链表</code>。</p>
<h1 id="3-hashmap的存储和读取实现"><a href="#3-hashmap的存储和读取实现" class="headerlink" title="3. hashmap的存储和读取实现"></a>3. hashmap的存储和读取实现</h1><h2 id="3-1-存储"><a href="#3-1-存储" class="headerlink" title="3.1 存储"></a>3.1 存储</h2><figure class="highlight java"><figcaption><span>hashmap存储源码</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// HashMap允许存放null键和null值。</span></span><br><span class="line">    <span class="comment">// 当key为null时，调用putForNullKey方法，将value放置在数组第一个位置。</span></span><br><span class="line">    <span class="keyword">if</span> (key == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> putForNullKey(value);</span><br><span class="line">    <span class="comment">// 根据key的keyCode重新计算hash值。</span></span><br><span class="line">    <span class="keyword">int</span> hash = hash(key.hashCode());</span><br><span class="line">    <span class="comment">// 搜索指定hash值在对应table中的索引。</span></span><br><span class="line">    <span class="keyword">int</span> i = indexFor(hash, table.length);</span><br><span class="line">    <span class="comment">// 如果 i 索引处的 Entry 不为 null，通过循环不断遍历 e 元素的下一个元素。</span></span><br><span class="line">    <span class="keyword">for</span> (Entry&lt;K,V&gt; e = table[i]; e != <span class="keyword">null</span>; e = e.next) &#123;</span><br><span class="line">        Object k;</span><br><span class="line">        <span class="keyword">if</span> (e.hash == hash &amp;&amp; ((k = e.key) == key || key.equals(k))) &#123;</span><br><span class="line">            V oldValue = e.value;</span><br><span class="line">            e.value = value;</span><br><span class="line">            e.recordAccess(<span class="keyword">this</span>);</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果i索引处的Entry为null，表明此处还没有Entry。</span></span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="comment">// 将key、value添加到i索引处。</span></span><br><span class="line">    addEntry(hash, key, value, i);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><figcaption><span>方法addEntry源码</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">void</span> <span class="title">addEntry</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">int</span> bucketIndex)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 获取指定 bucketIndex 索引处的 Entry </span></span><br><span class="line">    Entry&lt;K,V&gt; e = table[bucketIndex];</span><br><span class="line">    <span class="comment">// 将新创建的 Entry 放入 bucketIndex 索引处</span></span><br><span class="line">    <span class="comment">//并让新的 Entry 指向原来的 Entry</span></span><br><span class="line">    table[bucketIndex] = <span class="keyword">new</span> Entry&lt;K,V&gt;(hash, key, value, e);</span><br><span class="line">    <span class="comment">// 如果 Map 中的 key-value 对的数量超过了极限</span></span><br><span class="line">    <span class="keyword">if</span> (size++ &gt;= threshold)</span><br><span class="line">    <span class="comment">// 把 table 对象的长度扩充到原来的2倍。</span></span><br><span class="line">        resize(<span class="number">2</span> * table.length);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> 从上面的<code>put</code> 和<code>addEntry</code>方法源代码中可以看出：当我们往HashMap中put元素的时候，先根据key的<code>hashCode</code>重新计算hash值，根据hash值得到这个元素在数组中的位置（即<code>下标</code>），如果数组该位置上已经存放有其他元素了，那么在这个位置上的元素将以链表的形式存放，遍历该位置的链表，如果存在key相等的元素，那么将新值替换旧值，并且将旧值返回，如果不存在key相等的元素，新加入的放在链头，最先加入的放在链尾，如果数组该位置上没有元素，就直接将该元素放到此数组中的该位置上。</p>
<p> 对上面 <code>put</code>方法和<code>addEntry</code>的源代码进一步解释，当程序试图将一个key-value对放入HashMap中时，程序首先根据该 key 的 <code>hashCode()</code> 返回值决定该 Entry 的存储位置：如果两个 Entry 的 key 的 <code>hashCode()</code> 返回值相同，那它们的存储位置相同。如果这两个 Entry 的 key 通过 equals 比较返回 true，新添加 Entry 的 value 将覆盖集合中原有 Entry 的 value，但key不会覆盖，并且将旧值返回。如果这两个 Entry 的 key 通过 equals 比较返回 false，新添加的 Entry 将与集合中原有 Entry 形成 Entry 链，而且新添加的 Entry 位于 Entry 链的头部。</p>
<p>  所以由此我们知道当系统决定存储HashMap中的key-value对时，完全没有考虑Entry中的value，仅仅只是根据key来计算并决定每个Entry的存储位置。我们完全可以把 Map 集合中的 value 当成 key 的附属，当系统决定了 key 的存储位置之后，value 随之保存在那里即可。</p>
<h2 id="3-2-读取"><a href="#3-2-读取" class="headerlink" title="3.2 读取"></a>3.2 读取</h2><p>当 <code>HashMap</code> 的每个 bucket 里存储的 Entry 只是单个 Entry ——也就是没有通过指针产生 Entry 链时，此时的 <code>HashMap</code> 具有最好的性能：当程序通过 key 取出对应 value 时，系统只要先计算出该 key 的 <code>hashCode()</code> 返回值，在根据该 hashCode 返回值找出该 key 在 table 数组中的索引，然后取出该索引处的 Entry，最后返回该 key 对应的 value 即可。看 HashMap 类的 <code>get(K key)</code> 方法代码：<br><figure class="highlight java"><figcaption><span>hashmap的读取源码</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(Object key)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"> <span class="comment">// 如果 key 是 null，调用 getForNullKey 取出对应的 value </span></span><br><span class="line"> <span class="keyword">if</span> (key == <span class="keyword">null</span>) </span><br><span class="line">	 <span class="keyword">return</span> getForNullKey(); </span><br><span class="line"> <span class="comment">// 根据该 key 的 hashCode 值计算它的 hash 码</span></span><br><span class="line"> <span class="keyword">int</span> hash = hash(key.hashCode()); </span><br><span class="line"> <span class="comment">// 直接取出 table 数组中指定索引处的值，</span></span><br><span class="line"> <span class="keyword">for</span> (Entry&lt;K,V&gt; e = table[indexFor(hash, table.length)]; </span><br><span class="line">	 e != <span class="keyword">null</span>; </span><br><span class="line">	 <span class="comment">// 搜索该 Entry 链的下一个 Entr </span></span><br><span class="line">	 e = e.next) 		</span><br><span class="line"> &#123; </span><br><span class="line">	 Object k; </span><br><span class="line">	 <span class="comment">// 如果该 Entry 的 key 与被搜索 key 相同</span></span><br><span class="line">	 <span class="keyword">if</span> (e.hash == hash &amp;&amp; ((k = e.key) == key </span><br><span class="line">		 || key.equals(k))) </span><br><span class="line">		 <span class="keyword">return</span> e.value; </span><br><span class="line"> &#125; </span><br><span class="line"> <span class="keyword">return</span> <span class="keyword">null</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>从上面代码中可以看出，如果 <code>HashMap</code> 的每个 <code>bucket</code> 里只有一个 Entry 时，HashMap 可以根据索引、快速地取出该 bucket 里的 Entry；在发生<code>Hash 冲突</code>情况下，单个 bucket 里存储的不是一个 Entry，而是一个 Entry 链，系统只能必须按顺序遍历每个 Entry，直到找到想搜索的 Entry 为止——如果恰好要搜索的 Entry 位于该 Entry 链的最末端（该 Entry 是最早放入该 bucket 中），那系统必须循环到最后才能找到该元素。<br>归纳起来简单地说，HashMap 在底层将<code>key-value</code> 当成一个整体进行处理，这个整体就是一个 Entry 对象。HashMap 底层采用一个 <code>Entry[]</code>数组来保存所有的 key-value 对，当需要存储一个 Entry 对象时，会根据 Hash 算法来决定其存储位置；当需要取出一个 Entry 时，也会根据 Hash 算法找到其存储位置，直接取出该 Entry。由此可见：HashMap 之所以能快速存、取它所包含的 Entry，完全类似于现实生活中母亲从小教我们的：不同的东西要放在不同的位置，需要时才能快速找到它。</p>
<h2 id="3-3-hash算法"><a href="#3-3-hash算法" class="headerlink" title="3.3. hash算法"></a>3.3. hash算法</h2><p>从<code>3.1存储</code>和<code>3.2的读取</code>中我们都看到<code>hash()</code>方法,此方法就是<code>哈希方法</code>。由此我们可以看到在hashmap中要找到某个元素，需要根据key的hash值来求得对应数组中的位置。如何计算这个位置就是hash算法。前面说过hashmap的数据结构是数组和链表的结合，所以我们当然希望这个hashmap里面的元素位置尽量的分布均匀些，尽量使得每个位置上的元素数量只有一个，那么当我们用<code>hash算法</code>求得这个位置的时候，马上就可以知道对应位置的元素就是我们要的，而不用再去遍历链表。 </p>
<p>上面的代码中为了避免增加时减少冲突先进行了一次<code>hash</code>运算：</p>
<figure class="highlight java"><figcaption><span>方法hash源码</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"> <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(<span class="keyword">int</span> h)</span> </span>&#123;</span><br><span class="line">    h ^= (h &gt;&gt;&gt; <span class="number">20</span>) ^ (h &gt;&gt;&gt; <span class="number">12</span>);</span><br><span class="line">    <span class="keyword">return</span> h ^ (h &gt;&gt;&gt; <span class="number">7</span>) ^ (h &gt;&gt;&gt; <span class="number">4</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>  上面put方法调用hash方法重新计算hash值，方法根据key的hashCode重新计算一次散列。此算法加入了高位计算，防止低位不变，高位变化时，造成的hash冲突。</p>
<p>   对于任意给定的对象，只要它的 <code>hashCode()</code> 返回值相同，那么程序调用 <code>hash(int h)</code> 方法所计算得到的 hash 码值总是相同的。我们首先想到的就是把hash值对数组长度取模运算，这样一来，元素的分布相对来说是比较均匀的。但是，<code>模</code>运算的消耗还是比较大的，在HashMap中是这样做的：调用 <code>indexFor(int h, int length)</code> 方法来计算该对象应该保存在 table 数组的哪个索引处。<code>indexFor(int h, int length)</code> 方法的代码如下：</p>
<figure class="highlight java"><figcaption><span>hashmap的indexFor方法</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">indexFor</span><span class="params">(<span class="keyword">int</span> h, <span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> h &amp; (length-<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个方法非常巧妙，它通过 <code>h &amp; (table.length -1)</code> 来得到该对象的保存位，而HashMap底层数组的长度总是 2 的 n 次方，这是HashMap在速度上的优化。在 HashMap 构造器中有如下代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="keyword">int</span> capacity = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (capacity &lt; initialCapacity)</span><br><span class="line">        capacity &lt;&lt;= <span class="number">1</span>;</span><br></pre></td></tr></table></figure>
<p>很多人都有这个疑问，为什么<code>hashmap</code>的数组初始化大小都是2的次方大小时，hashmap的效率最高，我以2的4次方举例，来解释一下为什么数组大小为2的幂时hashmap访问的性能最高。 </p>
<p>看下图，左边两组是数组长度为<code>16（2的4次方）</code>，右边两组是数组长度为15。两组的hashcode均为8和9，但是很明显，当它们和<code>1110</code>“与”的时候，产生了相同的结果，也就是说它们会定位到数组中的同一个位置上去，这就产生了碰撞，8和9会被放到同一个链表上，那么查询的时候就需要遍历这个链表，得到8或者9，这样就降低了查询的效率。同时，我们也可以发现，当数组长度为15的时候，<code>hashcode</code>的值会与<code>14（1110）</code>进行“与”，那么最后一位永远是0，而<code>0001，0011，0101，1001，1011，0111，1101</code>这几个位置永远都不能存放元素了，空间浪费相当大，更糟的是这种情况中，数组可以使用的位置比数组长度小了很多，这意味着进一步增加了碰撞的几率，减慢了查询的效率！<br><img src="http://dl2.iteye.com/upload/attachment/0017/5477/f7fdb997-2dbe-3d79-9a36-5720691f40d3.jpg" alt="hashtable原理图"></p>
<p>所以说，当数组长度为2的n次幂的时候，不同的key算得得index相同的几率较小，那么数据在数组上分布就比较均匀，也就是说碰撞的几率小，相对的，查询的时候就不用遍历某个位置上的链表，这样查询效率也就较高了。 </p>
<p>说到这里，我们再回头看一下hashmap中默认的数组大小是多少，查看源代码可以得知是16，为什么是16，而不是15，也不是20呢，看到上面的解释之后我们就清楚了吧，显然是因为16是2的整数次幂的原因，在小数据量的情况下16比15和20更能减少key之间的碰撞，而加快查询的效率。 </p>
<p>所以，在存储大容量数据的时候，最好预先指定hashmap的size为2的整数`次幂次方。就算不指定的话，根据构造函数我们知道也会以大于且最接近指定值大小的2次幂来初始化的。</p>
<h1 id="4-hashmap的resize"><a href="#4-hashmap的resize" class="headerlink" title="4. hashmap的resize"></a>4. hashmap的resize</h1><p>当hashmap中的元素越来越多的时候，碰撞的几率也就越来越高（因为数组的长度是固定的），所以为了提高查询的效率，就要对hashmap的数组进行扩容，数组扩容这个操作也会出现在ArrayList中，所以这是一个通用的操作，很多人对它的性能表示过怀疑，不过想想我们的“均摊”原理，就释然了，而在hashmap数组扩容之后，最消耗性能的点就出现了：原数组中的数据必须重新计算其在新数组中的位置，并放进去，这就是  resize  。 </p>
<p>那么hashmap什么时候进行扩容呢？当hashmap中的元素个数超过数组大小<code>loadFactor</code>时，就会进行数组扩容，loadFactor的默认值为0.75，也就是说，默认情况下，数组大小为16，那么当hashmap中元素个数超过<code>16*0.75=12</code>的时候，就把数组的大小扩展为<code>2*16=32</code>，即扩大一倍，然后重新计算每个元素在数组中的位置，而这是一个非常消耗性能的操作，所以如果我们已经预知hashmap中元素的个数，那么预设元素的个数能够有效的提高hashmap的性能。比如说，我们有1000个元素<code>new HashMap(1000)</code>, 但是理论上来讲<code>new HashMap(1024)</code>更合适，不过上面已经说过，即使是1000，hashmap也自动会将其设置为1024。 但是new HashMap(1024)还不是更合适的，因为<code>0.75*1000 &lt; 1000</code>, 也就是说为了让<code>0.75 * size &gt; 1000</code>, 我们必须这样<code>new HashMap(2048)</code>才最合适，既考虑了&amp;的问题，也避免了resize的问题。 </p>
<h1 id="5-HashMap的性能参数："><a href="#5-HashMap的性能参数：" class="headerlink" title="5. HashMap的性能参数："></a>5. HashMap的性能参数：</h1><p>HashMap 包含如下几个构造器：</p>
<ul>
<li><code>HashMap()</code>：构建一个初始容量为 16，负载因子为 0.75 的 HashMap。</li>
<li><code>HashMap(int initialCapacity)</code>：构建一个初始容量为 initialCapacity，负载因子为 0.75 的 HashMap。</li>
<li><code>HashMap(int initialCapacity)</code>：构建一个初始容量为 initialCapacity，负载因子为 0.75 的 HashMap。</li>
</ul>
<p>HashMap的基础构造器<code>HashMap(int initialCapacity, float loadFactor)</code>带有两个参数，它们是初始容量initialCapacity和加载因子loadFactor。<br>initialCapacity：HashMap的最大容量，即为底层数组的长度。</p>
<p>负载因子loadFactor定义为:<code>loadFactor =散列表的实际元素数目(n)/ 散列表的容量(m)</code>。</p>
<p>负载因子衡量的是一个散列表的空间的使用程度，负载因子越大表示散列表的装填程度越高，反之愈小。对于使用链表法的散列表来说，查找一个元素的平均时间是O(1+a)，因此如果负载因子越大，对空间的利用更充分，然而后果是查找效率的降低；如果负载因子太小，那么散列表的数据将过于稀疏，对空间造成严重浪费。</p>
<p>HashMap的实现中，通过<code>threshold</code>字段来判断HashMap的最大容量<br> <figure class="highlight java"><figcaption><span>计算hashmap的最大容量</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line">threshold = (<span class="keyword">int</span>)(capacity * loadFactor);  </span><br></pre></td></tr></table></figure><br>结合负载因子的定义公式可知，threshold就是在此loadFactor和capacity对应下允许的最大元素数目，超过这个数目就重新resize，以降低实际的负载因子。默认的的负载因子0.75是对空间和时间效率的一个平衡选择。当容量超出此最大容量时， resize后的HashMap容量是容量的两倍：<br> <figure class="highlight java"><figcaption><span>扩充hashmap的最大容量</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="keyword">if</span> (size++ &gt;= threshold)     </span><br><span class="line">    resize(<span class="number">2</span> * table.length); </span><br></pre></td></tr></table></figure></p>
<h1 id="6-Fail-Fast机制"><a href="#6-Fail-Fast机制" class="headerlink" title="6. Fail-Fast机制"></a>6. Fail-Fast机制</h1><p>我们知道<code>java.util.HashMap</code>不是线程安全的，因此如果在使用迭代器的过程中有其他线程修改了map，那么将抛出<code>ConcurrentModificationException</code>，这就是所谓<code>fail-fast</code>策略。</p>
<p>这一策略在源码中的实现是通过modCount域，<code>modCount</code>顾名思义就是修改次数，对HashMap内容的修改都将增加这个值，那么在迭代器初始化过程中会将这个值赋给迭代器的<code>expectedModCount</code>。</p>
<p>当容量超出此最大容量时， resize后的HashMap容量是容量的两倍：<br> <figure class="highlight java"><figcaption><span>expectedModCount策略代码</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line">HashIterator() &#123;</span><br><span class="line">    expectedModCount = modCount;</span><br><span class="line">    <span class="keyword">if</span> (size &gt; <span class="number">0</span>) &#123; <span class="comment">// advance to first entry</span></span><br><span class="line">    Entry[] t = table;</span><br><span class="line">    <span class="keyword">while</span> (index &lt; t.length &amp;&amp; (next = t[index++]) == <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在迭代过程中，判断modCount跟expectedModCount是否相等，如果不相等就表示已经有其他线程修改了Map：</p>
<p>注意到<code>modCount</code>声明为<code>volatile</code>，保证线程之间修改的可见性。</p>
<figure class="highlight java"><figcaption><span>expectedModCount抛异常代码</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">final</span> Entry&lt;K,V&gt; <span class="title">nextEntry</span><span class="params">()</span> </span>&#123;   </span><br><span class="line">    <span class="keyword">if</span> (modCount != expectedModCount)   </span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">&#125;        </span><br></pre></td></tr></table></figure>
<p>在HashMap的API中指出：<br>由所有HashMap类的<code>collection 视图方法</code>所返回的迭代器都是快速失败的：在迭代器创建之后，如果从结构上对映射进行修改，除非通过迭代器本身的 <code>remove</code> 方法，其他任何时间任何方式的修改，迭代器都将抛出 <code>ConcurrentModificationException</code>。因此，面对并发的修改，迭代器很快就会完全失败，而不冒在将来不确定的时间发生任意不确定行为的风险。<br>注意，迭代器的快速失败行为不能得到保证，一般来说，存在非同步的并发修改时，不可能作出任何坚决的保证。快速失败迭代器尽最大努力抛出 <code>ConcurrentModificationException</code>。因此，编写依赖于此异常的程序的做法是错误的，正确做法是：迭代器的快速失败行为应该仅用于检测程序错误。</p>
<blockquote>
<p>想了解更多技术文章信息，请继续关注<a href="http://wiliam.me">wiliam.s Blog</a>，谢谢，欢迎来访！</p>
</blockquote>
<hr>
<p>参考资料<br>1.JDK API HashMap<br>2.HashMap 源代码<br>3.<a href="http://zhangshixi.iteye.com/blog/672697" target="_blank" rel="noopener">深入Java集合学习系列：HashMap的实现原理</a><br>4.<a href="http://www.ibm.com/developerworks/cn/java/j-lo-hash/?ca=drs-tp4608" target="_blank" rel="noopener">通过分析 JDK 源代码研究 Hash 存储机制</a><br>5.<a href="http://www.iteye.com/topic/539465" target="_blank" rel="noopener">深入理解HashMap</a> </p>
]]></content>
      
        <categories>
            
            <category> houduan </category>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[数据结构之hash表]]></title>
      <url>http://wiliam.me/2016/11/02/20161102090928.html</url>
      <content type="html"><![CDATA[<blockquote>
<p>网上对hash表的介绍和总结有很多，但看完了总感觉不是自己的。所以自己总结了hash表，形成自己的知识图表，也希望能够对自己和大家有些帮助。<br>哈希表（Hash table，也叫散列表），是根据关键字(Key value)而直接进行访问的数据结构。</p>
</blockquote>
<p>大学时学过数据结构，不过基本都忘了，而且那时候刚刚编程，对数据结构也没多大印象，所以现在需要补起来了。</p>
<p>hash的英文意思[n. 剁碎的食物；混杂，拼凑；重新表述,vt. 搞糟，把…弄乱；切细；推敲]</p>
<p>hash表也叫哈希表，散列表，hash table，hash表，以后看见这几个记得都是一个意思。</p>
<p>hash函数也叫哈希函数，hash函数，散列函数，也都是一个意思。<br><a id="more"></a></p>
<hr>
<h1 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h1><p><code>哈希表</code>是根据关键码值(Key value)而直接进行访问的数据结构。也就是说，它通过把关键码值映射到表中一个位置来访问记录，以加快查找的速度。这个映射函数叫做<code>散列函数</code>，存放记录的数组叫做<code>散列表</code>。</p>
<p><code>哈希函数</code>给定表M，存在函数f(key)，对任意给定的关键字值key，代入函数后若能得到包含该关键字的记录在表中的地址，则称表M为<code>哈希(Hash）</code>，函数f(key)为哈希(Hash) 函数(也叫散列函数)。</p>
<p>对上面的意思白话解释：结合图1 hash表解释，图中的key就是关键字，就是存在一个固定大小的数组，这个数组就是<code>散列表</code>，这个数组中放的数据是有特点的，可以形象的想成key-value形式，value可以是自己自身或其他数据。如果要正常访问数组中的数据，需要用查找的key和数组中的key一个个比较，这样访问速度不是很慢吗，那么是否我可以把key和value形成某种关系对应起来呢，比如通过函数<code>address=f(key)</code>,这个address就是数组中的位置，这样我就不需要比较直接通过array[index]直接就访问了，这样访问速度就很快了。所以<code>address=f(key)</code>这个函数就叫哈希(Hash)函数(也叫散列函数)了。</p>
<p><img src="http://imgcdn.yalongkeji.com/hashtable.jpg" alt="图1 hash表"></p>
<p>一般的线性表，树中，记录在结构中的相对位置是随机的，即和记录的关键字之间不存在确定的关系，因此，在结构中查找记录时需进行一系列和关键字的比较。这一类查找方法建立在“比较“的基础上，查找的效率依赖于查找过程中所进行的比较次数。 理想的情况是能直接找到需要的记录，因此必须在记录的存储位置和它的关键字之间建立一个确定的对应关系f，使每个关键字和结构中一个唯一的存储位置相对应。</p>
<h1 id="2-基本概念"><a href="#2-基本概念" class="headerlink" title="2. 基本概念"></a>2. 基本概念</h1><p>理解哈希表需要涉及到一下几个概念</p>
<ul>
<li><p>若关键字为k，则其值存放在f(k)的存储位置上。由此，不需比较便可直接取得所查记录。称这个对应关系f为散列函数，按这个思想建立的表为散列表。<br>  散列函数有下面的特点</p>
<ul>
<li>两个相等的对象值他的散列函数的结果一定是相等的。</li>
<li>上面的结果反过来是不一定成立的，即如果两个对象的值的散列函数的结果相等，那么他们俩的值是不一定相等的。</li>
<li>如果两个对象的值的散列函数结果不相等，那么他们的值是一定不相等的。</li>
</ul>
</li>
<li><p>对不同的关键字可能得到同一散列地址，即k1≠k2，而f(k1)=f(k2)，这种现象称为碰撞（英语：Collision）。具有相同函数值的关键字对该散列函数来说称做同义词。综上所述，根据散列函数f(k)和处理碰撞的方法将一组关键字映射到一个有限的连续的地址集（区间）上，并以关键字在地址集中的“像”作为记录在表中的存储位置，这种表便称为散列表，这一映射过程称为散列造表或散列，所得的存储位置称散列地址。</p>
</li>
<li>若对于关键字集合中的任一个关键字，经散列函数映象到地址集合中任何一个地址的概率是相等的，则称此类散列函数为均匀散列函数（Uniform Hash function），这就是使关键字经过散列函数得到一个“随机的地址”，从而减少碰撞。</li>
</ul>
<h1 id="3-常用散列函数介绍"><a href="#3-常用散列函数介绍" class="headerlink" title="3. 常用散列函数介绍"></a>3. 常用散列函数介绍</h1><p><code>散列函数</code>能使对一个数据序列的访问过程更加迅速有效，通过散列函数，数据元素将被更快地定位。<br>实际工作中需视不同的情况采用不同的散列函数，通常考虑的因素有：</p>
<ul>
<li>计算散列函数所需时间</li>
<li>关键字的长度</li>
<li>哈希表的大小</li>
<li>关键字的分布情况</li>
<li>记录的查找频率</li>
</ul>
<p>通过上面介绍我们知道，决定散列表性能的关键是散列函数和冲突的处理<br>散列函数设计的好可以很快的定位到存储位置，冲突问题解决的好可以加快hash表的访问速度。下面是常用的散列函数</p>
<h2 id="3-1-直接寻址法"><a href="#3-1-直接寻址法" class="headerlink" title="3.1. 直接寻址法"></a>3.1. 直接寻址法</h2><p>取关键字或关键字的某个线性函数值为散列地址。即<code>f(key)=key</code>或<code>f(key) = a·key + b</code>，其中a和b为常数（这种散列函数叫做自身函数）。若其中f(key）中已经有值了，就往下一个找，直到f(key）中没有值了，就放进去。</p>
<h2 id="3-2-数字分析法"><a href="#3-2-数字分析法" class="headerlink" title="3.2. 数字分析法"></a>3.2. 数字分析法</h2><p>分析一组数据，比如一组员工的出生年月日，这时我们发现出生年月日的前几位数字大体相同，这样的话，出现冲突的几率就会很大，但是我们发现年月日的后几位表示月份和具体日期的数字差别很大，如果用后面的数字来构成散列地址，则冲突的几率会明显降低。因此数字分析法就是找出数字的规律，尽可能利用这些数据来构造冲突几率较低的散列地址。</p>
<h2 id="3-3-平方取中法"><a href="#3-3-平方取中法" class="headerlink" title="3.3. 平方取中法"></a>3.3. 平方取中法</h2><p>当无法确定关键字中哪几位分布较均匀时，可以先求出关键字的平方值，然后按需要取平方值的中间几位作为哈希地址。这是因为：平方后中间几位和关键字中每一位都相关，故不同关键字会以较高的概率产生不同的哈希地址。<br>例：我们把英文字母在字母表中的位置序号作为该英文字母的内部编码。例如K的内部编码为11，E的内部编码为05，Y的内部编码为25，A的内部编码为01, B的内部编码为02。由此组成关键字“KEYA”的内部代码为11052501，同理我们可以得到关键字“KYAB”、“AKEY”、“BKEY”的内部编码。之后对关键字进行平方运算后，取出第7到第9位作为该关键字哈希地址，如下表所示</p>
<table>
<thead>
<tr>
<th>关键字</th>
<th>内部编码</th>
<th>内部编码的平方值</th>
<th>H(k)关键字的哈希地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>KEYA</td>
<td>11050201</td>
<td>122157778355001</td>
<td>778</td>
</tr>
<tr>
<td>KYAB</td>
<td>11250102</td>
<td>126564795010404</td>
<td>795</td>
</tr>
<tr>
<td>AKEY</td>
<td>01110525</td>
<td>001233265775625</td>
<td>265</td>
</tr>
<tr>
<td>BKEY</td>
<td>02110525</td>
<td>004454315775625</td>
<td>315</td>
</tr>
</tbody>
</table>
<h2 id="3-4-折叠法"><a href="#3-4-折叠法" class="headerlink" title="3.4. 折叠法"></a>3.4. 折叠法</h2><p>将关键字分割成位数相同的几部分，最后一部分位数可以不同，然后取这几部分的叠加和（去除进位）作为散列地址。数位叠加可以有移位叠加和间界叠加两种方法。移位叠加是将分割后的每一部分的最低位对齐，然后相加；间界叠加是从一端向另一端沿分割界来回折叠，然后对齐相加。</p>
<h2 id="3-5-随机数法"><a href="#3-5-随机数法" class="headerlink" title="3.5. 随机数法"></a>3.5. 随机数法</h2><p>选择一随机函数，取关键字的随机值作为散列地址，通常用于关键字长度不同的场合。</p>
<h2 id="3-6-除留余数法"><a href="#3-6-除留余数法" class="headerlink" title="3.6. 除留余数法"></a>3.6. 除留余数法</h2><p>取关键字被某个不大于散列表表长m的数p除后所得的余数为散列地址。即 <code>f(key) = key MOD p,p&lt;=m</code>,此函数等价于<code>f(key) = (key % p),p&lt;=m</code>。不仅可以对关键字直接取模，也可在折叠、平方取中等运算之后取模。对p的选择很重要，一般取素数或m，若p选的不好，容易产生同义词。</p>
<h1 id="4-冲突"><a href="#4-冲突" class="headerlink" title="4. 冲突"></a>4. 冲突</h1><p>无论哈希函数设计有多么精细，都会产生冲突现象，也就是2个关键字处理函数的结果映射在了同一位置上，因此，有一些方法可以避免冲突。</p>
<h2 id="4-1-拉链法"><a href="#4-1-拉链法" class="headerlink" title="4.1. 拉链法"></a>4.1. 拉链法</h2><p>拉出一个动态链表代替静态顺序存储结构，可以避免哈希函数的冲突，不过缺点就是链表的设计过于麻烦，增加了编程复杂度。此法可以完全避免哈希函数的冲突。</p>
<h2 id="4-2-多哈希法"><a href="#4-2-多哈希法" class="headerlink" title="4.2. 多哈希法"></a>4.2. 多哈希法</h2><p>设计二种甚至多种哈希函数，可以避免冲突，但是冲突几率还是有的，函数设计的越好或越多都可以将几率降到最低（除非人品太差，否则几乎不可能冲突）。</p>
<h2 id="4-3-开放地址法"><a href="#4-3-开放地址法" class="headerlink" title="4.3. 开放地址法"></a>4.3. 开放地址法</h2><p>开放地址法有一个公式：<code>Hi=(H(key)+di) MOD m i=1,2,...,k(k&lt;=m-1）</code><br>其中，<code>m</code>为哈希表的表长。<code>di</code>是产生冲突的时候的增量序列。如果<code>di</code>值可能为<code>1,2,3,...m-1</code>，称线性探测再散列。<br>如果<code>di</code>取1，则每次冲突之后，向后移动1个位置.如果di取值可能为<code>1,-1,4,-4,9,-9,16,-16,...k*k,-k*k(k&lt;=m/2）</code><br>称二次探测再散列。如果<code>di</code>取值可能为伪随机数列。称伪随机探测再散列。</p>
<h2 id="4-4-建域法"><a href="#4-4-建域法" class="headerlink" title="4.4. 建域法"></a>4.4. 建域法</h2><p>假设哈希函数的值域为<code>[0,m-1]</code>，则设向量<code>HashTable[0..m-1]</code>为基本表，另外设立存储空间向量<code>OverTable[0..v]</code>用以存储发生冲突的记录。</p>
<h1 id="5-查找性能"><a href="#5-查找性能" class="headerlink" title="5. 查找性能"></a>5. 查找性能</h1><p>散列表的查找过程基本上和造表过程相同。一些关键码可通过散列函数转换的地址直接找到，另一些关键码在散列函数得到的地址上产生了冲突，需要按处理冲突的方法进行查找。在介绍的三种处理冲突的方法中，产生冲突后的查找仍然是给定值与关键码进行比较的过程。所以，对散列表查找效率的量度，依然用平均查找长度来衡量。</p>
<p>查找过程中，关键码的比较次数，取决于产生冲突的多少，产生的冲突少，查找效率就高，产生的冲突多，查找效率就低。因此，影响产生冲突多少的因素，也就是影响查找效率的因素。影响产生冲突多少有以下三个因素：</p>
<ol>
<li>散列函数是否均匀；</li>
<li>处理冲突的方法；</li>
<li>散列表的装填因子。</li>
</ol>
<p>散列表的装填因子定义为:<code>α= 填入表中的元素个数 / 散列表的长度</code></p>
<p>α是散列表装满程度的标志因子。由于表长是定值，α与“填入表中的元素个数”成正比，所以，α越大，填入表中的元素较多，产生冲突的可能性就越大；<br>α越小，填入表中的元素较少，产生冲突的可能性就越小。<br>实际上，散列表的平均查找长度是装填因子α的函数，只是不同处理冲突的方法有不同的函数。</p>
<h1 id="6-一些著名的hash算法-即散列函数"><a href="#6-一些著名的hash算法-即散列函数" class="headerlink" title="6. 一些著名的hash算法(即散列函数)"></a>6. 一些著名的hash算法(即散列函数)</h1><p>了解了hash基本定义，就不能不提到一些著名的hash算法，如下：</p>
<ul>
<li>MD4：MD4(RFC 1320）是 MIT 的 Ronald L. Rivest 在 1990 年设计的，MD 是 Message Digest 的缩写。它适用在32位字长的处理器上用高速软件实现–它是基于 32 位操作数的位操作来实现的。</li>
<li>MD5 :MD5(RFC 1321）是 Rivest 于1991年对MD4的改进版本。它对输入仍以512位分组，其输出是4个32位字的级联，与 MD4 相同。MD5比MD4来得复杂，并且速度较之要慢一点，但更安全，在抗分析和抗差分方面表现更好</li>
<li>SHA-1 及其他:SHA1是由NIST NSA设计为同DSA一起使用的，它对长度小于264的输入，产生长度为160bit的散列值，因此抗穷举（brute-force）性更好。SHA-1 设计时基于和MD4相同原理，并且模仿了该算法。</li>
</ul>
<h1 id="7-应用"><a href="#7-应用" class="headerlink" title="7. 应用"></a>7. 应用</h1><p>hash算法应用主要是在安全方面，安全方面的应用如下：</p>
<ul>
<li>文件校验</li>
<li>数字签名</li>
<li>鉴权协议</li>
</ul>
<h2 id="7-1-MD5、SHA1的破解"><a href="#7-1-MD5、SHA1的破解" class="headerlink" title="7.1.  MD5、SHA1的破解"></a>7.1.  MD5、SHA1的破解</h2><p>不过现在MD5和SHA-1已经不是很安全了<br>2004年8月17日，在美国加州圣芭芭拉召开的国际密码大会上，山东大学王小云教授在国际会议上首次宣布了她及她的研究小组的研究成果——对MD5、HAVAL－128、MD4和RIPEMD等四个著名密码算法的破译结果。2005年2月宣布破解SHA-1密码。</p>
<hr>
<p>如果上面有哪些不对的，欢迎大家指正，在此感谢！</p>
<blockquote>
<p>想了解更多技术文章信息，请继续关注<a href="http://wiliam.me">wiliam.s Blog</a>，谢谢，欢迎来访！</p>
</blockquote>
<p>参考资料<br>1.<a href="http://baike.baidu.com/link?url=4fMKcdVyxcRGP-_6dRHSPIhFs7oSPGhbL0akJv4FtRLYD2rO7NLvjyAJDXGZVJJK4RiRMNU4lV-6phLUA7rVKxezCaYD6ggWFnwV6TH1wqkjG2S0bqE8LkQ2KaLJhZ1h33-Hgxul9DUm5GplTG2CVKXFJjAON_aYFh9jxOh4tMyG6q86Uv9CCkMSwIwnSyk8VeMS3EPRJ7Ve3CMXhbZzxK#ref_[1]_329976" target="_blank" rel="noopener">哈希表</a> · <font color="gray" size="2">百度百科</font><br>2.<a href="http://baike.baidu.com/view/549615.htm?fromtitle=%E6%95%A3%E5%88%97%E5%87%BD%E6%95%B0&amp;fromid=2366288&amp;type=syn" target="_blank" rel="noopener">哈希函数</a> · <font color="gray" size="2">百度百科</font><br>3.数据结构与算法分析 · <font color="gray" size="2">java语言描述(第二版)</font></p>
]]></content>
      
        <categories>
            
            <category> houduan </category>
            
            <category> 数据结构 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[开始blog之路]]></title>
      <url>http://wiliam.me/2016/10/29/20161029222406.html</url>
      <content type="html"><![CDATA[<blockquote>
<p>人生路漫漫，总要有些收获与沉淀，用来证明自己的成长。</p>
</blockquote>
<a id="more"></a>
<h2 id="学习使用Hexo写静态blog"><a href="#学习使用Hexo写静态blog" class="headerlink" title="学习使用Hexo写静态blog"></a>学习使用Hexo写静态blog</h2><p>在此感谢<a href="http://ehlxr.me" target="_blank" rel="noopener">ehlxr同学</a>的大力支持让我搭建Hexo成功了。</p>
<p>一直想弄一个自己的个人blog，奈何之前不知道怎么搭建，也搜了一些搭建博客的框架，但是弊端挺多:</p>
<ul>
<li>需要有自己的服务器，比如购买阿里云的ECS</li>
<li>需要有自己的数据库</li>
<li>服务器的流量有限制，这个你总不能花很多钱买吧。</li>
<li>若blog框架是java系列的就要jdk等一系列的东西。</li>
<li>自己搭建的服务器还有可能有问题，不能稳定运行啊。</li>
<li>最后你得年年购买啊，万一到期了，你的服务器就不是你的了，结果你懂得。</li>
</ul>
<p>这些东西搭建起来倒是不难，但是本来配置就不高的服务器却因为这些而把内存耗尽了，而且本来好好想写一篇blog的自己却因为自己搭建的Blog框架有问题而陷入了代码的debug。想要高配置的服务器，价格可就高多了，有些得不偿失。</p>
<p>在看见<a href="http://ehlxr.me" target="_blank" rel="noopener">ehlxr同学</a>搭建出来的精美个人blog后，自己也心动了，主要是好处很多:</p>
<ul>
<li>可以专心的写自己blog了，而且一直存在啊。</li>
<li>服务很稳定，用的是github，这基本不能有问题吧！</li>
<li>据说访问量没有限制哦。</li>
<li>有现成的Blog框架Hexo，简单几步直接搭建完成，so easy。</li>
<li>用的是Markdown语法，再也不用为格式而发愁了。</li>
<li>主题多样化，个性化定制，最大化显示你的与众不同。</li>
</ul>
<p>总之好处很多，希望自己以后能够在这喧嚣繁闹的世界中多多静下心来抽时间来写文章。</p>
<h2 id="如何用Hexo搭建自己的blog"><a href="#如何用Hexo搭建自己的blog" class="headerlink" title="如何用Hexo搭建自己的blog"></a>如何用Hexo搭建自己的blog</h2><p>也想搭建自己的个人blog吗，下面是我参考<a href="http://ehlxr.me" target="_blank" rel="noopener">ehlxr同学</a>搭建的地址，你可以参考 </p>
<ul>
<li><a href="http://ehlxr.me/2016/07/23/%E4%BD%BF%E7%94%A8Hexo%E5%9F%BA%E4%BA%8EGitHub-Pages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%80%EF%BC%89/" target="_blank" rel="noopener">使用Hexo基于GitHub Pages搭建个人博客（一）</a></li>
<li><a href="http://ehlxr.me/2016/07/23/%E4%BD%BF%E7%94%A8Hexo%E5%9F%BA%E4%BA%8EGitHub-Pages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%BA%8C%EF%BC%89/" target="_blank" rel="noopener">使用Hexo基于GitHub Pages搭建个人博客（二）</a></li>
<li><a href="http://ehlxr.me/2016/08/30/%E4%BD%BF%E7%94%A8Hexo%E5%9F%BA%E4%BA%8EGitHub-Pages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%89%EF%BC%89/" target="_blank" rel="noopener">使用Hexo基于GitHub Pages搭建个人博客（三）</a></li>
</ul>
<blockquote>
<p>想了解更多技术文章信息，请继续关注<a href="http://wiliam.me">wiliam.s Blog</a>，谢谢，欢迎来访！</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> zatan </category>
            
            <category> 杂谈 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 杂谈 </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
